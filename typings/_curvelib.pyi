# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
"""
_curvelib - The Python API for the Nuke's core curve library
"""

from typing import Optional, Union, overload
from wulifang._compat.str import Str

class AnimAttributes:
    """
    A collection of named attributes.

    Each attribute is represented as a curve, parametrised over time. Convenience methods for managing the curves (adding and removing keys, etc.) are provided, as well as methods for managing the list of available attributes.

    Attributes can be accessed by index or by name. This class defines constants for standard names in use by Nuke.
    """

    __new__: ...

    kAlphaAttribute: Str = Str("a")

    kAlphaOverlayAttribute: Str = Str("ao")

    kBlendingModeAttribute: Str = Str("bm")

    kBlueAttribute: Str = Str("b")

    kBlueOverlayAttribute: Str = Str("bo")

    kBrushSizeAttribute: Str = Str("bs")

    kBrushSpacingAttribute: Str = Str("bsp")

    kBrushTypeAttribute: Str = Str("bt")

    kBuildUpAttribute: Str = Str("bu")

    kDynamicHardnessAttribute: Str = Str("dh")

    kDynamicSizeAttribute: Str = Str("ds")

    kDynamicTransparencyAttribute: Str = Str("dt")

    kEffectParameter1Attribute: Str = Str("ep1")

    kEffectParameter2Attribute: Str = Str("ep2")

    kEffectParameter3Attribute: Str = Str("ep3")

    kFeatherFallOffAttribute: Str = Str("ff")

    kFeatherOnAttribute: Str = Str("fo")

    kFeatherTypeAttribute: Str = Str("ft")

    kFeatherXAttribute: Str = Str("fx")

    kFeatherYAttribute: Str = Str("fy")

    kGreenAttribute: Str = Str("g")

    kGreenOverlayAttribute: Str = Str("go")

    kHardnessAttribute: Str = Str("h")

    kInvertedAttribute: Str = Str("inv")

    kLifeTimeMAttribute: Str = Str("ltm")

    kLifeTimeNAttribute: Str = Str("ltn")

    kLifeTimeTypeAttribute: Str = Str("ltt")

    kMotionBlurAttribute: Str = Str("mb")

    kMotionBlurOnAttribute: Str = Str("mbo")

    kMotionBlurShutterAttribute: Str = Str("mbs")

    kMotionBlurShutterOffsetAttribute: Str = Str("mbso")

    kMotionBlurShutterOffsetTypeAttribute: Str = Str("mbsot")

    kNumberOfViewsAttribute: Str = Str("nv")

    kOpacityAttribute: Str = Str("opc")

    kPlanarTrackLayerAttribute: Str = Str("pt")

    kRedAttribute: Str = Str("r")

    kRedOverlayAttribute: Str = Str("ro")

    kSourceAttribute: Str = Str("src")

    kSourcePivotPointXAttribute: Str = Str("spx")

    kSourcePivotPointYAttribute: Str = Str("spy")

    kSourceRotateAttribute: Str = Str("sr")

    kSourceScaleXAttribute: Str = Str("ssx")

    kSourceScaleYAttribute: Str = Str("ssy")

    kSourceSkewOrderAttribute: Str = Str("sso")

    kSourceSkewXAttribute: Str = Str("sskx")

    kSourceSkewYAttribute: Str = Str("ssky")

    kSourceTimeOffsetAttribute: Str = Str("sto")

    kSourceTimeOffsetTypeAttribute: Str = Str("stot")

    kSourceTranslateRoundAttribute: Str = Str("str")

    kSourceTranslateXAttribute: Str = Str("stx")

    kSourceTranslateYAttribute: Str = Str("sty")

    kTensionAttribute: Str = Str("t")

    kViewAttribute: Str = Str("view")

    kVisibleAttribute: Str = Str("vis")

    kWriteOnEndAttribute: Str = Str("we")

    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __contains__(self, *args, **kwargs):
        """
        x.__contains__(y) <==> y in x
        """
        ...
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def add(self, name, value) -> None:
        """
        Add a new attribute. The name parameter is the name for the attribute and value is the initial int or float value to assign to it.
        """
        ...
    def addKey(self, time, name, value, view) -> None:
        """
        self.addKey(time, view) -> None
        When a name and value is specified, this method adds a new key to an existing attribute at the given time. When the name and value are omitted, a new key is added to all attributes at the specified time. The view parameter is optional in either case.
        """
        ...
    def getCurve(self, attr: Union[int, Str], view=...) -> AnimCurve:
        """
        Gets the AnimCurve object for a particular attribute. The attr parameter can be the index or name of the attribute. The view parameter is optional.
        """
        ...
    def getKeyTime(self, index, keyIndexOrHash, view) -> float:
        """
        Gets the time a particular key is set at. The index parameter is the index of the attribute; keyIndexOrHash is either the index of the key in the attributes AnimCurve, or its associated Hash; and view is the optional view name.
        """
        ...
    def getName(self, index) -> Str:
        """
        Get the name of an attribute when you know its index.
        """
        ...
    def getNumberOfKeys(self, attr, view) -> int:
        """
        Returns the number of keys in the curve for a particular attribute. The attr parameter can be the index or name of the attribute. The view parameter is optional.
        """
        ...
    def getValue(
        self,
        time: float,
        indexOrName: Union[int, Str],
        view: Optional[Str] = ...,
    ) -> float:
        """
        Evaluates the anim curve of an attribute at a particular time and returns the value.
        time is the time for which to evaluate the attribute; indexOrName is either the index of the attribute to evaluate, or its name; and view is the optional view name.
        """
        ...
    def remove(self, attributeIndexOrName) -> None:
        """
        Remove an attribute. You can give the name or index of the attribute.
        """
        ...
    def removeAll(self) -> None:
        """
        Remove all attributes.
        """
        ...
    def removeKey(self, time, attributeIndex, view) -> None:
        """
        Remove a particular key from an attribute. The view parameter is optional.
        """
        ...
    def removeKeys(self, attributeIndex, view) -> None:
        """
        Remove all keys from an attribute. The view parameter is optional.
        """
        ...
    def reset(self) -> None:
        """
        Reset the object to have no attributes.
        """
        ...
    @overload
    def set(
        self,
        attributeIndexOrName: Union[int, Str],
        value: float,
        view: Optional[Str] = ...,
    ) -> None: ...
    @overload
    def set(
        self,
        time: float,
        attributeIndexOrName: Union[int, Str],
        value: float,
        view: Optional[Str] = ...,
    ) -> None:
        """
        Set the value of an attribute. The time parameter is optional: if it's present, a new key is created at that time with the specified value; if it's not present, a constant value is set for the attribute. The attribute to set may be identified by its name or index. The view parameter is optional.
        """
        ...
    def setCurve(self, index, curve) -> None:
        """
        Replace the current anim curve for an attribute with a new one. The index parameter is the index of the attribute; and curve is an AnimCurve instance.
        """
        ...
    def setKey(self, time, attributeIndex, hash, value, view) -> None:
        """
        Set a key for an attribute. The time parameter is when the new key will be created for; the attributeIndex says which attribute to set the key for; the
        """
        ...
    def setName(self, attributeIndex, newName) -> None:
        """
        Change the name of an existing attribute.
        """
        ...
    ...

class AnimCTransform:
    """
    An animated transform, where each part of the transform is represented as a curve over time.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def addPivotPointKey(self, time, x, y, pressure, view="default") -> None:
        """ """
        ...
    def addRotationKey(self, time, x, y, pressure, view="default") -> None:
        """ """
        ...
    def addScaleKey(self, time, x, y, pressure, view="default") -> None:
        """ """
        ...
    def addSkewXKey(self, time, x, y, pressure, view="default") -> None:
        """ """
        ...
    def addTransformKey(self, time, view) -> None:
        """ """
        ...
    def addTranslationKey(self, time, x, y, pressure, view="default") -> None:
        """ """
        ...
    def evaluate(self, time, view) -> None:
        """ """
        ...
    def getExtraMatrixAnimCurve(self, i, j, view) -> AnimCurve:
        """
        Returns the AnimCurve object for the 4i+j element in the transform's extra matrix.The view parameter is optional.
        """
        ...
    def getNumberOfPivotPointKeys(self, view) -> int:
        """
        Get the number of keys for the pivotPoint attribute. The view parameter is optional.
        """
        ...
    def getNumberOfRotationKeys(self, view) -> int:
        """
        Get the number of keys for the rotation attribute. The view parameter is optional.
        """
        ...
    def getNumberOfScaleKeys(self, view) -> int:
        """
        Get the number of keys for the scale attribute. The view parameter is optional.
        """
        ...
    def getNumberOfSkewXKeys(self, view) -> int:
        """
        Get the number of keys for the skewX attribute. The view parameter is optional.
        """
        ...
    def getNumberOfTransformKeys(self, view) -> int:
        """
        Get the number of keys for all attributes of this transform. The view parameter is optional.
        """
        ...
    def getNumberOfTranslationKeys(self, view) -> int:
        """
        Get the number of keys for the translation attribute. The view parameter is optional.
        """
        ...
    def getPivotPointAnimCurve(self, index, view) -> AnimCurve:
        """ """
        ...
    def getPivotPointKeyTime(self, index, view) -> float:
        """
        Get the time for a specific key on the pivotPoint attribute. index is the index of the key. The view parameter is optional.
        """
        ...
    def getPivotPointKeyTimes(self, view) -> list[float]:
        """
        Get the times for all keys on the pivotPoint attribute. The view parameter is optional.
        """
        ...
    def getRotationAnimCurve(self, index, view) -> AnimCurve:
        """ """
        ...
    def getRotationKeyTime(self, index, view) -> float:
        """
        Get the time for a specific key on the rotation attribute. index is the index of the key. The view parameter is optional.
        """
        ...
    def getRotationKeyTimes(self, view) -> list[float]:
        """
        Get the times for all keys on the rotation attribute.The view parameter is optional.
        """
        ...
    def getScaleAnimCurve(self, index, view) -> AnimCurve:
        """ """
        ...
    def getScaleKeyTime(self, index, view) -> float:
        """
        Get the time for a specific key on the scale attribute. index is the index of the key. The view parameter is optional.
        """
        ...
    def getScaleKeyTimes(self, view) -> list[float]:
        """
        Get the times for all keys on the scale attribute. The view parameter is optional.
        """
        ...
    def getSkewXAnimCurve(self, index, view) -> AnimCurve:
        """ """
        ...
    def getSkewXKeyTime(self, index, view) -> float:
        """
        Get the time for a specific key on the skewX attribute. index is the index of the key. The view parameter is optional.
        """
        ...
    def getSkewXKeyTimes(self, view) -> list[float]:
        """
        Get the times for all keys on the skewX attribute. The view parameter is optional.
        """
        ...
    def getTransformKeyTime(self, index, view) -> float:
        """
        Get the time for a specific key. The view parameter is optional.
        """
        ...
    def getTransformKeyTimes(self, view) -> list[float]:
        """
        Get the times for all keys, across all attributes of this transform. The view parameter is optional.
        """
        ...
    def getTranslationAnimCurve(self, index, view) -> AnimCurve:
        """ """
        ...
    def getTranslationKeyTime(self, index, view) -> float:
        """
        Get the time for a specific key on the translation attribute. index is the index of the key. The view parameter is optional.
        """
        ...
    def getTranslationKeyTimes(self, view) -> list[float]:
        """
        Get the times for all keys on the translation attribute. The view parameter is optional.
        """
        ...
    def isDefault(self) -> bool:
        """
        Check whether this transform has been modified away from the default values.
        """
        ...
    def removePivotPointKey(self, time, view) -> None:
        """ """
        ...
    def removeRotationKey(self, time, view) -> None:
        """ """
        ...
    def removeScaleKey(self, time, view) -> None:
        """ """
        ...
    def removeSkewXKey(self, time, view) -> None:
        """ """
        ...
    def removeTransformKey(self, time, view) -> None:
        """ """
        ...
    def removeTranslationKey(self, time, view) -> None:
        """ """
        ...
    def reset(self) -> None:
        """ """
        ...
    def setExtraMatrixAnimCurve(self, i, j, animcurve, view) -> None:
        """
        Sets the AnimCurve object for the '4i+j'-th element of the extra matrix.The view parameter is optional
        """
        ...
    def setIdentity(self, view="default") -> None:
        """ """
        ...
    def setPivotPointAnimCurve(self, index, animCurve, view) -> None:
        """
        Set the anim curve for the pivot point attribute of this transform. The index parameter should be 0 for the x values, 1 for the y values. The view parameter is optional.
        """
        ...
    def setRotationAnimCurve(self, index, animCurve, view) -> None:
        """
        Set the anim curve for the rotation attribute of this transform. The index parameter should be 0 for the x values, 1 for the y values. The view parameter is optional.
        """
        ...
    def setScaleAnimCurve(self, index, animCurve, view) -> None:
        """
        Set the anim curve for the scale attribute of this transform. The index parameter should be 0 for the x values, 1 for the y values. The view parameter is optional.
        """
        ...
    def setSkewXAnimCurve(self, index, animCurve, view) -> None:
        """
        Set the anim curve for the skewX attribute of this transform. The index parameter should be 0 for the x values, 1 for the y values. The view parameter is optional.
        """
        ...
    def setTranslationAnimCurve(self, index, animCurve, view) -> None:
        """
        Set the anim curve for the translation attribute of this transform. The index parameter should be 0 for the x values, 1 for the y values. The view parameter is optional.
        """
        ...
    ...

class AnimControlPoint(Flag):
    """
    An animated control point.

    These are used directly by Stroke objects to store the control point locations. Shape objects use a collection of up to 6 of them to represent each control point (see the ShapeControlPoint class for details).

    It is advisable to call changed() on the 'curves' knob after making modifications to curves. This forces the knob to re-cache the state of its curves.

    The 'view' argument to the object's methods can be omitted and the default view 'main' will be used.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def addControlPoint(self, controlPoint) -> None:
        """ """
        ...
    def addKey(self, time, controlPointOrDim, view) -> None:
        """ """
        ...
    def addPositionKey(
        self,
        time: float,
        positionOrDim: Union[CVec3, int],
        view: Optional[Str] = ...,
    ) -> None:
        """
        Adds a new key to the control point's timeline. positionOrDim can either be a vector or a single scalar that specifies which component (xyzw) to add a key for.
        """
        ...
    def evaluate(self, time, view) -> ControlPoint:
        """
        Evaluates the animated control point's position at the specific time.
        """
        ...
    def getControlPointKeyTimes(self, view: Str = ...) -> list[float]:
        """
        Get the list of times at which this control point has a key. The view parameter is optional.
        """
        ...
    def getPosition(self, time: float, view: Optional[Str] = ...) -> CVec3:
        """
        Get the position of this control point at a particular time. The time parameter is a float specifying which time to calculate the position for; the view parameter is the optional view name.
        """
        ...
    def getPositionAnimCurve(self, index, view) -> AnimCurve:
        """
        Returns the AnimCurve object containing the time line for the control point.
        """
        ...
    def getPositionKeyTime(self, index, keyIndex, view) -> float:
        """
        Get the time of a particular key for this control point. index is 0 for the X coordinate, 1 for Y or 2 for Z. keyIndex is the index of the relevant key. The view parameter is optional.
        """
        ...
    def removeAllKeys(self, view) -> None:
        """ """
        ...
    def removeKey(self, time, view) -> None:
        """ """
        ...
    def removePositionKey(self, time: float, view: Str = ...) -> None:
        """ """
        ...
    def reset(self) -> None:
        """
        Resets the control point back to an initial empty state.
        """
        ...
    def setPosition(self, position, view) -> None:
        """
        Sets the control point's 'constant' position (the position used when there are no keys - see AnimCurve for further info). Calling this method when the control point has keys will have no effect.
        """
        ...
    def setPositionAnimCurve(self, index, animCurve, view) -> None:
        """
        Set the point's AnimCurve object (its time line).
        """
        ...
    def setPositionKey(self, time, index, value, id, view) -> None:
        """
        Sets an individual dimension (index) of a key to a specific value. The key to modify is identified by hash (id). The method fails if there is no key at the specified time.
        """
        ...
    ...

class AnimCurve(BaseCurve):
    """
    An animated curve. The curve is described as a series of key values (instances of the AnimCurveKey class) which say what value it should have a particular time. For any time in between keys, the neighbouring key values are interpolated based on a curve type and interpolation settings specified at each key.

    Each curve can only represent a single floating point value over time.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    kDefaultConstantValue: float = 0.0

    constantValue: float = ...

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def addKey(self, time, value) -> None:
        """
        Add a new key to this curve. You can pass in either a time and value pair (the value parameter is optional), or an AnimCurveKey object you've created yourself. In the former case, a new AnimCurveKey object will be created and added to the curve; in the latter case, the key you pass in will be added directly.

        Overloads:
            self.addKey(keyObj) -> None
        """
        ...
    def evaluate(self, time) -> float:
        """
        Calculate the value of the curve at a specific time, the pass that in to the expression for the curve. The return value is the result of the expression.
        """
        ...
    def evaluateY(self, time) -> float:
        """
        Calculates the value of the curve at a specific time.
        """
        ...
    def getKey(self, index) -> AnimCurveKey:
        """
        Returns one of the keys on this curve.
        """
        ...
    def getNumberOfKeys(self) -> int:
        """
        Returns the number of keys along this curve.
        """
        ...
    def isDefault(self) -> bool:
        """
        Check whether this curve has been modified away from its default values.
        """
        ...
    def removeAllKeys(self) -> None:
        """
        Removes all keys from this curve.
        """
        ...
    def removeKey(self, timeOrHash) -> None:
        """
        Remove an existing key from this curve. The key is identified by either the time it occurs at, or its hash (as returned by the key's getHash() method.
        """
        ...
    def reset(self) -> None:
        """
        Reset this object to its default values.
        """
        ...
    ...

class AnimCurveKey(Flag):
    """
    A key value in a parametric curve represented as a value at a particular time.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def reset(self) -> None:
        """
        Reset this key to its default values.
        """
        ...
    ...

class AnimCurveViews:
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def getNumberOfViews(self) -> int:
        """
        Get the number of views.
        """
        ...
    def getViewIndex(self, name) -> int:
        """
        Get the index of a view when you know its name.
        """
        ...
    def getViewName(self, index) -> Str:
        """
        Get the name of a particular view when you know its index.
        """
        ...
    def getViewNames(self) -> list[float]:
        """
        Get the list of all view names.
        """
        ...
    ...

class BaseCurve(Flag):
    """
    A base class for animated curves.

    You shouldn't be using this class directly, it only exists for other classes in this module to inherit from.
    """

    __new__: ...

    kDefaultCurveFlag: int = 0

    kDefaultCurveTension: float = 0.5

    kDefaultCurveType: int = 0

    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    ...

class CMatrix4:
    """
    A 4x4 matrix with methods for affine transformations.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __imul__(self, *args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def makeIdentity(self) -> None:
        """
        Set this matrix to be the identity matrix.
        """
        ...
    def rotateX(self, angleInRadians) -> None:
        """
        Post-multiply this matrix by a rotation around the X axis.
        """
        ...
    def rotateY(self, angleInRadians) -> None:
        """
        Post-multiply this matrix by a rotation around the Y axis.
        """
        ...
    def rotateZ(self, *args, **kwargs):
        """
        self.rotateY(angleInRadians) -> None
        Post-multiply this matrix by a rotation around the Z axis.
        """
        ...
    def scale(self, x, y, z) -> None:
        """
        Post-multiply this matrix by a scale transformation. The y and z parameters
        may be left out; if so the scale is uniform along all three axes.
        """
        ...
    def skew(self, x, y, z) -> None:
        """
        Post-multiply this matrix with a skew transformation. The y and z parameters
        may be left out; if so, the skew is in the X direction only.
        """
        ...
    def translate(self, x, y, z) -> None:
        """
        Post-multiply this matrix by a translation matrix.
        """
        ...
    def translation(self, x, y, z) -> None:
        """
        Set this matrix to be a translation matrix, replacing any existing values.

        This is different from other methods in this class as it replaces, rather than multiplying by, the existing values in the matrix.
        """
        ...
    def transpose(self) -> None:
        """
        Transpose the matrix in-place.
        """
        ...
    ...

class CTransform:
    """
    A transform at a single point in time.

    This is the result of evaluating an AnimTransform for a particular time.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def getInverseMatrix(self) -> CMatrix4:
        """
        Gets the inverse transform matrix, which can be used for undoing the effects of this transform.
        """
        ...
    def getMatrix(self) -> CMatrix4:
        """
        Get the matrix which represents the combination of the translation, scale, rotation, skew and pivotPoint settings for this transform.
        """
        ...
    def getTransposeMatrix(self) -> CMatrix4:
        """
        Returns a transposed copy of the matrix representing this transform.
        """
        ...
    def isDefault(self) -> bool:
        """
        Returns True if this transform matches the default settings, False if not.
        """
        ...
    def reset(self) -> None:
        """
        Return this transform to its default settings.
        """
        ...
    def setIdentity(self) -> None:
        """
        Set this transform to the identity transform (the transform which doesn't change the object at all).
        """
        ...
    ...

class CVec2:
    """
    A 2-component vector.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    ...

class CVec3:
    """
    A 3-component vector.
    """

    x: float
    "The x coordinate."

    y: float
    "The y coordinate."

    z: float
    "The z coordinate."

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs) -> CVec3:
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __div__(self, *args, **kwargs) -> CVec3:
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs) -> CVec3:
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __isub__(self, *args, **kwargs) -> CVec3:
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs) -> CVec3:
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(self, *args, **kwargs) -> CVec3:
        """
        x.__neg__() <==> -x
        """
        ...
    def __radd__(self, *args, **kwargs) -> CVec3:
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(self, *args, **kwargs) -> CVec3:
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs) -> CVec3:
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs) -> CVec3:
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def __sub__(self, *args, **kwargs) -> CVec3:
        """
        x.__sub__(y) <==> x-y
        """
        ...

class CVec4:
    """
    A 4-component vector.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    ...

class ControlPoint:
    """
    A control point at a particular point in time.

    This is the result of evaluating an AnimControlPoint for a particular time value.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def reset(self) -> None:
        """
        Reset this control point to its default values
        """
        ...
    ...

class CorrespondencePoints:
    """
    Correspondence points add a relation to the interpolation of two
    curves. These points are made up of two values; a t-value on the
    source curve and a corresponding t-value on the destination curve
    T-values should be in the range [0-1], where 0 is the start of
    the curve, and 1 is the end of the curve
    """

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def addPoint(self, *args, **kwargs):
        """
        cps.addPoint(time, t_src, t_dest)
        Adds a correspondence point
        @param time: Time at which to t_src and t_dest will be set
        @param t_src: Position on the source curve (where 0=start and 1=end)
        @param t_dest: Position on the destination curve
        Note that the correspondence point is not animated.
        Animation must be set manually to avoid conflicting
        with existing points.
        """
        ...
    def getAnimCurve(self, *args, **kwargs):
        """
        cps.getAnimCurve(index, which) -> AnimCurve
        @param index: Index to the point to get the associated AnimCurve
        object for
        @param which: Whether the source (0) or destination (1) t-value is
        being modified
        @return: An AnimCurve object for the timeline of the specified
        point and src/dest value
        """
        ...
    def getNumPoints(self, *args, **kwargs):
        """
        cps.getNumPoints()
        @return: Returns the number of correspondence points in the object
        """
        ...
    def getPointValues(self, *args, **kwargs):
        """
        cps.getPointValues(time, index) -> (t_stc, t_dest)
        @param time: Time at which to evaluate point's values
        @param index: Index to the point to evaluate
        @return: A tuple containing source and destination t-values
        """
        ...
    def modifyPoint(self, *args, **kwargs):
        """
        cps.modifyPoint(time, index, which, t)
        @param time: Time at which to t_in and t_out will be set
        @param index: Index to the point to modify
        @param which: Whether the source (0) or destination (1) t-value is
        being modified
        @param t: Position on the curve specified in by 'which'
        """
        ...
    def removePoint(self, *args, **kwargs):
        """
        cps.removePoint(index)
        @param index: Index to the point to remove
        """
        ...
    def reset(self, *args, **kwargs):
        """
        cps->reset()
        Resets the correspondence points object to empty
        """
        ...
    ...

class CubicCurve:
    """
    A baked out curve for a specific frame and view.

    Use the getPoint function to get positions along the curve.

    Note that some curves, such as the feather curve for a roto shape, are stored as offsets relative to another curve rather than absolute positions.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def getPoint(self, t) -> CVec4:
        """
        @param t: The parameter value to evaluate the curve with. 0.0 is the start of the curve and 1.0 is the end. A value outside this range will throw a ValueError.
        @return: A CVec4 containing the evaluation result. If the curve has less than 4 dimension, the extra dimensions will be filled with default values.
        """
        ...
    ...

class CurveType:
    """
    Constants for use in parameters which require a curve type.
    """

    ...

class ExtrapolationType:
    """
    Constants for use in parameters which require an extrapolation type.
    """

    ...

class Flag:
    """
    A base class for objects which have a set of flags that can be set.

    You should never be instantiating this class directly - it only exists for other classes to inherit from.
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def getFlag(self, flag) -> bool:
        """
        Gets the specified flag. The parameter should be one of the FlagType constants.
        """
        ...
    def setFlag(self, flag, value) -> None:
        """
        Set or clear the specified flag. The flag parameter should be one of the FlagType constants and value should be True or False.
        """
        ...
    ...

class FlagType:
    """
    Constants for use in parameters which require a flag type.
    """

    ...

class InterpolationType:
    """
    Constants for use in parameters which require an interpolation type.
    """

    ...

class RotationOrder:
    """
    Constants for use in parameters which require a rotation order.
    """

    ...

class TransformOrder:
    """
    Constants for use in parameters which require a transform order.
    """

    ...
