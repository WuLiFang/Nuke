# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
# pyright: reportUndefinedVariable=information,reportUnusedImport=false
"""
PySide.QtCore

"""

import typing

class ClassInfo:
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class MSG(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    ...

class MetaFunction(__builtin__.object):
    """
    MetaFunction
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...

    ...

class POINT(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class Property:
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def getter(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def setter(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractAnimation(QObject):
    Backward: ... = PySide.QtCore.QAbstractAnimation.Direction.Backward
    """
    """

    DeleteWhenStopped: ...
    """
    """

    DeletionPolicy: ...
    """
    """

    Direction: ...
    """
    """

    Forward: ... = PySide.QtCore.QAbstractAnimation.Direction.Forward
    """
    """

    KeepWhenStopped: ...
    """
    """

    Paused: ... = PySide.QtCore.QAbstractAnimation.State.Paused
    """
    """

    Running: ... = PySide.QtCore.QAbstractAnimation.State.Running
    """
    """

    State: ...
    """
    """

    Stopped: ... = PySide.QtCore.QAbstractAnimation.State.Stopped
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentLoopChanged: ...
    """
    Signal
    """

    directionChanged: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def currentLoop(self, *args, **kwargs):
        """
        """
        ...

    def currentLoopTime(self, *args, **kwargs):
        """
        """
        ...

    def currentTime(self, *args, **kwargs):
        """
        """
        ...

    def direction(self, *args, **kwargs):
        """
        """
        ...

    def duration(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def group(self, *args, **kwargs):
        """
        """
        ...

    def loopCount(self, *args, **kwargs):
        """
        """
        ...

    def pause(self, *args, **kwargs):
        """
        """
        ...

    def resume(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentTime(self, *args, **kwargs):
        """
        """
        ...

    def setDirection(self, *args, **kwargs):
        """
        """
        ...

    def setLoopCount(self, *args, **kwargs):
        """
        """
        ...

    def setPaused(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def state(self, *args, **kwargs):
        """
        """
        ...

    def stop(self, *args, **kwargs):
        """
        """
        ...

    def totalDuration(self, *args, **kwargs):
        """
        """
        ...

    def updateCurrentTime(self, *args, **kwargs):
        """
        """
        ...

    def updateDirection(self, *args, **kwargs):
        """
        """
        ...

    def updateState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractEventDispatcher(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToBlock: ...
    """
    Signal
    """

    awake: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def instance(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def closingDown(self, *args, **kwargs):
        """
        """
        ...

    def flush(self, *args, **kwargs):
        """
        """
        ...

    def hasPendingEvents(self, *args, **kwargs):
        """
        """
        ...

    def interrupt(self, *args, **kwargs):
        """
        """
        ...

    def processEvents(self, *args, **kwargs):
        """
        """
        ...

    def registerSocketNotifier(self, *args, **kwargs):
        """
        """
        ...

    def registerTimer(self, *args, **kwargs):
        """
        """
        ...

    def registeredTimers(self, *args, **kwargs):
        """
        """
        ...

    def startingUp(self, *args, **kwargs):
        """
        """
        ...

    def unregisterSocketNotifier(self, *args, **kwargs):
        """
        """
        ...

    def unregisterTimer(self, *args, **kwargs):
        """
        """
        ...

    def unregisterTimers(self, *args, **kwargs):
        """
        """
        ...

    def wakeUp(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractFileEngine(Shiboken.Object):
    AbsoluteName: ... = PySide.QtCore.QAbstractFileEngine.FileName.AbsoluteName
    """
    """

    AbsolutePathName: ...
    """
    """

    AccessTime: ... = PySide.QtCore.QAbstractFileEngine.FileTime.AccessTime
    """
    """

    AtEndExtension: ...
    """
    """

    BaseName: ... = PySide.QtCore.QAbstractFileEngine.FileName.BaseName
    """
    """

    BundleName: ... = PySide.QtCore.QAbstractFileEngine.FileName.BundleName
    """
    """

    BundleType: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.BundleType
    """
    """

    CanonicalName: ...
    """
    """

    CanonicalPathName: ...
    """
    """

    CreationTime: ... = PySide.QtCore.QAbstractFileEngine.FileTime.CreationTime
    """
    """

    DefaultName: ... = PySide.QtCore.QAbstractFileEngine.FileName.DefaultName
    """
    """

    DirectoryType: ...
    """
    """

    ExeGroupPerm: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.ExeGroupPerm
    """
    """

    ExeOtherPerm: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.ExeOtherPerm
    """
    """

    ExeOwnerPerm: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.ExeOwnerPerm
    """
    """

    ExeUserPerm: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.ExeUserPerm
    """
    """

    ExistsFlag: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.ExistsFlag
    """
    """

    Extension: ...
    """
    """

    FastReadLineExtension: ...
    """
    """

    FileFlag: ...
    """
    """

    FileFlags: ...
    """
    """

    FileInfoAll: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.FileInfoAll
    """
    """

    FileName: ...
    """
    """

    FileOwner: ...
    """
    """

    FileTime: ...
    """
    """

    FileType: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.FileType
    """
    """

    FlagsMask: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.FlagsMask
    """
    """

    HiddenFlag: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.HiddenFlag
    """
    """

    LinkName: ... = PySide.QtCore.QAbstractFileEngine.FileName.LinkName
    """
    """

    LinkType: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.LinkType
    """
    """

    LocalDiskFlag: ...
    """
    """

    MapExtension: ...
    """
    """

    ModificationTime: ...
    """
    """

    NFileNames: ... = PySide.QtCore.QAbstractFileEngine.FileName.NFileNames
    """
    """

    OwnerGroup: ... = PySide.QtCore.QAbstractFileEngine.FileOwner.OwnerGroup
    """
    """

    OwnerUser: ... = PySide.QtCore.QAbstractFileEngine.FileOwner.OwnerUser
    """
    """

    PathName: ... = PySide.QtCore.QAbstractFileEngine.FileName.PathName
    """
    """

    PermsMask: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.PermsMask
    """
    """

    ReadGroupPerm: ...
    """
    """

    ReadOtherPerm: ...
    """
    """

    ReadOwnerPerm: ...
    """
    """

    ReadUserPerm: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.ReadUserPerm
    """
    """

    Refresh: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.Refresh
    """
    """

    RootFlag: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.RootFlag
    """
    """

    TypesMask: ... = PySide.QtCore.QAbstractFileEngine.FileFlag.TypesMask
    """
    """

    UnMapExtension: ...
    """
    """

    WriteGroupPerm: ...
    """
    """

    WriteOtherPerm: ...
    """
    """

    WriteOwnerPerm: ...
    """
    """

    WriteUserPerm: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def create(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def beginEntryList(self, *args, **kwargs):
        """
        """
        ...

    def caseSensitive(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def copy(self, *args, **kwargs):
        """
        """
        ...

    def entryList(self, *args, **kwargs):
        """
        """
        ...

    def error(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def fileFlags(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def fileTime(self, *args, **kwargs):
        """
        """
        ...

    def flush(self, *args, **kwargs):
        """
        """
        ...

    def handle(self, *args, **kwargs):
        """
        """
        ...

    def isRelativePath(self, *args, **kwargs):
        """
        """
        ...

    def isSequential(self, *args, **kwargs):
        """
        """
        ...

    def link(self, *args, **kwargs):
        """
        """
        ...

    def map(self, *args, **kwargs):
        """
        """
        ...

    def mkdir(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def owner(self, *args, **kwargs):
        """
        """
        ...

    def ownerId(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def readLine(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def rename(self, *args, **kwargs):
        """
        """
        ...

    def rmdir(self, *args, **kwargs):
        """
        """
        ...

    def seek(self, *args, **kwargs):
        """
        """
        ...

    def setError(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def setPermissions(self, *args, **kwargs):
        """
        """
        ...

    def setSize(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def supportsExtension(self, *args, **kwargs):
        """
        """
        ...

    def unmap(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractFileEngineHandler(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def create(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractFileEngineIterator(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def currentFileInfo(self, *args, **kwargs):
        """
        """
        ...

    def currentFileName(self, *args, **kwargs):
        """
        """
        ...

    def currentFilePath(self, *args, **kwargs):
        """
        """
        ...

    def filters(self, *args, **kwargs):
        """
        """
        ...

    def hasNext(self, *args, **kwargs):
        """
        """
        ...

    def nameFilters(self, *args, **kwargs):
        """
        """
        ...

    def next(self, *args, **kwargs):
        """
        """
        ...

    def path(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractItemModel(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    columnsAboutToBeInserted: ...
    """
    Signal
    """

    columnsAboutToBeMoved: ...
    """
    Signal
    """

    columnsAboutToBeRemoved: ...
    """
    Signal
    """

    columnsInserted: ...
    """
    Signal
    """

    columnsMoved: ...
    """
    Signal
    """

    columnsRemoved: ...
    """
    Signal
    """

    dataChanged: ...
    """
    Signal
    """

    headerDataChanged: ...
    """
    Signal
    """

    layoutAboutToBeChanged: ...
    """
    Signal
    """

    layoutChanged: ...
    """
    Signal
    """

    modelAboutToBeReset: ...
    """
    Signal
    """

    modelReset: ...
    """
    Signal
    """

    rowsAboutToBeInserted: ...
    """
    Signal
    """

    rowsAboutToBeMoved: ...
    """
    Signal
    """

    rowsAboutToBeRemoved: ...
    """
    Signal
    """

    rowsInserted: ...
    """
    Signal
    """

    rowsMoved: ...
    """
    Signal
    """

    rowsRemoved: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def beginInsertColumns(self, *args, **kwargs):
        """
        """
        ...

    def beginInsertRows(self, *args, **kwargs):
        """
        """
        ...

    def beginMoveColumns(self, *args, **kwargs):
        """
        """
        ...

    def beginMoveRows(self, *args, **kwargs):
        """
        """
        ...

    def beginRemoveColumns(self, *args, **kwargs):
        """
        """
        ...

    def beginRemoveRows(self, *args, **kwargs):
        """
        """
        ...

    def beginResetModel(self, *args, **kwargs):
        """
        """
        ...

    def buddy(self, *args, **kwargs):
        """
        """
        ...

    def canFetchMore(self, *args, **kwargs):
        """
        """
        ...

    def changePersistentIndex(self, *args, **kwargs):
        """
        """
        ...

    def changePersistentIndexList(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def createIndex(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def decodeData(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def encodeData(self, *args, **kwargs):
        """
        """
        ...

    def endInsertColumns(self, *args, **kwargs):
        """
        """
        ...

    def endInsertRows(self, *args, **kwargs):
        """
        """
        ...

    def endMoveColumns(self, *args, **kwargs):
        """
        """
        ...

    def endMoveRows(self, *args, **kwargs):
        """
        """
        ...

    def endRemoveColumns(self, *args, **kwargs):
        """
        """
        ...

    def endRemoveRows(self, *args, **kwargs):
        """
        """
        ...

    def endResetModel(self, *args, **kwargs):
        """
        """
        ...

    def fetchMore(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def hasIndex(self, *args, **kwargs):
        """
        """
        ...

    def headerData(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def insertColumn(self, *args, **kwargs):
        """
        """
        ...

    def insertColumns(self, *args, **kwargs):
        """
        """
        ...

    def insertRow(self, *args, **kwargs):
        """
        """
        ...

    def insertRows(self, *args, **kwargs):
        """
        """
        ...

    def itemData(self, *args, **kwargs):
        """
        """
        ...

    def match(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def persistentIndexList(self, *args, **kwargs):
        """
        """
        ...

    def removeColumn(self, *args, **kwargs):
        """
        """
        ...

    def removeColumns(self, *args, **kwargs):
        """
        """
        ...

    def removeRow(self, *args, **kwargs):
        """
        """
        ...

    def removeRows(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def resetInternalData(self, *args, **kwargs):
        """
        """
        ...

    def revert(self, *args, **kwargs):
        """
        """
        ...

    def roleNames(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderData(self, *args, **kwargs):
        """
        """
        ...

    def setItemData(self, *args, **kwargs):
        """
        """
        ...

    def setRoleNames(self, *args, **kwargs):
        """
        """
        ...

    def setSupportedDragActions(self, *args, **kwargs):
        """
        """
        ...

    def sibling(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def span(self, *args, **kwargs):
        """
        """
        ...

    def submit(self, *args, **kwargs):
        """
        """
        ...

    def supportedDragActions(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractListModel(QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractState(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    entered: ...
    """
    Signal
    """

    exited: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def machine(self, *args, **kwargs):
        """
        """
        ...

    def onEntry(self, *args, **kwargs):
        """
        """
        ...

    def onExit(self, *args, **kwargs):
        """
        """
        ...

    def parentState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractTableModel(QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractTransition(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    triggered: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addAnimation(self, *args, **kwargs):
        """
        """
        ...

    def animations(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventTest(self, *args, **kwargs):
        """
        """
        ...

    def machine(self, *args, **kwargs):
        """
        """
        ...

    def onTransition(self, *args, **kwargs):
        """
        """
        ...

    def removeAnimation(self, *args, **kwargs):
        """
        """
        ...

    def setTargetState(self, *args, **kwargs):
        """
        """
        ...

    def setTargetStates(self, *args, **kwargs):
        """
        """
        ...

    def sourceState(self, *args, **kwargs):
        """
        """
        ...

    def targetState(self, *args, **kwargs):
        """
        """
        ...

    def targetStates(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAnimationGroup(QAbstractAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addAnimation(self, *args, **kwargs):
        """
        """
        ...

    def animationAt(self, *args, **kwargs):
        """
        """
        ...

    def animationCount(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def indexOfAnimation(self, *args, **kwargs):
        """
        """
        ...

    def insertAnimation(self, *args, **kwargs):
        """
        """
        ...

    def removeAnimation(self, *args, **kwargs):
        """
        """
        ...

    def takeAnimation(self, *args, **kwargs):
        """
        """
        ...

    ...

class QBasicTimer(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def isActive(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def stop(self, *args, **kwargs):
        """
        """
        ...

    def timerId(self, *args, **kwargs):
        """
        """
        ...

    ...

class QBitArray(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __iand__(self, *args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __invert__(self, *args, **kwargs):
        """
        x.__invert__() <==> ~x
        """
        ...

    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...

    def __ixor__(self, *args, **kwargs):
        """
        x.__ixor__(y) <==> x^=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...

    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...

    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...

    def at(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def clearBit(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def setBit(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def testBit(self, *args, **kwargs):
        """
        """
        ...

    def toggleBit(self, *args, **kwargs):
        """
        """
        ...

    def truncate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QBuffer(QIODevice):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def buffer(self, *args, **kwargs):
        """
        """
        ...

    def canReadLine(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def connectNotify(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def disconnectNotify(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def readData(self, *args, **kwargs):
        """
        """
        ...

    def seek(self, *args, **kwargs):
        """
        """
        ...

    def setBuffer(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def writeData(self, *args, **kwargs):
        """
        """
        ...

    ...

class QByteArray(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromBase64(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromHex(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromPercentEncoding(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromRawData(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def number(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __getslice__(self, *args, **kwargs):
        """
        x.__getslice__(i, j) <==> x[i:j]
        Use of negative indices is not supported.
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...

    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...

    def append(self, *args, **kwargs):
        """
        """
        ...

    def at(self, *args, **kwargs):
        """
        """
        ...

    def capacity(self, *args, **kwargs):
        """
        """
        ...

    def chop(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def endsWith(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def insert(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def isSharedWith(self, *args, **kwargs):
        """
        """
        ...

    def lastIndexOf(self, *args, **kwargs):
        """
        """
        ...

    def left(self, *args, **kwargs):
        """
        """
        ...

    def leftJustified(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def mid(self, *args, **kwargs):
        """
        """
        ...

    def prepend(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def repeated(self, *args, **kwargs):
        """
        """
        ...

    def replace(self, *args, **kwargs):
        """
        """
        ...

    def reserve(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def right(self, *args, **kwargs):
        """
        """
        ...

    def rightJustified(self, *args, **kwargs):
        """
        """
        ...

    def setNum(self, *args, **kwargs):
        """
        """
        ...

    def setRawData(self, *args, **kwargs):
        """
        """
        ...

    def simplified(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def split(self, *args, **kwargs):
        """
        """
        ...

    def squeeze(self, *args, **kwargs):
        """
        """
        ...

    def startsWith(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def toBase64(self, *args, **kwargs):
        """
        """
        ...

    def toDouble(self, *args, **kwargs):
        """
        """
        ...

    def toFloat(self, *args, **kwargs):
        """
        """
        ...

    def toHex(self, *args, **kwargs):
        """
        """
        ...

    def toInt(self, *args, **kwargs):
        """
        """
        ...

    def toLong(self, *args, **kwargs):
        """
        """
        ...

    def toLongLong(self, *args, **kwargs):
        """
        """
        ...

    def toLower(self, *args, **kwargs):
        """
        """
        ...

    def toPercentEncoding(self, *args, **kwargs):
        """
        """
        ...

    def toShort(self, *args, **kwargs):
        """
        """
        ...

    def toUInt(self, *args, **kwargs):
        """
        """
        ...

    def toULong(self, *args, **kwargs):
        """
        """
        ...

    def toULongLong(self, *args, **kwargs):
        """
        """
        ...

    def toUShort(self, *args, **kwargs):
        """
        """
        ...

    def toUpper(self, *args, **kwargs):
        """
        """
        ...

    def trimmed(self, *args, **kwargs):
        """
        """
        ...

    def truncate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QByteArrayMatcher(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def indexIn(self, *args, **kwargs):
        """
        """
        ...

    def pattern(self, *args, **kwargs):
        """
        """
        ...

    def setPattern(self, *args, **kwargs):
        """
        """
        ...

    ...

class QChildEvent(QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def added(self, *args, **kwargs):
        """
        """
        ...

    def child(self, *args, **kwargs):
        """
        """
        ...

    def polished(self, *args, **kwargs):
        """
        """
        ...

    def removed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCoreApplication(QObject):
    ApplicationFlags: ... = 17041413
    """
    """

    CodecForTr: ... = PySide.QtCore.QCoreApplication.Encoding.CodecForTr
    """
    """

    DefaultCodec: ... = PySide.QtCore.QCoreApplication.Encoding.DefaultCodec
    """
    """

    Encoding: ...
    """
    """

    UnicodeUTF8: ... = PySide.QtCore.QCoreApplication.Encoding.UnicodeUTF8
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToQuit: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    unixSignal: ...
    """
    Signal
    """

    @staticmethod
    def addLibraryPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def applicationDirPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def applicationFilePath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def applicationName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def applicationPid(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def applicationVersion(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def arguments(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def closingDown(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def exec_(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def exit(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def flush(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def hasPendingEvents(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def installTranslator(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def instance(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def libraryPaths(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def organizationDomain(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def organizationName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def postEvent(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def processEvents(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def quit(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def removeLibraryPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def removePostedEvents(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def removeTranslator(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def sendEvent(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def sendPostedEvents(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setApplicationName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setApplicationVersion(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setAttribute(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setLibraryPaths(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setOrganizationDomain(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setOrganizationName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def startingUp(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def testAttribute(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def translate(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def notify(self, *args, **kwargs):
        """
        """
        ...

    def winEventFilter(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCryptographicHash(Shiboken.Object):
    Algorithm: ...
    """
    """

    Md4: ... = PySide.QtCore.QCryptographicHash.Algorithm.Md4
    """
    """

    Md5: ... = PySide.QtCore.QCryptographicHash.Algorithm.Md5
    """
    """

    Sha1: ... = PySide.QtCore.QCryptographicHash.Algorithm.Sha1
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def hash(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addData(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def result(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDataStream(Shiboken.Object):
    BigEndian: ... = PySide.QtCore.QDataStream.ByteOrder.BigEndian
    """
    """

    ByteOrder: ...
    """
    """

    DoublePrecision: ...
    """
    """

    FloatingPointPrecision: ...
    """
    """

    LittleEndian: ... = PySide.QtCore.QDataStream.ByteOrder.LittleEndian
    """
    """

    Ok: ... = PySide.QtCore.QDataStream.Status.Ok
    """
    """

    Qt_1_0: ... = PySide.QtCore.QDataStream.Version.Qt_1_0
    """
    """

    Qt_2_0: ... = PySide.QtCore.QDataStream.Version.Qt_2_0
    """
    """

    Qt_2_1: ... = PySide.QtCore.QDataStream.Version.Qt_2_1
    """
    """

    Qt_3_0: ... = PySide.QtCore.QDataStream.Version.Qt_3_0
    """
    """

    Qt_3_1: ... = PySide.QtCore.QDataStream.Version.Qt_3_1
    """
    """

    Qt_3_3: ... = PySide.QtCore.QDataStream.Version.Qt_3_3
    """
    """

    Qt_4_0: ... = PySide.QtCore.QDataStream.Version.Qt_4_0
    """
    """

    Qt_4_1: ... = PySide.QtCore.QDataStream.Version.Qt_4_1
    """
    """

    Qt_4_2: ... = PySide.QtCore.QDataStream.Version.Qt_4_2
    """
    """

    Qt_4_3: ... = PySide.QtCore.QDataStream.Version.Qt_4_3
    """
    """

    Qt_4_4: ... = PySide.QtCore.QDataStream.Version.Qt_4_4
    """
    """

    Qt_4_5: ... = PySide.QtCore.QDataStream.Version.Qt_4_5
    """
    """

    Qt_4_6: ... = PySide.QtCore.QDataStream.Version.Qt_4_6
    """
    """

    Qt_4_7: ... = PySide.QtCore.QDataStream.Version.Qt_4_7
    """
    """

    Qt_4_8: ... = PySide.QtCore.QDataStream.Version.Qt_4_8
    """
    """

    ReadCorruptData: ... = PySide.QtCore.QDataStream.Status.ReadCorruptData
    """
    """

    ReadPastEnd: ... = PySide.QtCore.QDataStream.Status.ReadPastEnd
    """
    """

    SinglePrecision: ...
    """
    """

    Status: ...
    """
    """

    Version: ...
    """
    """

    WriteFailed: ... = PySide.QtCore.QDataStream.Status.WriteFailed
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def byteOrder(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def floatingPointPrecision(self, *args, **kwargs):
        """
        """
        ...

    def readBool(self, *args, **kwargs):
        """
        """
        ...

    def readDouble(self, *args, **kwargs):
        """
        """
        ...

    def readFloat(self, *args, **kwargs):
        """
        """
        ...

    def readInt16(self, *args, **kwargs):
        """
        """
        ...

    def readInt32(self, *args, **kwargs):
        """
        """
        ...

    def readInt64(self, *args, **kwargs):
        """
        """
        ...

    def readInt8(self, *args, **kwargs):
        """
        """
        ...

    def readQChar(self, *args, **kwargs):
        """
        """
        ...

    def readQString(self, *args, **kwargs):
        """
        """
        ...

    def readQStringList(self, *args, **kwargs):
        """
        """
        ...

    def readQVariant(self, *args, **kwargs):
        """
        """
        ...

    def readRawData(self, *args, **kwargs):
        """
        """
        ...

    def readString(self, *args, **kwargs):
        """
        """
        ...

    def readUInt16(self, *args, **kwargs):
        """
        """
        ...

    def readUInt32(self, *args, **kwargs):
        """
        """
        ...

    def readUInt64(self, *args, **kwargs):
        """
        """
        ...

    def readUInt8(self, *args, **kwargs):
        """
        """
        ...

    def resetStatus(self, *args, **kwargs):
        """
        """
        ...

    def setByteOrder(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def setFloatingPointPrecision(self, *args, **kwargs):
        """
        """
        ...

    def setStatus(self, *args, **kwargs):
        """
        """
        ...

    def setVersion(self, *args, **kwargs):
        """
        """
        ...

    def skipRawData(self, *args, **kwargs):
        """
        """
        ...

    def status(self, *args, **kwargs):
        """
        """
        ...

    def unsetDevice(self, *args, **kwargs):
        """
        """
        ...

    def version(self, *args, **kwargs):
        """
        """
        ...

    def writeBool(self, *args, **kwargs):
        """
        """
        ...

    def writeDouble(self, *args, **kwargs):
        """
        """
        ...

    def writeFloat(self, *args, **kwargs):
        """
        """
        ...

    def writeInt16(self, *args, **kwargs):
        """
        """
        ...

    def writeInt32(self, *args, **kwargs):
        """
        """
        ...

    def writeInt64(self, *args, **kwargs):
        """
        """
        ...

    def writeInt8(self, *args, **kwargs):
        """
        """
        ...

    def writeQChar(self, *args, **kwargs):
        """
        """
        ...

    def writeQString(self, *args, **kwargs):
        """
        """
        ...

    def writeQStringList(self, *args, **kwargs):
        """
        """
        ...

    def writeQVariant(self, *args, **kwargs):
        """
        """
        ...

    def writeRawData(self, *args, **kwargs):
        """
        """
        ...

    def writeString(self, *args, **kwargs):
        """
        """
        ...

    def writeUInt16(self, *args, **kwargs):
        """
        """
        ...

    def writeUInt32(self, *args, **kwargs):
        """
        """
        ...

    def writeUInt64(self, *args, **kwargs):
        """
        """
        ...

    def writeUInt8(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDate(Shiboken.Object):
    DateFormat: ... = PySide.QtCore.QDate.MonthNameType.DateFormat
    """
    """

    MonthNameType: ...
    """
    """

    StandaloneFormat: ... = PySide.QtCore.QDate.MonthNameType.StandaloneFormat
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def currentDate(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromJulianDay(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def gregorianToJulian(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isLeapYear(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isValid(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def longDayName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def longMonthName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def shortDayName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def shortMonthName(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def addDays(self, *args, **kwargs):
        """
        """
        ...

    def addMonths(self, *args, **kwargs):
        """
        """
        ...

    def addYears(self, *args, **kwargs):
        """
        """
        ...

    def day(self, *args, **kwargs):
        """
        """
        ...

    def dayOfWeek(self, *args, **kwargs):
        """
        """
        ...

    def dayOfYear(self, *args, **kwargs):
        """
        """
        ...

    def daysInMonth(self, *args, **kwargs):
        """
        """
        ...

    def daysInYear(self, *args, **kwargs):
        """
        """
        ...

    def daysTo(self, *args, **kwargs):
        """
        """
        ...

    def getDate(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def month(self, *args, **kwargs):
        """
        """
        ...

    def setDate(self, *args, **kwargs):
        """
        """
        ...

    def setYMD(self, *args, **kwargs):
        """
        """
        ...

    def toJulianDay(self, *args, **kwargs):
        """
        """
        ...

    def toPython(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    def weekNumber(self, *args, **kwargs):
        """
        """
        ...

    def year(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDateTime(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def currentDateTime(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def currentDateTimeUtc(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def currentMSecsSinceEpoch(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromMSecsSinceEpoch(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromTime_t(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def addDays(self, *args, **kwargs):
        """
        """
        ...

    def addMSecs(self, *args, **kwargs):
        """
        """
        ...

    def addMonths(self, *args, **kwargs):
        """
        """
        ...

    def addSecs(self, *args, **kwargs):
        """
        """
        ...

    def addYears(self, *args, **kwargs):
        """
        """
        ...

    def date(self, *args, **kwargs):
        """
        """
        ...

    def daysTo(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def msecsTo(self, *args, **kwargs):
        """
        """
        ...

    def secsTo(self, *args, **kwargs):
        """
        """
        ...

    def setDate(self, *args, **kwargs):
        """
        """
        ...

    def setMSecsSinceEpoch(self, *args, **kwargs):
        """
        """
        ...

    def setTime(self, *args, **kwargs):
        """
        """
        ...

    def setTimeSpec(self, *args, **kwargs):
        """
        """
        ...

    def setTime_t(self, *args, **kwargs):
        """
        """
        ...

    def setUtcOffset(self, *args, **kwargs):
        """
        """
        ...

    def time(self, *args, **kwargs):
        """
        """
        ...

    def timeSpec(self, *args, **kwargs):
        """
        """
        ...

    def toLocalTime(self, *args, **kwargs):
        """
        """
        ...

    def toMSecsSinceEpoch(self, *args, **kwargs):
        """
        """
        ...

    def toPython(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    def toTimeSpec(self, *args, **kwargs):
        """
        """
        ...

    def toTime_t(self, *args, **kwargs):
        """
        """
        ...

    def toUTC(self, *args, **kwargs):
        """
        """
        ...

    def utcOffset(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDir(Shiboken.Object):
    AccessMask: ... = PySide.QtCore.QDir.Filter.AccessMask
    """
    """

    AllDirs: ... = PySide.QtCore.QDir.Filter.AllDirs
    """
    """

    AllEntries: ... = PySide.QtCore.QDir.Filter.AllEntries
    """
    """

    CaseSensitive: ... = PySide.QtCore.QDir.Filter.CaseSensitive
    """
    """

    Dirs: ... = PySide.QtCore.QDir.Filter.Dirs
    """
    """

    DirsFirst: ... = PySide.QtCore.QDir.SortFlag.DirsFirst
    """
    """

    DirsLast: ... = PySide.QtCore.QDir.SortFlag.DirsLast
    """
    """

    Drives: ... = PySide.QtCore.QDir.Filter.Drives
    """
    """

    Executable: ... = PySide.QtCore.QDir.Filter.Executable
    """
    """

    Files: ... = PySide.QtCore.QDir.Filter.Files
    """
    """

    Filter: ...
    """
    """

    Filters: ...
    """
    """

    Hidden: ... = PySide.QtCore.QDir.Filter.Hidden
    """
    """

    IgnoreCase: ... = PySide.QtCore.QDir.SortFlag.IgnoreCase
    """
    """

    LocaleAware: ... = PySide.QtCore.QDir.SortFlag.LocaleAware
    """
    """

    Modified: ... = PySide.QtCore.QDir.Filter.Modified
    """
    """

    Name: ... = PySide.QtCore.QDir.SortFlag.Name
    """
    """

    NoDot: ... = PySide.QtCore.QDir.Filter.NoDot
    """
    """

    NoDotAndDotDot: ... = PySide.QtCore.QDir.Filter.NoDotAndDotDot
    """
    """

    NoDotDot: ... = PySide.QtCore.QDir.Filter.NoDotDot
    """
    """

    NoFilter: ... = PySide.QtCore.QDir.Filter.NoFilter
    """
    """

    NoSort: ... = PySide.QtCore.QDir.SortFlag.NoSort
    """
    """

    NoSymLinks: ... = PySide.QtCore.QDir.Filter.NoSymLinks
    """
    """

    PermissionMask: ... = PySide.QtCore.QDir.Filter.PermissionMask
    """
    """

    Readable: ... = PySide.QtCore.QDir.Filter.Readable
    """
    """

    Reversed: ... = PySide.QtCore.QDir.SortFlag.Reversed
    """
    """

    Size: ... = PySide.QtCore.QDir.SortFlag.Size
    """
    """

    SortByMask: ... = PySide.QtCore.QDir.SortFlag.SortByMask
    """
    """

    SortFlag: ...
    """
    """

    SortFlags: ...
    """
    """

    System: ... = PySide.QtCore.QDir.Filter.System
    """
    """

    Time: ... = PySide.QtCore.QDir.SortFlag.Time
    """
    """

    Type: ... = PySide.QtCore.QDir.SortFlag.Type
    """
    """

    TypeMask: ... = PySide.QtCore.QDir.Filter.TypeMask
    """
    """

    Unsorted: ... = PySide.QtCore.QDir.SortFlag.Unsorted
    """
    """

    Writable: ... = PySide.QtCore.QDir.Filter.Writable
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def addResourceSearchPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def addSearchPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def cleanPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def convertSeparators(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def current(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def currentPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def drives(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromNativeSeparators(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def home(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def homePath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isAbsolutePath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isRelativePath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def match(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def nameFiltersFromString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def root(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def rootPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def searchPaths(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def separator(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCurrent(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setSearchPaths(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def temp(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def tempPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def toNativeSeparators(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def absoluteFilePath(self, *args, **kwargs):
        """
        """
        ...

    def absolutePath(self, *args, **kwargs):
        """
        """
        ...

    def canonicalPath(self, *args, **kwargs):
        """
        """
        ...

    def cd(self, *args, **kwargs):
        """
        """
        ...

    def cdUp(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def dirName(self, *args, **kwargs):
        """
        """
        ...

    def entryInfoList(self, *args, **kwargs):
        """
        """
        ...

    def entryList(self, *args, **kwargs):
        """
        """
        ...

    def exists(self, *args, **kwargs):
        """
        """
        ...

    def filePath(self, *args, **kwargs):
        """
        """
        ...

    def filter(self, *args, **kwargs):
        """
        """
        ...

    def isAbsolute(self, *args, **kwargs):
        """
        """
        ...

    def isReadable(self, *args, **kwargs):
        """
        """
        ...

    def isRelative(self, *args, **kwargs):
        """
        """
        ...

    def isRoot(self, *args, **kwargs):
        """
        """
        ...

    def makeAbsolute(self, *args, **kwargs):
        """
        """
        ...

    def mkdir(self, *args, **kwargs):
        """
        """
        ...

    def mkpath(self, *args, **kwargs):
        """
        """
        ...

    def nameFilters(self, *args, **kwargs):
        """
        """
        ...

    def path(self, *args, **kwargs):
        """
        """
        ...

    def refresh(self, *args, **kwargs):
        """
        """
        ...

    def relativeFilePath(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def rename(self, *args, **kwargs):
        """
        """
        ...

    def rmdir(self, *args, **kwargs):
        """
        """
        ...

    def rmpath(self, *args, **kwargs):
        """
        """
        ...

    def setFilter(self, *args, **kwargs):
        """
        """
        ...

    def setNameFilters(self, *args, **kwargs):
        """
        """
        ...

    def setPath(self, *args, **kwargs):
        """
        """
        ...

    def setSorting(self, *args, **kwargs):
        """
        """
        ...

    def sorting(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDirIterator(Shiboken.Object):
    FollowSymlinks: ...
    """
    """

    IteratorFlag: ...
    """
    """

    IteratorFlags: ...
    """
    """

    NoIteratorFlags: ...
    """
    """

    Subdirectories: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def fileInfo(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def filePath(self, *args, **kwargs):
        """
        """
        ...

    def hasNext(self, *args, **kwargs):
        """
        """
        ...

    def next(self, *args, **kwargs):
        """
        """
        ...

    def path(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDynamicPropertyChangeEvent(QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def propertyName(self, *args, **kwargs):
        """
        """
        ...

    ...

class QEasingCurve(Shiboken.Object):
    CosineCurve: ... = PySide.QtCore.QEasingCurve.Type.CosineCurve
    """
    """

    Custom: ... = PySide.QtCore.QEasingCurve.Type.Custom
    """
    """

    InBack: ... = PySide.QtCore.QEasingCurve.Type.InBack
    """
    """

    InBounce: ... = PySide.QtCore.QEasingCurve.Type.InBounce
    """
    """

    InCirc: ... = PySide.QtCore.QEasingCurve.Type.InCirc
    """
    """

    InCubic: ... = PySide.QtCore.QEasingCurve.Type.InCubic
    """
    """

    InCurve: ... = PySide.QtCore.QEasingCurve.Type.InCurve
    """
    """

    InElastic: ... = PySide.QtCore.QEasingCurve.Type.InElastic
    """
    """

    InExpo: ... = PySide.QtCore.QEasingCurve.Type.InExpo
    """
    """

    InOutBack: ... = PySide.QtCore.QEasingCurve.Type.InOutBack
    """
    """

    InOutBounce: ... = PySide.QtCore.QEasingCurve.Type.InOutBounce
    """
    """

    InOutCirc: ... = PySide.QtCore.QEasingCurve.Type.InOutCirc
    """
    """

    InOutCubic: ... = PySide.QtCore.QEasingCurve.Type.InOutCubic
    """
    """

    InOutElastic: ... = PySide.QtCore.QEasingCurve.Type.InOutElastic
    """
    """

    InOutExpo: ... = PySide.QtCore.QEasingCurve.Type.InOutExpo
    """
    """

    InOutQuad: ... = PySide.QtCore.QEasingCurve.Type.InOutQuad
    """
    """

    InOutQuart: ... = PySide.QtCore.QEasingCurve.Type.InOutQuart
    """
    """

    InOutQuint: ... = PySide.QtCore.QEasingCurve.Type.InOutQuint
    """
    """

    InOutSine: ... = PySide.QtCore.QEasingCurve.Type.InOutSine
    """
    """

    InQuad: ... = PySide.QtCore.QEasingCurve.Type.InQuad
    """
    """

    InQuart: ... = PySide.QtCore.QEasingCurve.Type.InQuart
    """
    """

    InQuint: ... = PySide.QtCore.QEasingCurve.Type.InQuint
    """
    """

    InSine: ... = PySide.QtCore.QEasingCurve.Type.InSine
    """
    """

    Linear: ... = PySide.QtCore.QEasingCurve.Type.Linear
    """
    """

    NCurveTypes: ... = PySide.QtCore.QEasingCurve.Type.NCurveTypes
    """
    """

    OutBack: ... = PySide.QtCore.QEasingCurve.Type.OutBack
    """
    """

    OutBounce: ... = PySide.QtCore.QEasingCurve.Type.OutBounce
    """
    """

    OutCirc: ... = PySide.QtCore.QEasingCurve.Type.OutCirc
    """
    """

    OutCubic: ... = PySide.QtCore.QEasingCurve.Type.OutCubic
    """
    """

    OutCurve: ... = PySide.QtCore.QEasingCurve.Type.OutCurve
    """
    """

    OutElastic: ... = PySide.QtCore.QEasingCurve.Type.OutElastic
    """
    """

    OutExpo: ... = PySide.QtCore.QEasingCurve.Type.OutExpo
    """
    """

    OutInBack: ... = PySide.QtCore.QEasingCurve.Type.OutInBack
    """
    """

    OutInBounce: ... = PySide.QtCore.QEasingCurve.Type.OutInBounce
    """
    """

    OutInCirc: ... = PySide.QtCore.QEasingCurve.Type.OutInCirc
    """
    """

    OutInCubic: ... = PySide.QtCore.QEasingCurve.Type.OutInCubic
    """
    """

    OutInElastic: ... = PySide.QtCore.QEasingCurve.Type.OutInElastic
    """
    """

    OutInExpo: ... = PySide.QtCore.QEasingCurve.Type.OutInExpo
    """
    """

    OutInQuad: ... = PySide.QtCore.QEasingCurve.Type.OutInQuad
    """
    """

    OutInQuart: ... = PySide.QtCore.QEasingCurve.Type.OutInQuart
    """
    """

    OutInQuint: ... = PySide.QtCore.QEasingCurve.Type.OutInQuint
    """
    """

    OutInSine: ... = PySide.QtCore.QEasingCurve.Type.OutInSine
    """
    """

    OutQuad: ... = PySide.QtCore.QEasingCurve.Type.OutQuad
    """
    """

    OutQuart: ... = PySide.QtCore.QEasingCurve.Type.OutQuart
    """
    """

    OutQuint: ... = PySide.QtCore.QEasingCurve.Type.OutQuint
    """
    """

    OutSine: ... = PySide.QtCore.QEasingCurve.Type.OutSine
    """
    """

    SineCurve: ... = PySide.QtCore.QEasingCurve.Type.SineCurve
    """
    """

    Type: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def amplitude(self, *args, **kwargs):
        """
        """
        ...

    def customType(self, *args, **kwargs):
        """
        """
        ...

    def overshoot(self, *args, **kwargs):
        """
        """
        ...

    def period(self, *args, **kwargs):
        """
        """
        ...

    def setAmplitude(self, *args, **kwargs):
        """
        """
        ...

    def setCustomType(self, *args, **kwargs):
        """
        """
        ...

    def setOvershoot(self, *args, **kwargs):
        """
        """
        ...

    def setPeriod(self, *args, **kwargs):
        """
        """
        ...

    def setType(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def valueForProgress(self, *args, **kwargs):
        """
        """
        ...

    ...

class QElapsedTimer(Shiboken.Object):
    ClockType: ...
    """
    """

    MachAbsoluteTime: ...
    """
    """

    MonotonicClock: ... = PySide.QtCore.QElapsedTimer.ClockType.MonotonicClock
    """
    """

    PerformanceCounter: ...
    """
    """

    SystemTime: ... = PySide.QtCore.QElapsedTimer.ClockType.SystemTime
    """
    """

    TickCounter: ... = PySide.QtCore.QElapsedTimer.ClockType.TickCounter
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def clockType(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isMonotonic(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def elapsed(self, *args, **kwargs):
        """
        """
        ...

    def hasExpired(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def msecsSinceReference(self, *args, **kwargs):
        """
        """
        ...

    def msecsTo(self, *args, **kwargs):
        """
        """
        ...

    def nsecsElapsed(self, *args, **kwargs):
        """
        """
        ...

    def restart(self, *args, **kwargs):
        """
        """
        ...

    def secsTo(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    ...

class QEvent(Shiboken.Object):
    AcceptDropsChange: ... = PySide.QtCore.QEvent.Type.AcceptDropsChange
    """
    """

    AccessibilityDescription: ...
    """
    """

    AccessibilityHelp: ... = PySide.QtCore.QEvent.Type.AccessibilityHelp
    """
    """

    AccessibilityPrepare: ... = PySide.QtCore.QEvent.Type.AccessibilityPrepare
    """
    """

    ActionAdded: ... = PySide.QtCore.QEvent.Type.ActionAdded
    """
    """

    ActionChanged: ... = PySide.QtCore.QEvent.Type.ActionChanged
    """
    """

    ActionRemoved: ... = PySide.QtCore.QEvent.Type.ActionRemoved
    """
    """

    ActivateControl: ... = PySide.QtCore.QEvent.Type.ActivateControl
    """
    """

    ActivationChange: ... = PySide.QtCore.QEvent.Type.ActivationChange
    """
    """

    ApplicationActivate: ... = PySide.QtCore.QEvent.Type.ApplicationActivate
    """
    """

    ApplicationActivated: ... = PySide.QtCore.QEvent.Type.ApplicationActivated
    """
    """

    ApplicationDeactivate: ...
    """
    """

    ApplicationDeactivated: ...
    """
    """

    ApplicationFontChange: ...
    """
    """

    ApplicationLayoutDirectionChange: ...
    """
    """

    ApplicationPaletteChange: ...
    """
    """

    ApplicationWindowIconChange: ...
    """
    """

    ChildAdded: ... = PySide.QtCore.QEvent.Type.ChildAdded
    """
    """

    ChildPolished: ... = PySide.QtCore.QEvent.Type.ChildPolished
    """
    """

    ChildRemoved: ... = PySide.QtCore.QEvent.Type.ChildRemoved
    """
    """

    Clipboard: ... = PySide.QtCore.QEvent.Type.Clipboard
    """
    """

    Close: ... = PySide.QtCore.QEvent.Type.Close
    """
    """

    CloseSoftwareInputPanel: ...
    """
    """

    ContentsRectChange: ... = PySide.QtCore.QEvent.Type.ContentsRectChange
    """
    """

    ContextMenu: ... = PySide.QtCore.QEvent.Type.ContextMenu
    """
    """

    Create: ... = PySide.QtCore.QEvent.Type.Create
    """
    """

    CursorChange: ... = PySide.QtCore.QEvent.Type.CursorChange
    """
    """

    DeactivateControl: ... = PySide.QtCore.QEvent.Type.DeactivateControl
    """
    """

    DeferredDelete: ... = PySide.QtCore.QEvent.Type.DeferredDelete
    """
    """

    Destroy: ... = PySide.QtCore.QEvent.Type.Destroy
    """
    """

    DragEnter: ... = PySide.QtCore.QEvent.Type.DragEnter
    """
    """

    DragLeave: ... = PySide.QtCore.QEvent.Type.DragLeave
    """
    """

    DragMove: ... = PySide.QtCore.QEvent.Type.DragMove
    """
    """

    DragResponse: ... = PySide.QtCore.QEvent.Type.DragResponse
    """
    """

    Drop: ... = PySide.QtCore.QEvent.Type.Drop
    """
    """

    DynamicPropertyChange: ...
    """
    """

    EmbeddingControl: ... = PySide.QtCore.QEvent.Type.EmbeddingControl
    """
    """

    EnabledChange: ... = PySide.QtCore.QEvent.Type.EnabledChange
    """
    """

    Enter: ... = PySide.QtCore.QEvent.Type.Enter
    """
    """

    EnterWhatsThisMode: ... = PySide.QtCore.QEvent.Type.EnterWhatsThisMode
    """
    """

    FileOpen: ... = PySide.QtCore.QEvent.Type.FileOpen
    """
    """

    FocusIn: ... = PySide.QtCore.QEvent.Type.FocusIn
    """
    """

    FocusOut: ... = PySide.QtCore.QEvent.Type.FocusOut
    """
    """

    FontChange: ... = PySide.QtCore.QEvent.Type.FontChange
    """
    """

    FutureCallOut: ... = PySide.QtCore.QEvent.Type.FutureCallOut
    """
    """

    Gesture: ... = PySide.QtCore.QEvent.Type.Gesture
    """
    """

    GestureOverride: ... = PySide.QtCore.QEvent.Type.GestureOverride
    """
    """

    GrabKeyboard: ... = PySide.QtCore.QEvent.Type.GrabKeyboard
    """
    """

    GrabMouse: ... = PySide.QtCore.QEvent.Type.GrabMouse
    """
    """

    GraphicsSceneContextMenu: ...
    """
    """

    GraphicsSceneDragEnter: ...
    """
    """

    GraphicsSceneDragLeave: ...
    """
    """

    GraphicsSceneDragMove: ...
    """
    """

    GraphicsSceneDrop: ... = PySide.QtCore.QEvent.Type.GraphicsSceneDrop
    """
    """

    GraphicsSceneHelp: ... = PySide.QtCore.QEvent.Type.GraphicsSceneHelp
    """
    """

    GraphicsSceneHoverEnter: ...
    """
    """

    GraphicsSceneHoverLeave: ...
    """
    """

    GraphicsSceneHoverMove: ...
    """
    """

    GraphicsSceneMouseDoubleClick: ...
    """
    """

    GraphicsSceneMouseMove: ...
    """
    """

    GraphicsSceneMousePress: ...
    """
    """

    GraphicsSceneMouseRelease: ...
    """
    """

    GraphicsSceneMove: ... = PySide.QtCore.QEvent.Type.GraphicsSceneMove
    """
    """

    GraphicsSceneResize: ... = PySide.QtCore.QEvent.Type.GraphicsSceneResize
    """
    """

    GraphicsSceneWheel: ... = PySide.QtCore.QEvent.Type.GraphicsSceneWheel
    """
    """

    HelpRequest: ... = PySide.QtCore.QEvent.Type.HelpRequest
    """
    """

    Hide: ... = PySide.QtCore.QEvent.Type.Hide
    """
    """

    HideToParent: ... = PySide.QtCore.QEvent.Type.HideToParent
    """
    """

    HoverEnter: ... = PySide.QtCore.QEvent.Type.HoverEnter
    """
    """

    HoverLeave: ... = PySide.QtCore.QEvent.Type.HoverLeave
    """
    """

    HoverMove: ... = PySide.QtCore.QEvent.Type.HoverMove
    """
    """

    IconDrag: ... = PySide.QtCore.QEvent.Type.IconDrag
    """
    """

    IconTextChange: ... = PySide.QtCore.QEvent.Type.IconTextChange
    """
    """

    InputMethod: ... = PySide.QtCore.QEvent.Type.InputMethod
    """
    """

    KeyPress: ... = PySide.QtCore.QEvent.Type.KeyPress
    """
    """

    KeyRelease: ... = PySide.QtCore.QEvent.Type.KeyRelease
    """
    """

    KeyboardLayoutChange: ... = PySide.QtCore.QEvent.Type.KeyboardLayoutChange
    """
    """

    LanguageChange: ... = PySide.QtCore.QEvent.Type.LanguageChange
    """
    """

    LayoutDirectionChange: ...
    """
    """

    LayoutRequest: ... = PySide.QtCore.QEvent.Type.LayoutRequest
    """
    """

    Leave: ... = PySide.QtCore.QEvent.Type.Leave
    """
    """

    LeaveWhatsThisMode: ... = PySide.QtCore.QEvent.Type.LeaveWhatsThisMode
    """
    """

    LocaleChange: ... = PySide.QtCore.QEvent.Type.LocaleChange
    """
    """

    MacGLClearDrawable: ... = PySide.QtCore.QEvent.Type.MacGLClearDrawable
    """
    """

    MacGLWindowChange: ... = PySide.QtCore.QEvent.Type.MacGLWindowChange
    """
    """

    MacSizeChange: ... = PySide.QtCore.QEvent.Type.MacSizeChange
    """
    """

    MaxUser: ... = PySide.QtCore.QEvent.Type.MaxUser
    """
    """

    MenubarUpdated: ... = PySide.QtCore.QEvent.Type.MenubarUpdated
    """
    """

    MetaCall: ... = PySide.QtCore.QEvent.Type.MetaCall
    """
    """

    ModifiedChange: ... = PySide.QtCore.QEvent.Type.ModifiedChange
    """
    """

    MouseButtonDblClick: ... = PySide.QtCore.QEvent.Type.MouseButtonDblClick
    """
    """

    MouseButtonPress: ... = PySide.QtCore.QEvent.Type.MouseButtonPress
    """
    """

    MouseButtonRelease: ... = PySide.QtCore.QEvent.Type.MouseButtonRelease
    """
    """

    MouseMove: ... = PySide.QtCore.QEvent.Type.MouseMove
    """
    """

    MouseTrackingChange: ... = PySide.QtCore.QEvent.Type.MouseTrackingChange
    """
    """

    Move: ... = PySide.QtCore.QEvent.Type.Move
    """
    """

    NativeGesture: ... = PySide.QtCore.QEvent.Type.NativeGesture
    """
    """

    NetworkReplyUpdated: ... = PySide.QtCore.QEvent.Type.NetworkReplyUpdated
    """
    """

    NonClientAreaMouseButtonDblClick: ...
    """
    """

    NonClientAreaMouseButtonPress: ...
    """
    """

    NonClientAreaMouseButtonRelease: ...
    """
    """

    NonClientAreaMouseMove: ...
    """
    """

    None: ... = PySide.QtCore.QEvent.Type.None
    """
    """

    OkRequest: ... = PySide.QtCore.QEvent.Type.OkRequest
    """
    """

    Paint: ... = PySide.QtCore.QEvent.Type.Paint
    """
    """

    PaletteChange: ... = PySide.QtCore.QEvent.Type.PaletteChange
    """
    """

    ParentAboutToChange: ... = PySide.QtCore.QEvent.Type.ParentAboutToChange
    """
    """

    ParentChange: ... = PySide.QtCore.QEvent.Type.ParentChange
    """
    """

    PlatformPanel: ... = PySide.QtCore.QEvent.Type.PlatformPanel
    """
    """

    Polish: ... = PySide.QtCore.QEvent.Type.Polish
    """
    """

    PolishRequest: ... = PySide.QtCore.QEvent.Type.PolishRequest
    """
    """

    QueryWhatsThis: ... = PySide.QtCore.QEvent.Type.QueryWhatsThis
    """
    """

    Quit: ... = PySide.QtCore.QEvent.Type.Quit
    """
    """

    RequestSoftwareInputPanel: ...
    """
    """

    Resize: ... = PySide.QtCore.QEvent.Type.Resize
    """
    """

    Shortcut: ... = PySide.QtCore.QEvent.Type.Shortcut
    """
    """

    ShortcutOverride: ... = PySide.QtCore.QEvent.Type.ShortcutOverride
    """
    """

    Show: ... = PySide.QtCore.QEvent.Type.Show
    """
    """

    ShowToParent: ... = PySide.QtCore.QEvent.Type.ShowToParent
    """
    """

    ShowWindowRequest: ... = PySide.QtCore.QEvent.Type.ShowWindowRequest
    """
    """

    SockAct: ... = PySide.QtCore.QEvent.Type.SockAct
    """
    """

    Speech: ... = PySide.QtCore.QEvent.Type.Speech
    """
    """

    StateMachineSignal: ... = PySide.QtCore.QEvent.Type.StateMachineSignal
    """
    """

    StateMachineWrapped: ... = PySide.QtCore.QEvent.Type.StateMachineWrapped
    """
    """

    StatusTip: ... = PySide.QtCore.QEvent.Type.StatusTip
    """
    """

    Style: ... = PySide.QtCore.QEvent.Type.Style
    """
    """

    StyleChange: ... = PySide.QtCore.QEvent.Type.StyleChange
    """
    """

    TabletEnterProximity: ... = PySide.QtCore.QEvent.Type.TabletEnterProximity
    """
    """

    TabletLeaveProximity: ... = PySide.QtCore.QEvent.Type.TabletLeaveProximity
    """
    """

    TabletMove: ... = PySide.QtCore.QEvent.Type.TabletMove
    """
    """

    TabletPress: ... = PySide.QtCore.QEvent.Type.TabletPress
    """
    """

    TabletRelease: ... = PySide.QtCore.QEvent.Type.TabletRelease
    """
    """

    ThreadChange: ... = PySide.QtCore.QEvent.Type.ThreadChange
    """
    """

    Timer: ... = PySide.QtCore.QEvent.Type.Timer
    """
    """

    ToolBarChange: ... = PySide.QtCore.QEvent.Type.ToolBarChange
    """
    """

    ToolTip: ... = PySide.QtCore.QEvent.Type.ToolTip
    """
    """

    ToolTipChange: ... = PySide.QtCore.QEvent.Type.ToolTipChange
    """
    """

    TouchBegin: ... = PySide.QtCore.QEvent.Type.TouchBegin
    """
    """

    TouchEnd: ... = PySide.QtCore.QEvent.Type.TouchEnd
    """
    """

    TouchUpdate: ... = PySide.QtCore.QEvent.Type.TouchUpdate
    """
    """

    Type: ...
    """
    """

    UngrabKeyboard: ... = PySide.QtCore.QEvent.Type.UngrabKeyboard
    """
    """

    UngrabMouse: ... = PySide.QtCore.QEvent.Type.UngrabMouse
    """
    """

    UpdateLater: ... = PySide.QtCore.QEvent.Type.UpdateLater
    """
    """

    UpdateRequest: ... = PySide.QtCore.QEvent.Type.UpdateRequest
    """
    """

    UpdateSoftKeys: ... = PySide.QtCore.QEvent.Type.UpdateSoftKeys
    """
    """

    User: ... = PySide.QtCore.QEvent.Type.User
    """
    """

    WhatsThis: ... = PySide.QtCore.QEvent.Type.WhatsThis
    """
    """

    WhatsThisClicked: ... = PySide.QtCore.QEvent.Type.WhatsThisClicked
    """
    """

    Wheel: ... = PySide.QtCore.QEvent.Type.Wheel
    """
    """

    WinEventAct: ... = PySide.QtCore.QEvent.Type.WinEventAct
    """
    """

    WinIdChange: ... = PySide.QtCore.QEvent.Type.WinIdChange
    """
    """

    WindowActivate: ... = PySide.QtCore.QEvent.Type.WindowActivate
    """
    """

    WindowBlocked: ... = PySide.QtCore.QEvent.Type.WindowBlocked
    """
    """

    WindowDeactivate: ... = PySide.QtCore.QEvent.Type.WindowDeactivate
    """
    """

    WindowIconChange: ... = PySide.QtCore.QEvent.Type.WindowIconChange
    """
    """

    WindowStateChange: ... = PySide.QtCore.QEvent.Type.WindowStateChange
    """
    """

    WindowTitleChange: ... = PySide.QtCore.QEvent.Type.WindowTitleChange
    """
    """

    WindowUnblocked: ... = PySide.QtCore.QEvent.Type.WindowUnblocked
    """
    """

    ZOrderChange: ... = PySide.QtCore.QEvent.Type.ZOrderChange
    """
    """

    ZeroTimerEvent: ... = PySide.QtCore.QEvent.Type.ZeroTimerEvent
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def registerEventType(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def accept(self, *args, **kwargs):
        """
        """
        ...

    def ignore(self, *args, **kwargs):
        """
        """
        ...

    def isAccepted(self, *args, **kwargs):
        """
        """
        ...

    def setAccepted(self, *args, **kwargs):
        """
        """
        ...

    def spontaneous(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QEventLoop(QObject):
    AllEvents: ... = PySide.QtCore.QEventLoop.ProcessEventsFlag.AllEvents
    """
    """

    DeferredDeletion: ...
    """
    """

    DialogExec: ... = PySide.QtCore.QEventLoop.ProcessEventsFlag.DialogExec
    """
    """

    EventLoopExec: ...
    """
    """

    ExcludeSocketNotifiers: ...
    """
    """

    ExcludeUserInputEvents: ...
    """
    """

    ProcessEventsFlag: ...
    """
    """

    ProcessEventsFlags: ...
    """
    """

    WaitForMoreEvents: ...
    """
    """

    X11ExcludeTimers: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def exit(self, *args, **kwargs):
        """
        """
        ...

    def isRunning(self, *args, **kwargs):
        """
        """
        ...

    def processEvents(self, *args, **kwargs):
        """
        """
        ...

    def quit(self, *args, **kwargs):
        """
        """
        ...

    def wakeUp(self, *args, **kwargs):
        """
        """
        ...

    ...

class QEventTransition(QAbstractTransition):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventSource(self, *args, **kwargs):
        """
        """
        ...

    def eventTest(self, *args, **kwargs):
        """
        """
        ...

    def eventType(self, *args, **kwargs):
        """
        """
        ...

    def onTransition(self, *args, **kwargs):
        """
        """
        ...

    def setEventSource(self, *args, **kwargs):
        """
        """
        ...

    def setEventType(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFSFileEngine(QAbstractFileEngine):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def currentPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def drives(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def homePath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def rootPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCurrentPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def tempPath(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def beginEntryList(self, *args, **kwargs):
        """
        """
        ...

    def caseSensitive(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def copy(self, *args, **kwargs):
        """
        """
        ...

    def endEntryList(self, *args, **kwargs):
        """
        """
        ...

    def entryList(self, *args, **kwargs):
        """
        """
        ...

    def fileFlags(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def fileTime(self, *args, **kwargs):
        """
        """
        ...

    def flush(self, *args, **kwargs):
        """
        """
        ...

    def handle(self, *args, **kwargs):
        """
        """
        ...

    def isRelativePath(self, *args, **kwargs):
        """
        """
        ...

    def isSequential(self, *args, **kwargs):
        """
        """
        ...

    def link(self, *args, **kwargs):
        """
        """
        ...

    def mkdir(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def owner(self, *args, **kwargs):
        """
        """
        ...

    def ownerId(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def readLine(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def rename(self, *args, **kwargs):
        """
        """
        ...

    def rmdir(self, *args, **kwargs):
        """
        """
        ...

    def seek(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def setPermissions(self, *args, **kwargs):
        """
        """
        ...

    def setSize(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def supportsExtension(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFactoryInterface(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def keys(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFile(QIODevice):
    AbortError: ... = PySide.QtCore.QFile.FileError.AbortError
    """
    """

    AutoCloseHandle: ... = PySide.QtCore.QFile.FileHandleFlag.AutoCloseHandle
    """
    """

    CopyError: ... = PySide.QtCore.QFile.FileError.CopyError
    """
    """

    DontCloseHandle: ... = PySide.QtCore.QFile.FileHandleFlag.DontCloseHandle
    """
    """

    ExeGroup: ... = PySide.QtCore.QFile.Permission.ExeGroup
    """
    """

    ExeOther: ... = PySide.QtCore.QFile.Permission.ExeOther
    """
    """

    ExeOwner: ... = PySide.QtCore.QFile.Permission.ExeOwner
    """
    """

    ExeUser: ... = PySide.QtCore.QFile.Permission.ExeUser
    """
    """

    FatalError: ... = PySide.QtCore.QFile.FileError.FatalError
    """
    """

    FileError: ...
    """
    """

    FileHandleFlag: ...
    """
    """

    FileHandleFlags: ...
    """
    """

    MemoryMapFlags: ...
    """
    """

    NoError: ... = PySide.QtCore.QFile.FileError.NoError
    """
    """

    NoOptions: ... = PySide.QtCore.QFile.MemoryMapFlags.NoOptions
    """
    """

    OpenError: ... = PySide.QtCore.QFile.FileError.OpenError
    """
    """

    Permission: ...
    """
    """

    Permissions: ...
    """
    """

    PermissionsError: ... = PySide.QtCore.QFile.FileError.PermissionsError
    """
    """

    PositionError: ... = PySide.QtCore.QFile.FileError.PositionError
    """
    """

    ReadError: ... = PySide.QtCore.QFile.FileError.ReadError
    """
    """

    ReadGroup: ... = PySide.QtCore.QFile.Permission.ReadGroup
    """
    """

    ReadOther: ... = PySide.QtCore.QFile.Permission.ReadOther
    """
    """

    ReadOwner: ... = PySide.QtCore.QFile.Permission.ReadOwner
    """
    """

    ReadUser: ... = PySide.QtCore.QFile.Permission.ReadUser
    """
    """

    RemoveError: ... = PySide.QtCore.QFile.FileError.RemoveError
    """
    """

    RenameError: ... = PySide.QtCore.QFile.FileError.RenameError
    """
    """

    ResizeError: ... = PySide.QtCore.QFile.FileError.ResizeError
    """
    """

    ResourceError: ... = PySide.QtCore.QFile.FileError.ResourceError
    """
    """

    TimeOutError: ... = PySide.QtCore.QFile.FileError.TimeOutError
    """
    """

    UnspecifiedError: ... = PySide.QtCore.QFile.FileError.UnspecifiedError
    """
    """

    WriteError: ... = PySide.QtCore.QFile.FileError.WriteError
    """
    """

    WriteGroup: ... = PySide.QtCore.QFile.Permission.WriteGroup
    """
    """

    WriteOther: ... = PySide.QtCore.QFile.Permission.WriteOther
    """
    """

    WriteOwner: ... = PySide.QtCore.QFile.Permission.WriteOwner
    """
    """

    WriteUser: ... = PySide.QtCore.QFile.Permission.WriteUser
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def copy(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def decodeName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def encodeName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def exists(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def link(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def permissions(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def readLink(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def remove(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def rename(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def resize(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setPermissions(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def symLinkTarget(*args, **kwargs):
        """
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def error(self, *args, **kwargs):
        """
        """
        ...

    def fileEngine(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def flush(self, *args, **kwargs):
        """
        """
        ...

    def handle(self, *args, **kwargs):
        """
        """
        ...

    def isSequential(self, *args, **kwargs):
        """
        """
        ...

    def map(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def readData(self, *args, **kwargs):
        """
        """
        ...

    def readLineData(self, *args, **kwargs):
        """
        """
        ...

    def seek(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def unmap(self, *args, **kwargs):
        """
        """
        ...

    def unsetError(self, *args, **kwargs):
        """
        """
        ...

    def writeData(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFileInfo(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def absoluteDir(self, *args, **kwargs):
        """
        """
        ...

    def absoluteFilePath(self, *args, **kwargs):
        """
        """
        ...

    def absolutePath(self, *args, **kwargs):
        """
        """
        ...

    def baseName(self, *args, **kwargs):
        """
        """
        ...

    def bundleName(self, *args, **kwargs):
        """
        """
        ...

    def caching(self, *args, **kwargs):
        """
        """
        ...

    def canonicalFilePath(self, *args, **kwargs):
        """
        """
        ...

    def canonicalPath(self, *args, **kwargs):
        """
        """
        ...

    def completeBaseName(self, *args, **kwargs):
        """
        """
        ...

    def completeSuffix(self, *args, **kwargs):
        """
        """
        ...

    def created(self, *args, **kwargs):
        """
        """
        ...

    def dir(self, *args, **kwargs):
        """
        """
        ...

    def exists(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def filePath(self, *args, **kwargs):
        """
        """
        ...

    def group(self, *args, **kwargs):
        """
        """
        ...

    def groupId(self, *args, **kwargs):
        """
        """
        ...

    def isAbsolute(self, *args, **kwargs):
        """
        """
        ...

    def isBundle(self, *args, **kwargs):
        """
        """
        ...

    def isDir(self, *args, **kwargs):
        """
        """
        ...

    def isExecutable(self, *args, **kwargs):
        """
        """
        ...

    def isFile(self, *args, **kwargs):
        """
        """
        ...

    def isHidden(self, *args, **kwargs):
        """
        """
        ...

    def isReadable(self, *args, **kwargs):
        """
        """
        ...

    def isRelative(self, *args, **kwargs):
        """
        """
        ...

    def isRoot(self, *args, **kwargs):
        """
        """
        ...

    def isSymLink(self, *args, **kwargs):
        """
        """
        ...

    def isWritable(self, *args, **kwargs):
        """
        """
        ...

    def lastModified(self, *args, **kwargs):
        """
        """
        ...

    def lastRead(self, *args, **kwargs):
        """
        """
        ...

    def makeAbsolute(self, *args, **kwargs):
        """
        """
        ...

    def owner(self, *args, **kwargs):
        """
        """
        ...

    def ownerId(self, *args, **kwargs):
        """
        """
        ...

    def path(self, *args, **kwargs):
        """
        """
        ...

    def permission(self, *args, **kwargs):
        """
        """
        ...

    def permissions(self, *args, **kwargs):
        """
        """
        ...

    def readLink(self, *args, **kwargs):
        """
        """
        ...

    def refresh(self, *args, **kwargs):
        """
        """
        ...

    def setCaching(self, *args, **kwargs):
        """
        """
        ...

    def setFile(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def suffix(self, *args, **kwargs):
        """
        """
        ...

    def symLinkTarget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFileSystemWatcher(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    directoryChanged: ...
    """
    Signal
    """

    fileChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addPath(self, *args, **kwargs):
        """
        """
        ...

    def addPaths(self, *args, **kwargs):
        """
        """
        ...

    def directories(self, *args, **kwargs):
        """
        """
        ...

    def files(self, *args, **kwargs):
        """
        """
        ...

    def removePath(self, *args, **kwargs):
        """
        """
        ...

    def removePaths(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFinalState(QAbstractState):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def onEntry(self, *args, **kwargs):
        """
        """
        ...

    def onExit(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGenericArgument(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGenericReturnArgument(QGenericArgument):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QHistoryState(QAbstractState):
    DeepHistory: ... = PySide.QtCore.QHistoryState.HistoryType.DeepHistory
    """
    """

    HistoryType: ...
    """
    """

    ShallowHistory: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def defaultState(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def historyType(self, *args, **kwargs):
        """
        """
        ...

    def onEntry(self, *args, **kwargs):
        """
        """
        ...

    def onExit(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultState(self, *args, **kwargs):
        """
        """
        ...

    def setHistoryType(self, *args, **kwargs):
        """
        """
        ...

    ...

class QIODevice(QObject):
    Append: ... = PySide.QtCore.QIODevice.OpenModeFlag.Append
    """
    """

    NotOpen: ... = PySide.QtCore.QIODevice.OpenModeFlag.NotOpen
    """
    """

    OpenMode: ...
    """
    """

    OpenModeFlag: ...
    """
    """

    ReadOnly: ... = PySide.QtCore.QIODevice.OpenModeFlag.ReadOnly
    """
    """

    ReadWrite: ... = PySide.QtCore.QIODevice.OpenModeFlag.ReadWrite
    """
    """

    Text: ... = PySide.QtCore.QIODevice.OpenModeFlag.Text
    """
    """

    Truncate: ... = PySide.QtCore.QIODevice.OpenModeFlag.Truncate
    """
    """

    Unbuffered: ... = PySide.QtCore.QIODevice.OpenModeFlag.Unbuffered
    """
    """

    WriteOnly: ... = PySide.QtCore.QIODevice.OpenModeFlag.WriteOnly
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToClose: ...
    """
    Signal
    """

    bytesWritten: ...
    """
    Signal
    """

    readChannelFinished: ...
    """
    Signal
    """

    readyRead: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def bytesAvailable(self, *args, **kwargs):
        """
        """
        ...

    def bytesToWrite(self, *args, **kwargs):
        """
        """
        ...

    def canReadLine(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def getChar(self, *args, **kwargs):
        """
        """
        ...

    def isOpen(self, *args, **kwargs):
        """
        """
        ...

    def isReadable(self, *args, **kwargs):
        """
        """
        ...

    def isSequential(self, *args, **kwargs):
        """
        """
        ...

    def isTextModeEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isWritable(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def openMode(self, *args, **kwargs):
        """
        """
        ...

    def peek(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def putChar(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def readAll(self, *args, **kwargs):
        """
        """
        ...

    def readData(self, *args, **kwargs):
        """
        """
        ...

    def readLine(self, *args, **kwargs):
        """
        """
        ...

    def readLineData(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def seek(self, *args, **kwargs):
        """
        """
        ...

    def setErrorString(self, *args, **kwargs):
        """
        """
        ...

    def setOpenMode(self, *args, **kwargs):
        """
        """
        ...

    def setTextModeEnabled(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def ungetChar(self, *args, **kwargs):
        """
        """
        ...

    def waitForBytesWritten(self, *args, **kwargs):
        """
        """
        ...

    def waitForReadyRead(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    def writeData(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLibraryInfo(Shiboken.Object):
    BinariesPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.BinariesPath
    """
    """

    DataPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.DataPath
    """
    """

    DemosPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.DemosPath
    """
    """

    DocumentationPath: ...
    """
    """

    ExamplesPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.ExamplesPath
    """
    """

    HeadersPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.HeadersPath
    """
    """

    ImportsPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.ImportsPath
    """
    """

    LibrariesPath: ...
    """
    """

    LibraryLocation: ...
    """
    """

    PluginsPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.PluginsPath
    """
    """

    PrefixPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.PrefixPath
    """
    """

    SettingsPath: ... = PySide.QtCore.QLibraryInfo.LibraryLocation.SettingsPath
    """
    """

    TranslationsPath: ...
    """
    """

    @staticmethod
    def buildDate(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def buildKey(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def licensedProducts(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def licensee(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def location(*args, **kwargs):
        """
        """
        ...

    ...

class QLine(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def dx(self, *args, **kwargs):
        """
        """
        ...

    def dy(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def p1(self, *args, **kwargs):
        """
        """
        ...

    def p2(self, *args, **kwargs):
        """
        """
        ...

    def setLine(self, *args, **kwargs):
        """
        """
        ...

    def setP1(self, *args, **kwargs):
        """
        """
        ...

    def setP2(self, *args, **kwargs):
        """
        """
        ...

    def setPoints(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def x1(self, *args, **kwargs):
        """
        """
        ...

    def x2(self, *args, **kwargs):
        """
        """
        ...

    def y1(self, *args, **kwargs):
        """
        """
        ...

    def y2(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLineF(Shiboken.Object):
    BoundedIntersection: ...
    """
    """

    IntersectType: ...
    """
    """

    NoIntersection: ... = PySide.QtCore.QLineF.IntersectType.NoIntersection
    """
    """

    UnboundedIntersection: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromPolar(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def angle(self, *args, **kwargs):
        """
        """
        ...

    def angleTo(self, *args, **kwargs):
        """
        """
        ...

    def dx(self, *args, **kwargs):
        """
        """
        ...

    def dy(self, *args, **kwargs):
        """
        """
        ...

    def intersect(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def normalVector(self, *args, **kwargs):
        """
        """
        ...

    def p1(self, *args, **kwargs):
        """
        """
        ...

    def p2(self, *args, **kwargs):
        """
        """
        ...

    def pointAt(self, *args, **kwargs):
        """
        """
        ...

    def setAngle(self, *args, **kwargs):
        """
        """
        ...

    def setLength(self, *args, **kwargs):
        """
        """
        ...

    def setLine(self, *args, **kwargs):
        """
        """
        ...

    def setP1(self, *args, **kwargs):
        """
        """
        ...

    def setP2(self, *args, **kwargs):
        """
        """
        ...

    def setPoints(self, *args, **kwargs):
        """
        """
        ...

    def toLine(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def unitVector(self, *args, **kwargs):
        """
        """
        ...

    def x1(self, *args, **kwargs):
        """
        """
        ...

    def x2(self, *args, **kwargs):
        """
        """
        ...

    def y1(self, *args, **kwargs):
        """
        """
        ...

    def y2(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLocale(Shiboken.Object):
    Abkhazian: ... = PySide.QtCore.QLocale.Language.Abkhazian
    """
    """

    Afan: ... = PySide.QtCore.QLocale.Language.Afan
    """
    """

    Afar: ... = PySide.QtCore.QLocale.Language.Afar
    """
    """

    Afghanistan: ... = PySide.QtCore.QLocale.Country.Afghanistan
    """
    """

    Afrikaans: ... = PySide.QtCore.QLocale.Language.Afrikaans
    """
    """

    Aghem: ... = PySide.QtCore.QLocale.Language.Aghem
    """
    """

    Akan: ... = PySide.QtCore.QLocale.Language.Akan
    """
    """

    Albania: ... = PySide.QtCore.QLocale.Country.Albania
    """
    """

    Albanian: ... = PySide.QtCore.QLocale.Language.Albanian
    """
    """

    Algeria: ... = PySide.QtCore.QLocale.Country.Algeria
    """
    """

    AlternateQuotation: ...
    """
    """

    AmericanSamoa: ... = PySide.QtCore.QLocale.Country.AmericanSamoa
    """
    """

    Amharic: ... = PySide.QtCore.QLocale.Language.Amharic
    """
    """

    Andorra: ... = PySide.QtCore.QLocale.Country.Andorra
    """
    """

    Angola: ... = PySide.QtCore.QLocale.Country.Angola
    """
    """

    Anguilla: ... = PySide.QtCore.QLocale.Country.Anguilla
    """
    """

    Antarctica: ... = PySide.QtCore.QLocale.Country.Antarctica
    """
    """

    AntiguaAndBarbuda: ... = PySide.QtCore.QLocale.Country.AntiguaAndBarbuda
    """
    """

    AnyCountry: ... = PySide.QtCore.QLocale.Country.AnyCountry
    """
    """

    AnyLanguage: ... = PySide.QtCore.QLocale.Language.AnyLanguage
    """
    """

    AnyScript: ... = PySide.QtCore.QLocale.Script.AnyScript
    """
    """

    Arabic: ... = PySide.QtCore.QLocale.Language.Arabic
    """
    """

    ArabicScript: ... = PySide.QtCore.QLocale.Script.ArabicScript
    """
    """

    Argentina: ... = PySide.QtCore.QLocale.Country.Argentina
    """
    """

    Armenia: ... = PySide.QtCore.QLocale.Country.Armenia
    """
    """

    Armenian: ... = PySide.QtCore.QLocale.Language.Armenian
    """
    """

    Aruba: ... = PySide.QtCore.QLocale.Country.Aruba
    """
    """

    Assamese: ... = PySide.QtCore.QLocale.Language.Assamese
    """
    """

    Asu: ... = PySide.QtCore.QLocale.Language.Asu
    """
    """

    Atsam: ... = PySide.QtCore.QLocale.Language.Atsam
    """
    """

    Australia: ... = PySide.QtCore.QLocale.Country.Australia
    """
    """

    Austria: ... = PySide.QtCore.QLocale.Country.Austria
    """
    """

    Aymara: ... = PySide.QtCore.QLocale.Language.Aymara
    """
    """

    Azerbaijan: ... = PySide.QtCore.QLocale.Country.Azerbaijan
    """
    """

    Azerbaijani: ... = PySide.QtCore.QLocale.Language.Azerbaijani
    """
    """

    Bafia: ... = PySide.QtCore.QLocale.Language.Bafia
    """
    """

    Bahamas: ... = PySide.QtCore.QLocale.Country.Bahamas
    """
    """

    Bahrain: ... = PySide.QtCore.QLocale.Country.Bahrain
    """
    """

    Bambara: ... = PySide.QtCore.QLocale.Language.Bambara
    """
    """

    Bangladesh: ... = PySide.QtCore.QLocale.Country.Bangladesh
    """
    """

    Barbados: ... = PySide.QtCore.QLocale.Country.Barbados
    """
    """

    Basaa: ... = PySide.QtCore.QLocale.Language.Basaa
    """
    """

    Bashkir: ... = PySide.QtCore.QLocale.Language.Bashkir
    """
    """

    Basque: ... = PySide.QtCore.QLocale.Language.Basque
    """
    """

    Belarus: ... = PySide.QtCore.QLocale.Country.Belarus
    """
    """

    Belgium: ... = PySide.QtCore.QLocale.Country.Belgium
    """
    """

    Belize: ... = PySide.QtCore.QLocale.Country.Belize
    """
    """

    Bemba: ... = PySide.QtCore.QLocale.Language.Bemba
    """
    """

    Bena: ... = PySide.QtCore.QLocale.Language.Bena
    """
    """

    Bengali: ... = PySide.QtCore.QLocale.Language.Bengali
    """
    """

    Benin: ... = PySide.QtCore.QLocale.Country.Benin
    """
    """

    Bermuda: ... = PySide.QtCore.QLocale.Country.Bermuda
    """
    """

    Bhutan: ... = PySide.QtCore.QLocale.Country.Bhutan
    """
    """

    Bhutani: ... = PySide.QtCore.QLocale.Language.Bhutani
    """
    """

    Bihari: ... = PySide.QtCore.QLocale.Language.Bihari
    """
    """

    Bislama: ... = PySide.QtCore.QLocale.Language.Bislama
    """
    """

    Blin: ... = PySide.QtCore.QLocale.Language.Blin
    """
    """

    Bodo: ... = PySide.QtCore.QLocale.Language.Bodo
    """
    """

    Bolivia: ... = PySide.QtCore.QLocale.Country.Bolivia
    """
    """

    BosniaAndHerzegowina: ...
    """
    """

    Bosnian: ... = PySide.QtCore.QLocale.Language.Bosnian
    """
    """

    Botswana: ... = PySide.QtCore.QLocale.Country.Botswana
    """
    """

    BouvetIsland: ... = PySide.QtCore.QLocale.Country.BouvetIsland
    """
    """

    Brazil: ... = PySide.QtCore.QLocale.Country.Brazil
    """
    """

    Breton: ... = PySide.QtCore.QLocale.Language.Breton
    """
    """

    BritishIndianOceanTerritory: ...
    """
    """

    BritishVirginIslands: ...
    """
    """

    BruneiDarussalam: ... = PySide.QtCore.QLocale.Country.BruneiDarussalam
    """
    """

    Bulgaria: ... = PySide.QtCore.QLocale.Country.Bulgaria
    """
    """

    Bulgarian: ... = PySide.QtCore.QLocale.Language.Bulgarian
    """
    """

    BurkinaFaso: ... = PySide.QtCore.QLocale.Country.BurkinaFaso
    """
    """

    Burmese: ... = PySide.QtCore.QLocale.Language.Burmese
    """
    """

    Burundi: ... = PySide.QtCore.QLocale.Country.Burundi
    """
    """

    Byelorussian: ... = PySide.QtCore.QLocale.Language.Byelorussian
    """
    """

    C: ... = PySide.QtCore.QLocale.Language.C
    """
    """

    Cambodia: ... = PySide.QtCore.QLocale.Country.Cambodia
    """
    """

    Cambodian: ... = PySide.QtCore.QLocale.Language.Cambodian
    """
    """

    Cameroon: ... = PySide.QtCore.QLocale.Country.Cameroon
    """
    """

    Canada: ... = PySide.QtCore.QLocale.Country.Canada
    """
    """

    CapeVerde: ... = PySide.QtCore.QLocale.Country.CapeVerde
    """
    """

    Catalan: ... = PySide.QtCore.QLocale.Language.Catalan
    """
    """

    CaymanIslands: ... = PySide.QtCore.QLocale.Country.CaymanIslands
    """
    """

    CentralAfricanRepublic: ...
    """
    """

    CentralMoroccoTamazight: ...
    """
    """

    Chad: ... = PySide.QtCore.QLocale.Country.Chad
    """
    """

    Cherokee: ... = PySide.QtCore.QLocale.Language.Cherokee
    """
    """

    Chewa: ... = PySide.QtCore.QLocale.Language.Chewa
    """
    """

    Chiga: ... = PySide.QtCore.QLocale.Language.Chiga
    """
    """

    Chile: ... = PySide.QtCore.QLocale.Country.Chile
    """
    """

    China: ... = PySide.QtCore.QLocale.Country.China
    """
    """

    Chinese: ... = PySide.QtCore.QLocale.Language.Chinese
    """
    """

    ChristmasIsland: ... = PySide.QtCore.QLocale.Country.ChristmasIsland
    """
    """

    CocosIslands: ... = PySide.QtCore.QLocale.Country.CocosIslands
    """
    """

    Colognian: ... = PySide.QtCore.QLocale.Language.Colognian
    """
    """

    Colombia: ... = PySide.QtCore.QLocale.Country.Colombia
    """
    """

    Comoros: ... = PySide.QtCore.QLocale.Country.Comoros
    """
    """

    CongoSwahili: ... = PySide.QtCore.QLocale.Language.CongoSwahili
    """
    """

    CookIslands: ... = PySide.QtCore.QLocale.Country.CookIslands
    """
    """

    Cornish: ... = PySide.QtCore.QLocale.Language.Cornish
    """
    """

    Corsican: ... = PySide.QtCore.QLocale.Language.Corsican
    """
    """

    CostaRica: ... = PySide.QtCore.QLocale.Country.CostaRica
    """
    """

    Country: ...
    """
    """

    Croatia: ... = PySide.QtCore.QLocale.Country.Croatia
    """
    """

    Croatian: ... = PySide.QtCore.QLocale.Language.Croatian
    """
    """

    Cuba: ... = PySide.QtCore.QLocale.Country.Cuba
    """
    """

    CurrencyDisplayName: ...
    """
    """

    CurrencyIsoCode: ...
    """
    """

    CurrencySymbol: ...
    """
    """

    CurrencySymbolFormat: ...
    """
    """

    Cyprus: ... = PySide.QtCore.QLocale.Country.Cyprus
    """
    """

    CyrillicScript: ... = PySide.QtCore.QLocale.Script.CyrillicScript
    """
    """

    Czech: ... = PySide.QtCore.QLocale.Language.Czech
    """
    """

    CzechRepublic: ... = PySide.QtCore.QLocale.Country.CzechRepublic
    """
    """

    Danish: ... = PySide.QtCore.QLocale.Language.Danish
    """
    """

    DemocraticRepublicOfCongo: ...
    """
    """

    DemocraticRepublicOfKorea: ...
    """
    """

    Denmark: ... = PySide.QtCore.QLocale.Country.Denmark
    """
    """

    DeseretScript: ... = PySide.QtCore.QLocale.Script.DeseretScript
    """
    """

    Divehi: ... = PySide.QtCore.QLocale.Language.Divehi
    """
    """

    Djibouti: ... = PySide.QtCore.QLocale.Country.Djibouti
    """
    """

    Dominica: ... = PySide.QtCore.QLocale.Country.Dominica
    """
    """

    DominicanRepublic: ... = PySide.QtCore.QLocale.Country.DominicanRepublic
    """
    """

    Duala: ... = PySide.QtCore.QLocale.Language.Duala
    """
    """

    Dutch: ... = PySide.QtCore.QLocale.Language.Dutch
    """
    """

    EastTimor: ... = PySide.QtCore.QLocale.Country.EastTimor
    """
    """

    Ecuador: ... = PySide.QtCore.QLocale.Country.Ecuador
    """
    """

    Egypt: ... = PySide.QtCore.QLocale.Country.Egypt
    """
    """

    ElSalvador: ... = PySide.QtCore.QLocale.Country.ElSalvador
    """
    """

    Embu: ... = PySide.QtCore.QLocale.Language.Embu
    """
    """

    English: ... = PySide.QtCore.QLocale.Language.English
    """
    """

    EquatorialGuinea: ... = PySide.QtCore.QLocale.Country.EquatorialGuinea
    """
    """

    Eritrea: ... = PySide.QtCore.QLocale.Country.Eritrea
    """
    """

    Esperanto: ... = PySide.QtCore.QLocale.Language.Esperanto
    """
    """

    Estonia: ... = PySide.QtCore.QLocale.Country.Estonia
    """
    """

    Estonian: ... = PySide.QtCore.QLocale.Language.Estonian
    """
    """

    Ethiopia: ... = PySide.QtCore.QLocale.Country.Ethiopia
    """
    """

    Ewe: ... = PySide.QtCore.QLocale.Language.Ewe
    """
    """

    Ewondo: ... = PySide.QtCore.QLocale.Language.Ewondo
    """
    """

    FalklandIslands: ... = PySide.QtCore.QLocale.Country.FalklandIslands
    """
    """

    FaroeIslands: ... = PySide.QtCore.QLocale.Country.FaroeIslands
    """
    """

    Faroese: ... = PySide.QtCore.QLocale.Language.Faroese
    """
    """

    FijiCountry: ... = PySide.QtCore.QLocale.Country.FijiCountry
    """
    """

    FijiLanguage: ... = PySide.QtCore.QLocale.Language.FijiLanguage
    """
    """

    Filipino: ... = PySide.QtCore.QLocale.Language.Filipino
    """
    """

    Finland: ... = PySide.QtCore.QLocale.Country.Finland
    """
    """

    Finnish: ... = PySide.QtCore.QLocale.Language.Finnish
    """
    """

    FormatType: ...
    """
    """

    France: ... = PySide.QtCore.QLocale.Country.France
    """
    """

    French: ... = PySide.QtCore.QLocale.Language.French
    """
    """

    FrenchGuiana: ... = PySide.QtCore.QLocale.Country.FrenchGuiana
    """
    """

    FrenchPolynesia: ... = PySide.QtCore.QLocale.Country.FrenchPolynesia
    """
    """

    FrenchSouthernTerritories: ...
    """
    """

    Frisian: ... = PySide.QtCore.QLocale.Language.Frisian
    """
    """

    Friulian: ... = PySide.QtCore.QLocale.Language.Friulian
    """
    """

    Fulah: ... = PySide.QtCore.QLocale.Language.Fulah
    """
    """

    Ga: ... = PySide.QtCore.QLocale.Language.Ga
    """
    """

    Gabon: ... = PySide.QtCore.QLocale.Country.Gabon
    """
    """

    Gaelic: ... = PySide.QtCore.QLocale.Language.Gaelic
    """
    """

    Galician: ... = PySide.QtCore.QLocale.Language.Galician
    """
    """

    Gambia: ... = PySide.QtCore.QLocale.Country.Gambia
    """
    """

    Ganda: ... = PySide.QtCore.QLocale.Language.Ganda
    """
    """

    Geez: ... = PySide.QtCore.QLocale.Language.Geez
    """
    """

    Georgia: ... = PySide.QtCore.QLocale.Country.Georgia
    """
    """

    Georgian: ... = PySide.QtCore.QLocale.Language.Georgian
    """
    """

    German: ... = PySide.QtCore.QLocale.Language.German
    """
    """

    Germany: ... = PySide.QtCore.QLocale.Country.Germany
    """
    """

    Ghana: ... = PySide.QtCore.QLocale.Country.Ghana
    """
    """

    Gibraltar: ... = PySide.QtCore.QLocale.Country.Gibraltar
    """
    """

    Greece: ... = PySide.QtCore.QLocale.Country.Greece
    """
    """

    Greek: ... = PySide.QtCore.QLocale.Language.Greek
    """
    """

    Greenland: ... = PySide.QtCore.QLocale.Country.Greenland
    """
    """

    Greenlandic: ... = PySide.QtCore.QLocale.Language.Greenlandic
    """
    """

    Grenada: ... = PySide.QtCore.QLocale.Country.Grenada
    """
    """

    Guadeloupe: ... = PySide.QtCore.QLocale.Country.Guadeloupe
    """
    """

    Guam: ... = PySide.QtCore.QLocale.Country.Guam
    """
    """

    Guarani: ... = PySide.QtCore.QLocale.Language.Guarani
    """
    """

    Guatemala: ... = PySide.QtCore.QLocale.Country.Guatemala
    """
    """

    Guinea: ... = PySide.QtCore.QLocale.Country.Guinea
    """
    """

    GuineaBissau: ... = PySide.QtCore.QLocale.Country.GuineaBissau
    """
    """

    Gujarati: ... = PySide.QtCore.QLocale.Language.Gujarati
    """
    """

    GurmukhiScript: ... = PySide.QtCore.QLocale.Script.GurmukhiScript
    """
    """

    Gusii: ... = PySide.QtCore.QLocale.Language.Gusii
    """
    """

    Guyana: ... = PySide.QtCore.QLocale.Country.Guyana
    """
    """

    Haiti: ... = PySide.QtCore.QLocale.Country.Haiti
    """
    """

    Hausa: ... = PySide.QtCore.QLocale.Language.Hausa
    """
    """

    Hawaiian: ... = PySide.QtCore.QLocale.Language.Hawaiian
    """
    """

    HeardAndMcDonaldIslands: ...
    """
    """

    Hebrew: ... = PySide.QtCore.QLocale.Language.Hebrew
    """
    """

    Hindi: ... = PySide.QtCore.QLocale.Language.Hindi
    """
    """

    Honduras: ... = PySide.QtCore.QLocale.Country.Honduras
    """
    """

    HongKong: ... = PySide.QtCore.QLocale.Country.HongKong
    """
    """

    Hungarian: ... = PySide.QtCore.QLocale.Language.Hungarian
    """
    """

    Hungary: ... = PySide.QtCore.QLocale.Country.Hungary
    """
    """

    Iceland: ... = PySide.QtCore.QLocale.Country.Iceland
    """
    """

    Icelandic: ... = PySide.QtCore.QLocale.Language.Icelandic
    """
    """

    Igbo: ... = PySide.QtCore.QLocale.Language.Igbo
    """
    """

    ImperialSystem: ...
    """
    """

    India: ... = PySide.QtCore.QLocale.Country.India
    """
    """

    Indonesia: ... = PySide.QtCore.QLocale.Country.Indonesia
    """
    """

    Indonesian: ... = PySide.QtCore.QLocale.Language.Indonesian
    """
    """

    Interlingua: ... = PySide.QtCore.QLocale.Language.Interlingua
    """
    """

    Interlingue: ... = PySide.QtCore.QLocale.Language.Interlingue
    """
    """

    Inuktitut: ... = PySide.QtCore.QLocale.Language.Inuktitut
    """
    """

    Inupiak: ... = PySide.QtCore.QLocale.Language.Inupiak
    """
    """

    Iran: ... = PySide.QtCore.QLocale.Country.Iran
    """
    """

    Iraq: ... = PySide.QtCore.QLocale.Country.Iraq
    """
    """

    Ireland: ... = PySide.QtCore.QLocale.Country.Ireland
    """
    """

    Irish: ... = PySide.QtCore.QLocale.Language.Irish
    """
    """

    Israel: ... = PySide.QtCore.QLocale.Country.Israel
    """
    """

    Italian: ... = PySide.QtCore.QLocale.Language.Italian
    """
    """

    Italy: ... = PySide.QtCore.QLocale.Country.Italy
    """
    """

    IvoryCoast: ... = PySide.QtCore.QLocale.Country.IvoryCoast
    """
    """

    Jamaica: ... = PySide.QtCore.QLocale.Country.Jamaica
    """
    """

    Japan: ... = PySide.QtCore.QLocale.Country.Japan
    """
    """

    Japanese: ... = PySide.QtCore.QLocale.Language.Japanese
    """
    """

    Javanese: ... = PySide.QtCore.QLocale.Language.Javanese
    """
    """

    Jju: ... = PySide.QtCore.QLocale.Language.Jju
    """
    """

    JolaFonyi: ... = PySide.QtCore.QLocale.Language.JolaFonyi
    """
    """

    Jordan: ... = PySide.QtCore.QLocale.Country.Jordan
    """
    """

    Kabuverdianu: ... = PySide.QtCore.QLocale.Language.Kabuverdianu
    """
    """

    Kabyle: ... = PySide.QtCore.QLocale.Language.Kabyle
    """
    """

    Kalenjin: ... = PySide.QtCore.QLocale.Language.Kalenjin
    """
    """

    Kamba: ... = PySide.QtCore.QLocale.Language.Kamba
    """
    """

    Kannada: ... = PySide.QtCore.QLocale.Language.Kannada
    """
    """

    Kashmiri: ... = PySide.QtCore.QLocale.Language.Kashmiri
    """
    """

    Kazakh: ... = PySide.QtCore.QLocale.Language.Kazakh
    """
    """

    Kazakhstan: ... = PySide.QtCore.QLocale.Country.Kazakhstan
    """
    """

    Kenya: ... = PySide.QtCore.QLocale.Country.Kenya
    """
    """

    Kikuyu: ... = PySide.QtCore.QLocale.Language.Kikuyu
    """
    """

    Kinyarwanda: ... = PySide.QtCore.QLocale.Language.Kinyarwanda
    """
    """

    Kirghiz: ... = PySide.QtCore.QLocale.Language.Kirghiz
    """
    """

    Kiribati: ... = PySide.QtCore.QLocale.Country.Kiribati
    """
    """

    Konkani: ... = PySide.QtCore.QLocale.Language.Konkani
    """
    """

    Korean: ... = PySide.QtCore.QLocale.Language.Korean
    """
    """

    Koro: ... = PySide.QtCore.QLocale.Language.Koro
    """
    """

    KoyraChiini: ... = PySide.QtCore.QLocale.Language.KoyraChiini
    """
    """

    KoyraboroSenni: ... = PySide.QtCore.QLocale.Language.KoyraboroSenni
    """
    """

    Kpelle: ... = PySide.QtCore.QLocale.Language.Kpelle
    """
    """

    Kurdish: ... = PySide.QtCore.QLocale.Language.Kurdish
    """
    """

    Kurundi: ... = PySide.QtCore.QLocale.Language.Kurundi
    """
    """

    Kuwait: ... = PySide.QtCore.QLocale.Country.Kuwait
    """
    """

    Kwasio: ... = PySide.QtCore.QLocale.Language.Kwasio
    """
    """

    Kyrgyzstan: ... = PySide.QtCore.QLocale.Country.Kyrgyzstan
    """
    """

    Langi: ... = PySide.QtCore.QLocale.Language.Langi
    """
    """

    Language: ...
    """
    """

    Lao: ... = PySide.QtCore.QLocale.Country.Lao
    """
    """

    Laothian: ... = PySide.QtCore.QLocale.Language.Laothian
    """
    """

    LastCountry: ... = PySide.QtCore.QLocale.Country.LastCountry
    """
    """

    LastLanguage: ... = PySide.QtCore.QLocale.Language.LastLanguage
    """
    """

    LastScript: ... = PySide.QtCore.QLocale.Script.LastScript
    """
    """

    Latin: ... = PySide.QtCore.QLocale.Language.Latin
    """
    """

    LatinAmericaAndTheCaribbean: ...
    """
    """

    LatinScript: ... = PySide.QtCore.QLocale.Script.LatinScript
    """
    """

    Latvia: ... = PySide.QtCore.QLocale.Country.Latvia
    """
    """

    Latvian: ... = PySide.QtCore.QLocale.Language.Latvian
    """
    """

    Lebanon: ... = PySide.QtCore.QLocale.Country.Lebanon
    """
    """

    Lesotho: ... = PySide.QtCore.QLocale.Country.Lesotho
    """
    """

    Liberia: ... = PySide.QtCore.QLocale.Country.Liberia
    """
    """

    LibyanArabJamahiriya: ...
    """
    """

    Liechtenstein: ... = PySide.QtCore.QLocale.Country.Liechtenstein
    """
    """

    Lingala: ... = PySide.QtCore.QLocale.Language.Lingala
    """
    """

    Lithuania: ... = PySide.QtCore.QLocale.Country.Lithuania
    """
    """

    Lithuanian: ... = PySide.QtCore.QLocale.Language.Lithuanian
    """
    """

    LongFormat: ... = PySide.QtCore.QLocale.FormatType.LongFormat
    """
    """

    LowGerman: ... = PySide.QtCore.QLocale.Language.LowGerman
    """
    """

    LubaKatanga: ... = PySide.QtCore.QLocale.Language.LubaKatanga
    """
    """

    Luo: ... = PySide.QtCore.QLocale.Language.Luo
    """
    """

    Luxembourg: ... = PySide.QtCore.QLocale.Country.Luxembourg
    """
    """

    Luyia: ... = PySide.QtCore.QLocale.Language.Luyia
    """
    """

    Macau: ... = PySide.QtCore.QLocale.Country.Macau
    """
    """

    Macedonia: ... = PySide.QtCore.QLocale.Country.Macedonia
    """
    """

    Macedonian: ... = PySide.QtCore.QLocale.Language.Macedonian
    """
    """

    Machame: ... = PySide.QtCore.QLocale.Language.Machame
    """
    """

    Madagascar: ... = PySide.QtCore.QLocale.Country.Madagascar
    """
    """

    MakhuwaMeetto: ... = PySide.QtCore.QLocale.Language.MakhuwaMeetto
    """
    """

    Makonde: ... = PySide.QtCore.QLocale.Language.Makonde
    """
    """

    Malagasy: ... = PySide.QtCore.QLocale.Language.Malagasy
    """
    """

    Malawi: ... = PySide.QtCore.QLocale.Country.Malawi
    """
    """

    Malay: ... = PySide.QtCore.QLocale.Language.Malay
    """
    """

    Malayalam: ... = PySide.QtCore.QLocale.Language.Malayalam
    """
    """

    Malaysia: ... = PySide.QtCore.QLocale.Country.Malaysia
    """
    """

    Maldives: ... = PySide.QtCore.QLocale.Country.Maldives
    """
    """

    Mali: ... = PySide.QtCore.QLocale.Country.Mali
    """
    """

    Malta: ... = PySide.QtCore.QLocale.Country.Malta
    """
    """

    Maltese: ... = PySide.QtCore.QLocale.Language.Maltese
    """
    """

    Manx: ... = PySide.QtCore.QLocale.Language.Manx
    """
    """

    Maori: ... = PySide.QtCore.QLocale.Language.Maori
    """
    """

    Marathi: ... = PySide.QtCore.QLocale.Language.Marathi
    """
    """

    MarshallIslands: ... = PySide.QtCore.QLocale.Country.MarshallIslands
    """
    """

    Martinique: ... = PySide.QtCore.QLocale.Country.Martinique
    """
    """

    Masai: ... = PySide.QtCore.QLocale.Language.Masai
    """
    """

    Mauritania: ... = PySide.QtCore.QLocale.Country.Mauritania
    """
    """

    Mauritius: ... = PySide.QtCore.QLocale.Country.Mauritius
    """
    """

    Mayotte: ... = PySide.QtCore.QLocale.Country.Mayotte
    """
    """

    MeasurementSystem: ...
    """
    """

    Meru: ... = PySide.QtCore.QLocale.Language.Meru
    """
    """

    MetricSystem: ... = PySide.QtCore.QLocale.MeasurementSystem.MetricSystem
    """
    """

    MetropolitanFrance: ... = PySide.QtCore.QLocale.Country.MetropolitanFrance
    """
    """

    Mexico: ... = PySide.QtCore.QLocale.Country.Mexico
    """
    """

    Micronesia: ... = PySide.QtCore.QLocale.Country.Micronesia
    """
    """

    Moldavian: ... = PySide.QtCore.QLocale.Language.Moldavian
    """
    """

    Moldova: ... = PySide.QtCore.QLocale.Country.Moldova
    """
    """

    Monaco: ... = PySide.QtCore.QLocale.Country.Monaco
    """
    """

    Mongolia: ... = PySide.QtCore.QLocale.Country.Mongolia
    """
    """

    Mongolian: ... = PySide.QtCore.QLocale.Language.Mongolian
    """
    """

    MongolianScript: ... = PySide.QtCore.QLocale.Script.MongolianScript
    """
    """

    Montenegro: ... = PySide.QtCore.QLocale.Country.Montenegro
    """
    """

    Montserrat: ... = PySide.QtCore.QLocale.Country.Montserrat
    """
    """

    Morisyen: ... = PySide.QtCore.QLocale.Language.Morisyen
    """
    """

    Morocco: ... = PySide.QtCore.QLocale.Country.Morocco
    """
    """

    Mozambique: ... = PySide.QtCore.QLocale.Country.Mozambique
    """
    """

    Mundang: ... = PySide.QtCore.QLocale.Language.Mundang
    """
    """

    Myanmar: ... = PySide.QtCore.QLocale.Country.Myanmar
    """
    """

    Nama: ... = PySide.QtCore.QLocale.Language.Nama
    """
    """

    Namibia: ... = PySide.QtCore.QLocale.Country.Namibia
    """
    """

    NarrowFormat: ... = PySide.QtCore.QLocale.FormatType.NarrowFormat
    """
    """

    NauruCountry: ... = PySide.QtCore.QLocale.Country.NauruCountry
    """
    """

    NauruLanguage: ... = PySide.QtCore.QLocale.Language.NauruLanguage
    """
    """

    Nepal: ... = PySide.QtCore.QLocale.Country.Nepal
    """
    """

    Nepali: ... = PySide.QtCore.QLocale.Language.Nepali
    """
    """

    Netherlands: ... = PySide.QtCore.QLocale.Country.Netherlands
    """
    """

    NetherlandsAntilles: ...
    """
    """

    NewCaledonia: ... = PySide.QtCore.QLocale.Country.NewCaledonia
    """
    """

    NewZealand: ... = PySide.QtCore.QLocale.Country.NewZealand
    """
    """

    Nicaragua: ... = PySide.QtCore.QLocale.Country.Nicaragua
    """
    """

    Niger: ... = PySide.QtCore.QLocale.Country.Niger
    """
    """

    Nigeria: ... = PySide.QtCore.QLocale.Country.Nigeria
    """
    """

    Niue: ... = PySide.QtCore.QLocale.Country.Niue
    """
    """

    NorfolkIsland: ... = PySide.QtCore.QLocale.Country.NorfolkIsland
    """
    """

    NorthNdebele: ... = PySide.QtCore.QLocale.Language.NorthNdebele
    """
    """

    NorthernMarianaIslands: ...
    """
    """

    NorthernSami: ... = PySide.QtCore.QLocale.Language.NorthernSami
    """
    """

    NorthernSotho: ... = PySide.QtCore.QLocale.Language.NorthernSotho
    """
    """

    Norway: ... = PySide.QtCore.QLocale.Country.Norway
    """
    """

    Norwegian: ... = PySide.QtCore.QLocale.Language.Norwegian
    """
    """

    NorwegianBokmal: ... = PySide.QtCore.QLocale.Language.NorwegianBokmal
    """
    """

    NorwegianNynorsk: ... = PySide.QtCore.QLocale.Language.NorwegianNynorsk
    """
    """

    Nuer: ... = PySide.QtCore.QLocale.Language.Nuer
    """
    """

    NumberOption: ...
    """
    """

    NumberOptions: ...
    """
    """

    Nyankole: ... = PySide.QtCore.QLocale.Language.Nyankole
    """
    """

    Nynorsk: ... = PySide.QtCore.QLocale.Language.Nynorsk
    """
    """

    Occitan: ... = PySide.QtCore.QLocale.Language.Occitan
    """
    """

    Oman: ... = PySide.QtCore.QLocale.Country.Oman
    """
    """

    OmitGroupSeparator: ...
    """
    """

    Oriya: ... = PySide.QtCore.QLocale.Language.Oriya
    """
    """

    Pakistan: ... = PySide.QtCore.QLocale.Country.Pakistan
    """
    """

    Palau: ... = PySide.QtCore.QLocale.Country.Palau
    """
    """

    PalestinianTerritory: ...
    """
    """

    Panama: ... = PySide.QtCore.QLocale.Country.Panama
    """
    """

    PapuaNewGuinea: ... = PySide.QtCore.QLocale.Country.PapuaNewGuinea
    """
    """

    Paraguay: ... = PySide.QtCore.QLocale.Country.Paraguay
    """
    """

    Pashto: ... = PySide.QtCore.QLocale.Language.Pashto
    """
    """

    PeoplesRepublicOfCongo: ...
    """
    """

    Persian: ... = PySide.QtCore.QLocale.Language.Persian
    """
    """

    Peru: ... = PySide.QtCore.QLocale.Country.Peru
    """
    """

    Philippines: ... = PySide.QtCore.QLocale.Country.Philippines
    """
    """

    Pitcairn: ... = PySide.QtCore.QLocale.Country.Pitcairn
    """
    """

    Poland: ... = PySide.QtCore.QLocale.Country.Poland
    """
    """

    Polish: ... = PySide.QtCore.QLocale.Language.Polish
    """
    """

    Portugal: ... = PySide.QtCore.QLocale.Country.Portugal
    """
    """

    Portuguese: ... = PySide.QtCore.QLocale.Language.Portuguese
    """
    """

    PuertoRico: ... = PySide.QtCore.QLocale.Country.PuertoRico
    """
    """

    Punjabi: ... = PySide.QtCore.QLocale.Language.Punjabi
    """
    """

    Qatar: ... = PySide.QtCore.QLocale.Country.Qatar
    """
    """

    Quechua: ... = PySide.QtCore.QLocale.Language.Quechua
    """
    """

    QuotationStyle: ...
    """
    """

    RejectGroupSeparator: ...
    """
    """

    RepublicOfKorea: ... = PySide.QtCore.QLocale.Country.RepublicOfKorea
    """
    """

    Reunion: ... = PySide.QtCore.QLocale.Country.Reunion
    """
    """

    RhaetoRomance: ... = PySide.QtCore.QLocale.Language.RhaetoRomance
    """
    """

    Romania: ... = PySide.QtCore.QLocale.Country.Romania
    """
    """

    Romanian: ... = PySide.QtCore.QLocale.Language.Romanian
    """
    """

    Rombo: ... = PySide.QtCore.QLocale.Language.Rombo
    """
    """

    Rundi: ... = PySide.QtCore.QLocale.Language.Rundi
    """
    """

    Russian: ... = PySide.QtCore.QLocale.Language.Russian
    """
    """

    RussianFederation: ... = PySide.QtCore.QLocale.Country.RussianFederation
    """
    """

    Rwa: ... = PySide.QtCore.QLocale.Language.Rwa
    """
    """

    Rwanda: ... = PySide.QtCore.QLocale.Country.Rwanda
    """
    """

    Saho: ... = PySide.QtCore.QLocale.Language.Saho
    """
    """

    SaintBarthelemy: ... = PySide.QtCore.QLocale.Country.SaintBarthelemy
    """
    """

    SaintKittsAndNevis: ... = PySide.QtCore.QLocale.Country.SaintKittsAndNevis
    """
    """

    SaintMartin: ... = PySide.QtCore.QLocale.Country.SaintMartin
    """
    """

    Sakha: ... = PySide.QtCore.QLocale.Language.Sakha
    """
    """

    Samburu: ... = PySide.QtCore.QLocale.Language.Samburu
    """
    """

    Samoa: ... = PySide.QtCore.QLocale.Country.Samoa
    """
    """

    Samoan: ... = PySide.QtCore.QLocale.Language.Samoan
    """
    """

    SanMarino: ... = PySide.QtCore.QLocale.Country.SanMarino
    """
    """

    Sangho: ... = PySide.QtCore.QLocale.Language.Sangho
    """
    """

    Sangu: ... = PySide.QtCore.QLocale.Language.Sangu
    """
    """

    Sanskrit: ... = PySide.QtCore.QLocale.Language.Sanskrit
    """
    """

    SaoTomeAndPrincipe: ... = PySide.QtCore.QLocale.Country.SaoTomeAndPrincipe
    """
    """

    SaudiArabia: ... = PySide.QtCore.QLocale.Country.SaudiArabia
    """
    """

    Script: ...
    """
    """

    Sena: ... = PySide.QtCore.QLocale.Language.Sena
    """
    """

    Senegal: ... = PySide.QtCore.QLocale.Country.Senegal
    """
    """

    Serbia: ... = PySide.QtCore.QLocale.Country.Serbia
    """
    """

    SerbiaAndMontenegro: ...
    """
    """

    Serbian: ... = PySide.QtCore.QLocale.Language.Serbian
    """
    """

    SerboCroatian: ... = PySide.QtCore.QLocale.Language.SerboCroatian
    """
    """

    Sesotho: ... = PySide.QtCore.QLocale.Language.Sesotho
    """
    """

    Setswana: ... = PySide.QtCore.QLocale.Language.Setswana
    """
    """

    Seychelles: ... = PySide.QtCore.QLocale.Country.Seychelles
    """
    """

    Shambala: ... = PySide.QtCore.QLocale.Language.Shambala
    """
    """

    Shona: ... = PySide.QtCore.QLocale.Language.Shona
    """
    """

    ShortFormat: ... = PySide.QtCore.QLocale.FormatType.ShortFormat
    """
    """

    SichuanYi: ... = PySide.QtCore.QLocale.Language.SichuanYi
    """
    """

    Sidamo: ... = PySide.QtCore.QLocale.Language.Sidamo
    """
    """

    SierraLeone: ... = PySide.QtCore.QLocale.Country.SierraLeone
    """
    """

    SimplifiedChineseScript: ...
    """
    """

    SimplifiedHanScript: ... = PySide.QtCore.QLocale.Script.SimplifiedHanScript
    """
    """

    Sindhi: ... = PySide.QtCore.QLocale.Language.Sindhi
    """
    """

    Singapore: ... = PySide.QtCore.QLocale.Country.Singapore
    """
    """

    Singhalese: ... = PySide.QtCore.QLocale.Language.Singhalese
    """
    """

    Siswati: ... = PySide.QtCore.QLocale.Language.Siswati
    """
    """

    Slovak: ... = PySide.QtCore.QLocale.Language.Slovak
    """
    """

    Slovakia: ... = PySide.QtCore.QLocale.Country.Slovakia
    """
    """

    Slovenia: ... = PySide.QtCore.QLocale.Country.Slovenia
    """
    """

    Slovenian: ... = PySide.QtCore.QLocale.Language.Slovenian
    """
    """

    Soga: ... = PySide.QtCore.QLocale.Language.Soga
    """
    """

    SolomonIslands: ... = PySide.QtCore.QLocale.Country.SolomonIslands
    """
    """

    Somali: ... = PySide.QtCore.QLocale.Language.Somali
    """
    """

    Somalia: ... = PySide.QtCore.QLocale.Country.Somalia
    """
    """

    SouthAfrica: ... = PySide.QtCore.QLocale.Country.SouthAfrica
    """
    """

    SouthGeorgiaAndTheSouthSandwichIslands: ...
    """
    """

    SouthNdebele: ... = PySide.QtCore.QLocale.Language.SouthNdebele
    """
    """

    Spain: ... = PySide.QtCore.QLocale.Country.Spain
    """
    """

    Spanish: ... = PySide.QtCore.QLocale.Language.Spanish
    """
    """

    SriLanka: ... = PySide.QtCore.QLocale.Country.SriLanka
    """
    """

    StHelena: ... = PySide.QtCore.QLocale.Country.StHelena
    """
    """

    StLucia: ... = PySide.QtCore.QLocale.Country.StLucia
    """
    """

    StPierreAndMiquelon: ...
    """
    """

    StVincentAndTheGrenadines: ...
    """
    """

    StandardQuotation: ...
    """
    """

    Sudan: ... = PySide.QtCore.QLocale.Country.Sudan
    """
    """

    Sundanese: ... = PySide.QtCore.QLocale.Language.Sundanese
    """
    """

    Suriname: ... = PySide.QtCore.QLocale.Country.Suriname
    """
    """

    SvalbardAndJanMayenIslands: ...
    """
    """

    Swahili: ... = PySide.QtCore.QLocale.Language.Swahili
    """
    """

    Swaziland: ... = PySide.QtCore.QLocale.Country.Swaziland
    """
    """

    Sweden: ... = PySide.QtCore.QLocale.Country.Sweden
    """
    """

    Swedish: ... = PySide.QtCore.QLocale.Language.Swedish
    """
    """

    SwissGerman: ... = PySide.QtCore.QLocale.Language.SwissGerman
    """
    """

    Switzerland: ... = PySide.QtCore.QLocale.Country.Switzerland
    """
    """

    Syriac: ... = PySide.QtCore.QLocale.Language.Syriac
    """
    """

    SyrianArabRepublic: ... = PySide.QtCore.QLocale.Country.SyrianArabRepublic
    """
    """

    Tachelhit: ... = PySide.QtCore.QLocale.Language.Tachelhit
    """
    """

    Tagalog: ... = PySide.QtCore.QLocale.Language.Tagalog
    """
    """

    Taita: ... = PySide.QtCore.QLocale.Language.Taita
    """
    """

    Taiwan: ... = PySide.QtCore.QLocale.Country.Taiwan
    """
    """

    Tajik: ... = PySide.QtCore.QLocale.Language.Tajik
    """
    """

    Tajikistan: ... = PySide.QtCore.QLocale.Country.Tajikistan
    """
    """

    Tamil: ... = PySide.QtCore.QLocale.Language.Tamil
    """
    """

    Tanzania: ... = PySide.QtCore.QLocale.Country.Tanzania
    """
    """

    Taroko: ... = PySide.QtCore.QLocale.Language.Taroko
    """
    """

    Tasawaq: ... = PySide.QtCore.QLocale.Language.Tasawaq
    """
    """

    Tatar: ... = PySide.QtCore.QLocale.Language.Tatar
    """
    """

    Telugu: ... = PySide.QtCore.QLocale.Language.Telugu
    """
    """

    Teso: ... = PySide.QtCore.QLocale.Language.Teso
    """
    """

    Thai: ... = PySide.QtCore.QLocale.Language.Thai
    """
    """

    Thailand: ... = PySide.QtCore.QLocale.Country.Thailand
    """
    """

    Tibetan: ... = PySide.QtCore.QLocale.Language.Tibetan
    """
    """

    TifinaghScript: ... = PySide.QtCore.QLocale.Script.TifinaghScript
    """
    """

    Tigre: ... = PySide.QtCore.QLocale.Language.Tigre
    """
    """

    Tigrinya: ... = PySide.QtCore.QLocale.Language.Tigrinya
    """
    """

    Togo: ... = PySide.QtCore.QLocale.Country.Togo
    """
    """

    Tokelau: ... = PySide.QtCore.QLocale.Country.Tokelau
    """
    """

    TongaCountry: ... = PySide.QtCore.QLocale.Country.TongaCountry
    """
    """

    TongaLanguage: ... = PySide.QtCore.QLocale.Language.TongaLanguage
    """
    """

    TraditionalChineseScript: ...
    """
    """

    TraditionalHanScript: ...
    """
    """

    TrinidadAndTobago: ... = PySide.QtCore.QLocale.Country.TrinidadAndTobago
    """
    """

    Tsonga: ... = PySide.QtCore.QLocale.Language.Tsonga
    """
    """

    Tunisia: ... = PySide.QtCore.QLocale.Country.Tunisia
    """
    """

    Turkey: ... = PySide.QtCore.QLocale.Country.Turkey
    """
    """

    Turkish: ... = PySide.QtCore.QLocale.Language.Turkish
    """
    """

    Turkmen: ... = PySide.QtCore.QLocale.Language.Turkmen
    """
    """

    Turkmenistan: ... = PySide.QtCore.QLocale.Country.Turkmenistan
    """
    """

    TurksAndCaicosIslands: ...
    """
    """

    Tuvalu: ... = PySide.QtCore.QLocale.Country.Tuvalu
    """
    """

    Twi: ... = PySide.QtCore.QLocale.Language.Twi
    """
    """

    Tyap: ... = PySide.QtCore.QLocale.Language.Tyap
    """
    """

    USVirginIslands: ... = PySide.QtCore.QLocale.Country.USVirginIslands
    """
    """

    Uganda: ... = PySide.QtCore.QLocale.Country.Uganda
    """
    """

    Uigur: ... = PySide.QtCore.QLocale.Language.Uigur
    """
    """

    Ukraine: ... = PySide.QtCore.QLocale.Country.Ukraine
    """
    """

    Ukrainian: ... = PySide.QtCore.QLocale.Language.Ukrainian
    """
    """

    UnitedArabEmirates: ... = PySide.QtCore.QLocale.Country.UnitedArabEmirates
    """
    """

    UnitedKingdom: ... = PySide.QtCore.QLocale.Country.UnitedKingdom
    """
    """

    UnitedStates: ... = PySide.QtCore.QLocale.Country.UnitedStates
    """
    """

    UnitedStatesMinorOutlyingIslands: ...
    """
    """

    Urdu: ... = PySide.QtCore.QLocale.Language.Urdu
    """
    """

    Uruguay: ... = PySide.QtCore.QLocale.Country.Uruguay
    """
    """

    Uzbek: ... = PySide.QtCore.QLocale.Language.Uzbek
    """
    """

    Uzbekistan: ... = PySide.QtCore.QLocale.Country.Uzbekistan
    """
    """

    Vai: ... = PySide.QtCore.QLocale.Language.Vai
    """
    """

    Vanuatu: ... = PySide.QtCore.QLocale.Country.Vanuatu
    """
    """

    VaticanCityState: ... = PySide.QtCore.QLocale.Country.VaticanCityState
    """
    """

    Venda: ... = PySide.QtCore.QLocale.Language.Venda
    """
    """

    Venezuela: ... = PySide.QtCore.QLocale.Country.Venezuela
    """
    """

    VietNam: ... = PySide.QtCore.QLocale.Country.VietNam
    """
    """

    Vietnamese: ... = PySide.QtCore.QLocale.Language.Vietnamese
    """
    """

    Volapuk: ... = PySide.QtCore.QLocale.Language.Volapuk
    """
    """

    Vunjo: ... = PySide.QtCore.QLocale.Language.Vunjo
    """
    """

    Walamo: ... = PySide.QtCore.QLocale.Language.Walamo
    """
    """

    WallisAndFutunaIslands: ...
    """
    """

    Walser: ... = PySide.QtCore.QLocale.Language.Walser
    """
    """

    Welsh: ... = PySide.QtCore.QLocale.Language.Welsh
    """
    """

    WesternSahara: ... = PySide.QtCore.QLocale.Country.WesternSahara
    """
    """

    Wolof: ... = PySide.QtCore.QLocale.Language.Wolof
    """
    """

    Xhosa: ... = PySide.QtCore.QLocale.Language.Xhosa
    """
    """

    Yangben: ... = PySide.QtCore.QLocale.Language.Yangben
    """
    """

    Yemen: ... = PySide.QtCore.QLocale.Country.Yemen
    """
    """

    Yiddish: ... = PySide.QtCore.QLocale.Language.Yiddish
    """
    """

    Yoruba: ... = PySide.QtCore.QLocale.Language.Yoruba
    """
    """

    Yugoslavia: ... = PySide.QtCore.QLocale.Country.Yugoslavia
    """
    """

    Zambia: ... = PySide.QtCore.QLocale.Country.Zambia
    """
    """

    Zarma: ... = PySide.QtCore.QLocale.Language.Zarma
    """
    """

    Zhuang: ... = PySide.QtCore.QLocale.Language.Zhuang
    """
    """

    Zimbabwe: ... = PySide.QtCore.QLocale.Country.Zimbabwe
    """
    """

    Zulu: ... = PySide.QtCore.QLocale.Language.Zulu
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def c(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def countriesForLanguage(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def countryToString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def languageToString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def matchingLocales(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def scriptToString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setDefault(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def system(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def amText(self, *args, **kwargs):
        """
        """
        ...

    def bcp47Name(self, *args, **kwargs):
        """
        """
        ...

    def country(self, *args, **kwargs):
        """
        """
        ...

    def createSeparatedList(self, *args, **kwargs):
        """
        """
        ...

    def currencySymbol(self, *args, **kwargs):
        """
        """
        ...

    def dateFormat(self, *args, **kwargs):
        """
        """
        ...

    def dateTimeFormat(self, *args, **kwargs):
        """
        """
        ...

    def dayName(self, *args, **kwargs):
        """
        """
        ...

    def decimalPoint(self, *args, **kwargs):
        """
        """
        ...

    def exponential(self, *args, **kwargs):
        """
        """
        ...

    def firstDayOfWeek(self, *args, **kwargs):
        """
        """
        ...

    def groupSeparator(self, *args, **kwargs):
        """
        """
        ...

    def language(self, *args, **kwargs):
        """
        """
        ...

    def measurementSystem(self, *args, **kwargs):
        """
        """
        ...

    def monthName(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def nativeCountryName(self, *args, **kwargs):
        """
        """
        ...

    def nativeLanguageName(self, *args, **kwargs):
        """
        """
        ...

    def negativeSign(self, *args, **kwargs):
        """
        """
        ...

    def numberOptions(self, *args, **kwargs):
        """
        """
        ...

    def percent(self, *args, **kwargs):
        """
        """
        ...

    def pmText(self, *args, **kwargs):
        """
        """
        ...

    def positiveSign(self, *args, **kwargs):
        """
        """
        ...

    def quoteString(self, *args, **kwargs):
        """
        """
        ...

    def script(self, *args, **kwargs):
        """
        """
        ...

    def setNumberOptions(self, *args, **kwargs):
        """
        """
        ...

    def standaloneDayName(self, *args, **kwargs):
        """
        """
        ...

    def standaloneMonthName(self, *args, **kwargs):
        """
        """
        ...

    def textDirection(self, *args, **kwargs):
        """
        """
        ...

    def timeFormat(self, *args, **kwargs):
        """
        """
        ...

    def toCurrencyString(self, *args, **kwargs):
        """
        """
        ...

    def toDate(self, *args, **kwargs):
        """
        """
        ...

    def toDateTime(self, *args, **kwargs):
        """
        """
        ...

    def toDouble(self, *args, **kwargs):
        """
        """
        ...

    def toFloat(self, *args, **kwargs):
        """
        """
        ...

    def toInt(self, *args, **kwargs):
        """
        """
        ...

    def toLongLong(self, *args, **kwargs):
        """
        """
        ...

    def toLower(self, *args, **kwargs):
        """
        """
        ...

    def toShort(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    def toTime(self, *args, **kwargs):
        """
        """
        ...

    def toUInt(self, *args, **kwargs):
        """
        """
        ...

    def toULongLong(self, *args, **kwargs):
        """
        """
        ...

    def toUShort(self, *args, **kwargs):
        """
        """
        ...

    def toUpper(self, *args, **kwargs):
        """
        """
        ...

    def uiLanguages(self, *args, **kwargs):
        """
        """
        ...

    def weekdays(self, *args, **kwargs):
        """
        """
        ...

    def zeroDigit(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMargins(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def bottom(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def left(self, *args, **kwargs):
        """
        """
        ...

    def right(self, *args, **kwargs):
        """
        """
        ...

    def setBottom(self, *args, **kwargs):
        """
        """
        ...

    def setLeft(self, *args, **kwargs):
        """
        """
        ...

    def setRight(self, *args, **kwargs):
        """
        """
        ...

    def setTop(self, *args, **kwargs):
        """
        """
        ...

    def top(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMetaClassInfo(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMetaEnum(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def isFlag(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def keyCount(self, *args, **kwargs):
        """
        """
        ...

    def keyToValue(self, *args, **kwargs):
        """
        """
        ...

    def keysToValue(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def scope(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    def valueToKey(self, *args, **kwargs):
        """
        """
        ...

    def valueToKeys(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMetaMethod(Shiboken.Object):
    Access: ...
    """
    """

    Constructor: ... = PySide.QtCore.QMetaMethod.MethodType.Constructor
    """
    """

    Method: ... = PySide.QtCore.QMetaMethod.MethodType.Method
    """
    """

    MethodType: ...
    """
    """

    Private: ... = PySide.QtCore.QMetaMethod.Access.Private
    """
    """

    Protected: ... = PySide.QtCore.QMetaMethod.Access.Protected
    """
    """

    Public: ... = PySide.QtCore.QMetaMethod.Access.Public
    """
    """

    Signal: ... = PySide.QtCore.QMetaMethod.MethodType.Signal
    """
    """

    Slot: ... = PySide.QtCore.QMetaMethod.MethodType.Slot
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def access(self, *args, **kwargs):
        """
        """
        ...

    def enclosingMetaObject(self, *args, **kwargs):
        """
        """
        ...

    def invoke(self, *args, **kwargs):
        """
        """
        ...

    def methodIndex(self, *args, **kwargs):
        """
        """
        ...

    def methodType(self, *args, **kwargs):
        """
        """
        ...

    def parameterNames(self, *args, **kwargs):
        """
        """
        ...

    def parameterTypes(self, *args, **kwargs):
        """
        """
        ...

    def revision(self, *args, **kwargs):
        """
        """
        ...

    def signature(self, *args, **kwargs):
        """
        """
        ...

    def tag(self, *args, **kwargs):
        """
        """
        ...

    def typeName(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMetaObject(Shiboken.Object):
    Call: ...
    """
    """

    CreateInstance: ... = PySide.QtCore.QMetaObject.Call.CreateInstance
    """
    """

    InvokeMetaMethod: ... = PySide.QtCore.QMetaObject.Call.InvokeMetaMethod
    """
    """

    QueryPropertyDesignable: ...
    """
    """

    QueryPropertyEditable: ...
    """
    """

    QueryPropertyScriptable: ...
    """
    """

    QueryPropertyStored: ...
    """
    """

    QueryPropertyUser: ... = PySide.QtCore.QMetaObject.Call.QueryPropertyUser
    """
    """

    ReadProperty: ... = PySide.QtCore.QMetaObject.Call.ReadProperty
    """
    """

    ResetProperty: ... = PySide.QtCore.QMetaObject.Call.ResetProperty
    """
    """

    WriteProperty: ... = PySide.QtCore.QMetaObject.Call.WriteProperty
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def checkConnectArgs(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def connectSlotsByName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def disconnect(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def invokeMethod(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def normalizedSignature(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def normalizedType(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def cast(self, *args, **kwargs):
        """
        """
        ...

    def classInfo(self, *args, **kwargs):
        """
        """
        ...

    def classInfoCount(self, *args, **kwargs):
        """
        """
        ...

    def classInfoOffset(self, *args, **kwargs):
        """
        """
        ...

    def className(self, *args, **kwargs):
        """
        """
        ...

    def constructor(self, *args, **kwargs):
        """
        """
        ...

    def constructorCount(self, *args, **kwargs):
        """
        """
        ...

    def enumerator(self, *args, **kwargs):
        """
        """
        ...

    def enumeratorCount(self, *args, **kwargs):
        """
        """
        ...

    def enumeratorOffset(self, *args, **kwargs):
        """
        """
        ...

    def indexOfClassInfo(self, *args, **kwargs):
        """
        """
        ...

    def indexOfConstructor(self, *args, **kwargs):
        """
        """
        ...

    def indexOfEnumerator(self, *args, **kwargs):
        """
        """
        ...

    def indexOfMethod(self, *args, **kwargs):
        """
        """
        ...

    def indexOfProperty(self, *args, **kwargs):
        """
        """
        ...

    def indexOfSignal(self, *args, **kwargs):
        """
        """
        ...

    def indexOfSlot(self, *args, **kwargs):
        """
        """
        ...

    def method(self, *args, **kwargs):
        """
        """
        ...

    def methodCount(self, *args, **kwargs):
        """
        """
        ...

    def methodOffset(self, *args, **kwargs):
        """
        """
        ...

    def newInstance(self, *args, **kwargs):
        """
        """
        ...

    def property(self, *args, **kwargs):
        """
        """
        ...

    def propertyCount(self, *args, **kwargs):
        """
        """
        ...

    def propertyOffset(self, *args, **kwargs):
        """
        """
        ...

    def superClass(self, *args, **kwargs):
        """
        """
        ...

    def userProperty(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMetaProperty(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def enumerator(self, *args, **kwargs):
        """
        """
        ...

    def hasNotifySignal(self, *args, **kwargs):
        """
        """
        ...

    def hasStdCppSet(self, *args, **kwargs):
        """
        """
        ...

    def isConstant(self, *args, **kwargs):
        """
        """
        ...

    def isDesignable(self, *args, **kwargs):
        """
        """
        ...

    def isEditable(self, *args, **kwargs):
        """
        """
        ...

    def isEnumType(self, *args, **kwargs):
        """
        """
        ...

    def isFinal(self, *args, **kwargs):
        """
        """
        ...

    def isFlagType(self, *args, **kwargs):
        """
        """
        ...

    def isReadable(self, *args, **kwargs):
        """
        """
        ...

    def isResettable(self, *args, **kwargs):
        """
        """
        ...

    def isScriptable(self, *args, **kwargs):
        """
        """
        ...

    def isStored(self, *args, **kwargs):
        """
        """
        ...

    def isUser(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def isWritable(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def notifySignal(self, *args, **kwargs):
        """
        """
        ...

    def notifySignalIndex(self, *args, **kwargs):
        """
        """
        ...

    def propertyIndex(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def revision(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def typeName(self, *args, **kwargs):
        """
        """
        ...

    def userType(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMimeData(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def colorData(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def formats(self, *args, **kwargs):
        """
        """
        ...

    def hasColor(self, *args, **kwargs):
        """
        """
        ...

    def hasFormat(self, *args, **kwargs):
        """
        """
        ...

    def hasHtml(self, *args, **kwargs):
        """
        """
        ...

    def hasImage(self, *args, **kwargs):
        """
        """
        ...

    def hasText(self, *args, **kwargs):
        """
        """
        ...

    def hasUrls(self, *args, **kwargs):
        """
        """
        ...

    def html(self, *args, **kwargs):
        """
        """
        ...

    def imageData(self, *args, **kwargs):
        """
        """
        ...

    def removeFormat(self, *args, **kwargs):
        """
        """
        ...

    def retrieveData(self, *args, **kwargs):
        """
        """
        ...

    def setColorData(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setHtml(self, *args, **kwargs):
        """
        """
        ...

    def setImageData(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setUrls(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def urls(self, *args, **kwargs):
        """
        """
        ...

    ...

class QModelIndex(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def child(self, *args, **kwargs):
        """
        """
        ...

    def column(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def internalId(self, *args, **kwargs):
        """
        """
        ...

    def internalPointer(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def sibling(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMutex(Shiboken.Object):
    NonRecursive: ... = PySide.QtCore.QMutex.RecursionMode.NonRecursive
    """
    """

    RecursionMode: ...
    """
    """

    Recursive: ... = PySide.QtCore.QMutex.RecursionMode.Recursive
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def lock(self, *args, **kwargs):
        """
        """
        ...

    def lockInline(self, *args, **kwargs):
        """
        """
        ...

    def tryLock(self, *args, **kwargs):
        """
        """
        ...

    def tryLockInline(self, *args, **kwargs):
        """
        """
        ...

    def unlock(self, *args, **kwargs):
        """
        """
        ...

    def unlockInline(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMutexLocker(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __enter__(self, *args, **kwargs):
        """
        """
        ...

    def __exit__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def mutex(self, *args, **kwargs):
        """
        """
        ...

    def relock(self, *args, **kwargs):
        """
        """
        ...

    def unlock(self, *args, **kwargs):
        """
        """
        ...

    ...

class QObject(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    destroyed: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def connect(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def disconnect(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def registerUserData(*args, **kwargs):
        """
        """
        ...

    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...

    def blockSignals(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def children(self, *args, **kwargs):
        """
        """
        ...

    def connectNotify(self, *args, **kwargs):
        """
        """
        ...

    def customEvent(self, *args, **kwargs):
        """
        """
        ...

    def deleteLater(self, *args, **kwargs):
        """
        """
        ...

    def disconnectNotify(self, *args, **kwargs):
        """
        """
        ...

    def dumpObjectInfo(self, *args, **kwargs):
        """
        """
        ...

    def dumpObjectTree(self, *args, **kwargs):
        """
        """
        ...

    def dynamicPropertyNames(self, *args, **kwargs):
        """
        """
        ...

    def emit(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    T = typing.TypeVar("T", bound=type)
    def findChild(self, type: typing.Type[T], name:typing.Text ="", / ) -> typing.Optional[T]:
        """
        """
        ...

    def findChildren(self, *args, **kwargs):
        """
        """
        ...

    def inherits(self, *args, **kwargs):
        """
        """
        ...

    def installEventFilter(self, *args, **kwargs):
        """
        """
        ...

    def isWidgetType(self, *args, **kwargs):
        """
        """
        ...

    def killTimer(self, *args, **kwargs):
        """
        """
        ...

    def metaObject(self, *args, **kwargs):
        """
        """
        ...

    def moveToThread(self, *args, **kwargs):
        """
        """
        ...

    def objectName(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def property(self, *args, **kwargs):
        """
        """
        ...

    def receivers(self, *args, **kwargs):
        """
        """
        ...

    def removeEventFilter(self, *args, **kwargs):
        """
        """
        ...

    def sender(self, *args, **kwargs):
        """
        """
        ...

    def senderSignalIndex(self, *args, **kwargs):
        """
        """
        ...

    def setObjectName(self, name: typing.Text) -> None:
        """
        """
        ...

    def setParent(self, *args, **kwargs):
        """
        """
        ...

    def setProperty(self, *args, **kwargs):
        """
        """
        ...

    def signalsBlocked(self, *args, **kwargs):
        """
        """
        ...

    def startTimer(self, *args, **kwargs):
        """
        """
        ...

    def thread(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def tr(self, *args, **kwargs):
        """
        """
        ...

    def trUtf8(self, *args, **kwargs):
        """
        """
        ...

    ...

class QParallelAnimationGroup(QAnimationGroup):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def duration(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def updateCurrentTime(self, *args, **kwargs):
        """
        """
        ...

    def updateDirection(self, *args, **kwargs):
        """
        """
        ...

    def updateState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPauseAnimation(QAbstractAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def duration(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def setDuration(self, *args, **kwargs):
        """
        """
        ...

    def updateCurrentTime(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPersistentModelIndex(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def child(self, *args, **kwargs):
        """
        """
        ...

    def column(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def internalId(self, *args, **kwargs):
        """
        """
        ...

    def internalPointer(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def sibling(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPluginLoader(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def staticInstances(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def instance(self, *args, **kwargs):
        """
        """
        ...

    def isLoaded(self, *args, **kwargs):
        """
        """
        ...

    def load(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def unload(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPoint(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def manhattanLength(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPointF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def manhattanLength(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def toPoint(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QProcess(QIODevice):
    CrashExit: ... = PySide.QtCore.QProcess.ExitStatus.CrashExit
    """
    """

    Crashed: ... = PySide.QtCore.QProcess.ProcessError.Crashed
    """
    """

    ExitStatus: ...
    """
    """

    FailedToStart: ... = PySide.QtCore.QProcess.ProcessError.FailedToStart
    """
    """

    ForwardedChannels: ...
    """
    """

    MergedChannels: ...
    """
    """

    NormalExit: ... = PySide.QtCore.QProcess.ExitStatus.NormalExit
    """
    """

    NotRunning: ... = PySide.QtCore.QProcess.ProcessState.NotRunning
    """
    """

    ProcessChannel: ...
    """
    """

    ProcessChannelMode: ...
    """
    """

    ProcessError: ...
    """
    """

    ProcessState: ...
    """
    """

    ReadError: ... = PySide.QtCore.QProcess.ProcessError.ReadError
    """
    """

    Running: ... = PySide.QtCore.QProcess.ProcessState.Running
    """
    """

    SeparateChannels: ...
    """
    """

    StandardError: ... = PySide.QtCore.QProcess.ProcessChannel.StandardError
    """
    """

    StandardOutput: ... = PySide.QtCore.QProcess.ProcessChannel.StandardOutput
    """
    """

    Starting: ... = PySide.QtCore.QProcess.ProcessState.Starting
    """
    """

    Timedout: ... = PySide.QtCore.QProcess.ProcessError.Timedout
    """
    """

    UnknownError: ... = PySide.QtCore.QProcess.ProcessError.UnknownError
    """
    """

    WriteError: ... = PySide.QtCore.QProcess.ProcessError.WriteError
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    error: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    readyReadStandardError: ...
    """
    Signal
    """

    readyReadStandardOutput: ...
    """
    Signal
    """

    started: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def execute(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def startDetached(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def systemEnvironment(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def bytesAvailable(self, *args, **kwargs):
        """
        """
        ...

    def bytesToWrite(self, *args, **kwargs):
        """
        """
        ...

    def canReadLine(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def closeReadChannel(self, *args, **kwargs):
        """
        """
        ...

    def closeWriteChannel(self, *args, **kwargs):
        """
        """
        ...

    def environment(self, *args, **kwargs):
        """
        """
        ...

    def exitCode(self, *args, **kwargs):
        """
        """
        ...

    def exitStatus(self, *args, **kwargs):
        """
        """
        ...

    def isSequential(self, *args, **kwargs):
        """
        """
        ...

    def kill(self, *args, **kwargs):
        """
        """
        ...

    def pid(self, *args, **kwargs):
        """
        """
        ...

    def processChannelMode(self, *args, **kwargs):
        """
        """
        ...

    def processEnvironment(self, *args, **kwargs):
        """
        """
        ...

    def readAllStandardError(self, *args, **kwargs):
        """
        """
        ...

    def readAllStandardOutput(self, *args, **kwargs):
        """
        """
        ...

    def readChannel(self, *args, **kwargs):
        """
        """
        ...

    def readData(self, *args, **kwargs):
        """
        """
        ...

    def setEnvironment(self, *args, **kwargs):
        """
        """
        ...

    def setProcessChannelMode(self, *args, **kwargs):
        """
        """
        ...

    def setProcessEnvironment(self, *args, **kwargs):
        """
        """
        ...

    def setProcessState(self, *args, **kwargs):
        """
        """
        ...

    def setReadChannel(self, *args, **kwargs):
        """
        """
        ...

    def setStandardErrorFile(self, *args, **kwargs):
        """
        """
        ...

    def setStandardInputFile(self, *args, **kwargs):
        """
        """
        ...

    def setStandardOutputFile(self, *args, **kwargs):
        """
        """
        ...

    def setStandardOutputProcess(self, *args, **kwargs):
        """
        """
        ...

    def setWorkingDirectory(self, *args, **kwargs):
        """
        """
        ...

    def setupChildProcess(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def state(self, *args, **kwargs):
        """
        """
        ...

    def terminate(self, *args, **kwargs):
        """
        """
        ...

    def waitForBytesWritten(self, *args, **kwargs):
        """
        """
        ...

    def waitForFinished(self, *args, **kwargs):
        """
        """
        ...

    def waitForReadyRead(self, *args, **kwargs):
        """
        """
        ...

    def waitForStarted(self, *args, **kwargs):
        """
        """
        ...

    def workingDirectory(self, *args, **kwargs):
        """
        """
        ...

    def writeData(self, *args, **kwargs):
        """
        """
        ...

    ...

class QProcessEnvironment(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def systemEnvironment(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def insert(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def keys(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def toStringList(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPropertyAnimation(QVariantAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def propertyName(self, *args, **kwargs):
        """
        """
        ...

    def setPropertyName(self, *args, **kwargs):
        """
        """
        ...

    def setTargetObject(self, *args, **kwargs):
        """
        """
        ...

    def targetObject(self, *args, **kwargs):
        """
        """
        ...

    def updateCurrentValue(self, *args, **kwargs):
        """
        """
        ...

    def updateState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QReadLocker(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __enter__(self, *args, **kwargs):
        """
        """
        ...

    def __exit__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def readWriteLock(self, *args, **kwargs):
        """
        """
        ...

    def relock(self, *args, **kwargs):
        """
        """
        ...

    def unlock(self, *args, **kwargs):
        """
        """
        ...

    ...

class QReadWriteLock(Shiboken.Object):
    NonRecursive: ... = PySide.QtCore.QReadWriteLock.RecursionMode.NonRecursive
    """
    """

    RecursionMode: ...
    """
    """

    Recursive: ... = PySide.QtCore.QReadWriteLock.RecursionMode.Recursive
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def lockForRead(self, *args, **kwargs):
        """
        """
        ...

    def lockForWrite(self, *args, **kwargs):
        """
        """
        ...

    def tryLockForRead(self, *args, **kwargs):
        """
        """
        ...

    def tryLockForWrite(self, *args, **kwargs):
        """
        """
        ...

    def unlock(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRect(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __iand__(self, *args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def adjust(self, *args, **kwargs):
        """
        """
        ...

    def adjusted(self, *args, **kwargs):
        """
        """
        ...

    def bottom(self, *args, **kwargs):
        """
        """
        ...

    def bottomLeft(self, *args, **kwargs):
        """
        """
        ...

    def bottomRight(self, *args, **kwargs):
        """
        """
        ...

    def center(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def getCoords(self, *args, **kwargs):
        """
        """
        ...

    def getRect(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def intersect(self, *args, **kwargs):
        """
        """
        ...

    def intersected(self, *args, **kwargs):
        """
        """
        ...

    def intersects(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def left(self, *args, **kwargs):
        """
        """
        ...

    def moveBottom(self, *args, **kwargs):
        """
        """
        ...

    def moveBottomLeft(self, *args, **kwargs):
        """
        """
        ...

    def moveBottomRight(self, *args, **kwargs):
        """
        """
        ...

    def moveCenter(self, *args, **kwargs):
        """
        """
        ...

    def moveLeft(self, *args, **kwargs):
        """
        """
        ...

    def moveRight(self, *args, **kwargs):
        """
        """
        ...

    def moveTo(self, *args, **kwargs):
        """
        """
        ...

    def moveTop(self, *args, **kwargs):
        """
        """
        ...

    def moveTopLeft(self, *args, **kwargs):
        """
        """
        ...

    def moveTopRight(self, *args, **kwargs):
        """
        """
        ...

    def normalized(self, *args, **kwargs):
        """
        """
        ...

    def right(self, *args, **kwargs):
        """
        """
        ...

    def setBottom(self, *args, **kwargs):
        """
        """
        ...

    def setBottomLeft(self, *args, **kwargs):
        """
        """
        ...

    def setBottomRight(self, *args, **kwargs):
        """
        """
        ...

    def setCoords(self, *args, **kwargs):
        """
        """
        ...

    def setHeight(self, *args, **kwargs):
        """
        """
        ...

    def setLeft(self, *args, **kwargs):
        """
        """
        ...

    def setRect(self, *args, **kwargs):
        """
        """
        ...

    def setRight(self, *args, **kwargs):
        """
        """
        ...

    def setSize(self, *args, **kwargs):
        """
        """
        ...

    def setTop(self, *args, **kwargs):
        """
        """
        ...

    def setTopLeft(self, *args, **kwargs):
        """
        """
        ...

    def setTopRight(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def top(self, *args, **kwargs):
        """
        """
        ...

    def topLeft(self, *args, **kwargs):
        """
        """
        ...

    def topRight(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def unite(self, *args, **kwargs):
        """
        """
        ...

    def united(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRectF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iand__(self, *args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def adjust(self, *args, **kwargs):
        """
        """
        ...

    def adjusted(self, *args, **kwargs):
        """
        """
        ...

    def bottom(self, *args, **kwargs):
        """
        """
        ...

    def bottomLeft(self, *args, **kwargs):
        """
        """
        ...

    def bottomRight(self, *args, **kwargs):
        """
        """
        ...

    def center(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def getCoords(self, *args, **kwargs):
        """
        """
        ...

    def getRect(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def intersect(self, *args, **kwargs):
        """
        """
        ...

    def intersected(self, *args, **kwargs):
        """
        """
        ...

    def intersects(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def left(self, *args, **kwargs):
        """
        """
        ...

    def moveBottom(self, *args, **kwargs):
        """
        """
        ...

    def moveBottomLeft(self, *args, **kwargs):
        """
        """
        ...

    def moveBottomRight(self, *args, **kwargs):
        """
        """
        ...

    def moveCenter(self, *args, **kwargs):
        """
        """
        ...

    def moveLeft(self, *args, **kwargs):
        """
        """
        ...

    def moveRight(self, *args, **kwargs):
        """
        """
        ...

    def moveTo(self, *args, **kwargs):
        """
        """
        ...

    def moveTop(self, *args, **kwargs):
        """
        """
        ...

    def moveTopLeft(self, *args, **kwargs):
        """
        """
        ...

    def moveTopRight(self, *args, **kwargs):
        """
        """
        ...

    def normalized(self, *args, **kwargs):
        """
        """
        ...

    def right(self, *args, **kwargs):
        """
        """
        ...

    def setBottom(self, *args, **kwargs):
        """
        """
        ...

    def setBottomLeft(self, *args, **kwargs):
        """
        """
        ...

    def setBottomRight(self, *args, **kwargs):
        """
        """
        ...

    def setCoords(self, *args, **kwargs):
        """
        """
        ...

    def setHeight(self, *args, **kwargs):
        """
        """
        ...

    def setLeft(self, *args, **kwargs):
        """
        """
        ...

    def setRect(self, *args, **kwargs):
        """
        """
        ...

    def setRight(self, *args, **kwargs):
        """
        """
        ...

    def setSize(self, *args, **kwargs):
        """
        """
        ...

    def setTop(self, *args, **kwargs):
        """
        """
        ...

    def setTopLeft(self, *args, **kwargs):
        """
        """
        ...

    def setTopRight(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def toAlignedRect(self, *args, **kwargs):
        """
        """
        ...

    def toRect(self, *args, **kwargs):
        """
        """
        ...

    def top(self, *args, **kwargs):
        """
        """
        ...

    def topLeft(self, *args, **kwargs):
        """
        """
        ...

    def topRight(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def unite(self, *args, **kwargs):
        """
        """
        ...

    def united(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRegExp(Shiboken.Object):
    CaretAtOffset: ... = PySide.QtCore.QRegExp.CaretMode.CaretAtOffset
    """
    """

    CaretAtZero: ... = PySide.QtCore.QRegExp.CaretMode.CaretAtZero
    """
    """

    CaretMode: ...
    """
    """

    CaretWontMatch: ... = PySide.QtCore.QRegExp.CaretMode.CaretWontMatch
    """
    """

    FixedString: ... = PySide.QtCore.QRegExp.PatternSyntax.FixedString
    """
    """

    PatternSyntax: ...
    """
    """

    RegExp: ... = PySide.QtCore.QRegExp.PatternSyntax.RegExp
    """
    """

    RegExp2: ... = PySide.QtCore.QRegExp.PatternSyntax.RegExp2
    """
    """

    W3CXmlSchema11: ... = PySide.QtCore.QRegExp.PatternSyntax.W3CXmlSchema11
    """
    """

    Wildcard: ... = PySide.QtCore.QRegExp.PatternSyntax.Wildcard
    """
    """

    WildcardUnix: ... = PySide.QtCore.QRegExp.PatternSyntax.WildcardUnix
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def escape(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def cap(self, *args, **kwargs):
        """
        """
        ...

    def captureCount(self, *args, **kwargs):
        """
        """
        ...

    def capturedTexts(self, *args, **kwargs):
        """
        """
        ...

    def caseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def exactMatch(self, *args, **kwargs):
        """
        """
        ...

    def indexIn(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isMinimal(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def lastIndexIn(self, *args, **kwargs):
        """
        """
        ...

    def matchedLength(self, *args, **kwargs):
        """
        """
        ...

    def numCaptures(self, *args, **kwargs):
        """
        """
        ...

    def pattern(self, *args, **kwargs):
        """
        """
        ...

    def patternSyntax(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def replace(self, *args, **kwargs):
        """
        """
        ...

    def setCaseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def setMinimal(self, *args, **kwargs):
        """
        """
        ...

    def setPattern(self, *args, **kwargs):
        """
        """
        ...

    def setPatternSyntax(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QResource(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def addSearchPath(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def registerResource(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def registerResourceData(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def searchPaths(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def unregisterResource(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def unregisterResourceData(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def absoluteFilePath(self, *args, **kwargs):
        """
        """
        ...

    def children(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def isCompressed(self, *args, **kwargs):
        """
        """
        ...

    def isDir(self, *args, **kwargs):
        """
        """
        ...

    def isFile(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def locale(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def setLocale(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRunnable(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoDelete(self, *args, **kwargs):
        """
        """
        ...

    def run(self, *args, **kwargs):
        """
        """
        ...

    def setAutoDelete(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSemaphore(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def acquire(self, *args, **kwargs):
        """
        """
        ...

    def available(self, *args, **kwargs):
        """
        """
        ...

    def release(self, *args, **kwargs):
        """
        """
        ...

    def tryAcquire(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSequentialAnimationGroup(QAnimationGroup):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentAnimationChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addPause(self, *args, **kwargs):
        """
        """
        ...

    def currentAnimation(self, *args, **kwargs):
        """
        """
        ...

    def duration(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def insertPause(self, *args, **kwargs):
        """
        """
        ...

    def updateCurrentTime(self, *args, **kwargs):
        """
        """
        ...

    def updateDirection(self, *args, **kwargs):
        """
        """
        ...

    def updateState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSettings(QObject):
    AccessError: ... = PySide.QtCore.QSettings.Status.AccessError
    """
    """

    CustomFormat1: ... = PySide.QtCore.QSettings.Format.CustomFormat1
    """
    """

    CustomFormat10: ... = PySide.QtCore.QSettings.Format.CustomFormat10
    """
    """

    CustomFormat11: ... = PySide.QtCore.QSettings.Format.CustomFormat11
    """
    """

    CustomFormat12: ... = PySide.QtCore.QSettings.Format.CustomFormat12
    """
    """

    CustomFormat13: ... = PySide.QtCore.QSettings.Format.CustomFormat13
    """
    """

    CustomFormat14: ... = PySide.QtCore.QSettings.Format.CustomFormat14
    """
    """

    CustomFormat15: ... = PySide.QtCore.QSettings.Format.CustomFormat15
    """
    """

    CustomFormat16: ... = PySide.QtCore.QSettings.Format.CustomFormat16
    """
    """

    CustomFormat2: ... = PySide.QtCore.QSettings.Format.CustomFormat2
    """
    """

    CustomFormat3: ... = PySide.QtCore.QSettings.Format.CustomFormat3
    """
    """

    CustomFormat4: ... = PySide.QtCore.QSettings.Format.CustomFormat4
    """
    """

    CustomFormat5: ... = PySide.QtCore.QSettings.Format.CustomFormat5
    """
    """

    CustomFormat6: ... = PySide.QtCore.QSettings.Format.CustomFormat6
    """
    """

    CustomFormat7: ... = PySide.QtCore.QSettings.Format.CustomFormat7
    """
    """

    CustomFormat8: ... = PySide.QtCore.QSettings.Format.CustomFormat8
    """
    """

    CustomFormat9: ... = PySide.QtCore.QSettings.Format.CustomFormat9
    """
    """

    Format: ...
    """
    """

    FormatError: ... = PySide.QtCore.QSettings.Status.FormatError
    """
    """

    IniFormat: ... = PySide.QtCore.QSettings.Format.IniFormat
    """
    """

    InvalidFormat: ... = PySide.QtCore.QSettings.Format.InvalidFormat
    """
    """

    NativeFormat: ... = PySide.QtCore.QSettings.Format.NativeFormat
    """
    """

    NoError: ... = PySide.QtCore.QSettings.Status.NoError
    """
    """

    Scope: ...
    """
    """

    Status: ...
    """
    """

    SystemScope: ... = PySide.QtCore.QSettings.Scope.SystemScope
    """
    """

    UserScope: ... = PySide.QtCore.QSettings.Scope.UserScope
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def defaultFormat(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setDefaultFormat(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setPath(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def allKeys(self, *args, **kwargs):
        """
        """
        ...

    def applicationName(self, *args, **kwargs):
        """
        """
        ...

    def beginGroup(self, *args, **kwargs):
        """
        """
        ...

    def beginReadArray(self, *args, **kwargs):
        """
        """
        ...

    def beginWriteArray(self, *args, **kwargs):
        """
        """
        ...

    def childGroups(self, *args, **kwargs):
        """
        """
        ...

    def childKeys(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def endArray(self, *args, **kwargs):
        """
        """
        ...

    def endGroup(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def fallbacksEnabled(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def group(self, *args, **kwargs):
        """
        """
        ...

    def iniCodec(self, *args, **kwargs):
        """
        """
        ...

    def isWritable(self, *args, **kwargs):
        """
        """
        ...

    def organizationName(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def scope(self, *args, **kwargs):
        """
        """
        ...

    def setArrayIndex(self, *args, **kwargs):
        """
        """
        ...

    def setFallbacksEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setIniCodec(self, *args, **kwargs):
        """
        """
        ...

    def setValue(self, *args, **kwargs):
        """
        """
        ...

    def status(self, *args, **kwargs):
        """
        """
        ...

    def sync(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSignalMapper(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    mapped: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def map(self, *args, **kwargs):
        """
        """
        ...

    def mapping(self, *args, **kwargs):
        """
        """
        ...

    def removeMappings(self, *args, **kwargs):
        """
        """
        ...

    def setMapping(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSignalTransition(QAbstractTransition):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventTest(self, *args, **kwargs):
        """
        """
        ...

    def onTransition(self, *args, **kwargs):
        """
        """
        ...

    def senderObject(self, *args, **kwargs):
        """
        """
        ...

    def setSenderObject(self, *args, **kwargs):
        """
        """
        ...

    def setSignal(self, *args, **kwargs):
        """
        """
        ...

    def signal(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSize(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def boundedTo(self, *args, **kwargs):
        """
        """
        ...

    def expandedTo(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def setHeight(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def transpose(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSizeF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def boundedTo(self, *args, **kwargs):
        """
        """
        ...

    def expandedTo(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def setHeight(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def toSize(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def transpose(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSocketNotifier(QObject):
    Exception: ... = PySide.QtCore.QSocketNotifier.Type.Exception
    """
    """

    Read: ... = PySide.QtCore.QSocketNotifier.Type.Read
    """
    """

    Type: ...
    """
    """

    Write: ... = PySide.QtCore.QSocketNotifier.Type.Write
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def socket(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QState(QAbstractState):
    ChildMode: ...
    """
    """

    ExclusiveStates: ... = PySide.QtCore.QState.ChildMode.ExclusiveStates
    """
    """

    ParallelStates: ... = PySide.QtCore.QState.ChildMode.ParallelStates
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    finished: ...
    """
    Signal
    """

    propertiesAssigned: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addTransition(self, *args, **kwargs):
        """
        """
        ...

    def assignProperty(self, *args, **kwargs):
        """
        """
        ...

    def childMode(self, *args, **kwargs):
        """
        """
        ...

    def errorState(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def initialState(self, *args, **kwargs):
        """
        """
        ...

    def onEntry(self, *args, **kwargs):
        """
        """
        ...

    def onExit(self, *args, **kwargs):
        """
        """
        ...

    def removeTransition(self, *args, **kwargs):
        """
        """
        ...

    def setChildMode(self, *args, **kwargs):
        """
        """
        ...

    def setErrorState(self, *args, **kwargs):
        """
        """
        ...

    def setInitialState(self, *args, **kwargs):
        """
        """
        ...

    def transitions(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStateMachine(QState):
    DontRestoreProperties: ...
    """
    """

    Error: ...
    """
    """

    EventPriority: ...
    """
    """

    HighPriority: ... = PySide.QtCore.QStateMachine.EventPriority.HighPriority
    """
    """

    NoCommonAncestorForTransitionError: ...
    """
    """

    NoDefaultStateInHistoryStateError: ...
    """
    """

    NoError: ... = PySide.QtCore.QStateMachine.Error.NoError
    """
    """

    NoInitialStateError: ...
    """
    """

    NormalPriority: ...
    """
    """

    RestorePolicy: ...
    """
    """

    RestoreProperties: ...
    """
    """

    SignalEvent: ...
    """
    """

    WrappedEvent: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    started: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    stopped: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addDefaultAnimation(self, *args, **kwargs):
        """
        """
        ...

    def addState(self, *args, **kwargs):
        """
        """
        ...

    def beginMicrostep(self, *args, **kwargs):
        """
        """
        ...

    def beginSelectTransitions(self, *args, **kwargs):
        """
        """
        ...

    def cancelDelayedEvent(self, *args, **kwargs):
        """
        """
        ...

    def clearError(self, *args, **kwargs):
        """
        """
        ...

    def configuration(self, *args, **kwargs):
        """
        """
        ...

    def defaultAnimations(self, *args, **kwargs):
        """
        """
        ...

    def endMicrostep(self, *args, **kwargs):
        """
        """
        ...

    def endSelectTransitions(self, *args, **kwargs):
        """
        """
        ...

    def error(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def globalRestorePolicy(self, *args, **kwargs):
        """
        """
        ...

    def isAnimated(self, *args, **kwargs):
        """
        """
        ...

    def isRunning(self, *args, **kwargs):
        """
        """
        ...

    def onEntry(self, *args, **kwargs):
        """
        """
        ...

    def onExit(self, *args, **kwargs):
        """
        """
        ...

    def postDelayedEvent(self, *args, **kwargs):
        """
        """
        ...

    def postEvent(self, *args, **kwargs):
        """
        """
        ...

    def removeDefaultAnimation(self, *args, **kwargs):
        """
        """
        ...

    def removeState(self, *args, **kwargs):
        """
        """
        ...

    def setAnimated(self, *args, **kwargs):
        """
        """
        ...

    def setGlobalRestorePolicy(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def stop(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSysInfo(Shiboken.Object):
    BigEndian: ... = PySide.QtCore.QSysInfo.Endian.BigEndian
    """
    """

    ByteOrder: ... = PySide.QtCore.QSysInfo.Endian.ByteOrder
    """
    """

    Endian: ...
    """
    """

    LittleEndian: ... = PySide.QtCore.QSysInfo.Endian.LittleEndian
    """
    """

    Sizes: ...
    """
    """

    WordSize: ... = PySide.QtCore.QSysInfo.Sizes.WordSize
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QSystemLocale(Shiboken.Object):
    AMText: ... = PySide.QtCore.QSystemLocale.QueryType.AMText
    """
    """

    CountryId: ... = PySide.QtCore.QSystemLocale.QueryType.CountryId
    """
    """

    CurrencySymbol: ... = PySide.QtCore.QSystemLocale.QueryType.CurrencySymbol
    """
    """

    CurrencyToString: ...
    """
    """

    DateFormatLong: ... = PySide.QtCore.QSystemLocale.QueryType.DateFormatLong
    """
    """

    DateFormatShort: ...
    """
    """

    DateTimeFormatLong: ...
    """
    """

    DateTimeFormatShort: ...
    """
    """

    DateTimeToStringLong: ...
    """
    """

    DateTimeToStringShort: ...
    """
    """

    DateToStringLong: ...
    """
    """

    DateToStringShort: ...
    """
    """

    DayNameLong: ... = PySide.QtCore.QSystemLocale.QueryType.DayNameLong
    """
    """

    DayNameShort: ... = PySide.QtCore.QSystemLocale.QueryType.DayNameShort
    """
    """

    DecimalPoint: ... = PySide.QtCore.QSystemLocale.QueryType.DecimalPoint
    """
    """

    FirstDayOfWeek: ... = PySide.QtCore.QSystemLocale.QueryType.FirstDayOfWeek
    """
    """

    GroupSeparator: ... = PySide.QtCore.QSystemLocale.QueryType.GroupSeparator
    """
    """

    LanguageId: ... = PySide.QtCore.QSystemLocale.QueryType.LanguageId
    """
    """

    ListToSeparatedString: ...
    """
    """

    LocaleChanged: ... = PySide.QtCore.QSystemLocale.QueryType.LocaleChanged
    """
    """

    MeasurementSystem: ...
    """
    """

    MonthNameLong: ... = PySide.QtCore.QSystemLocale.QueryType.MonthNameLong
    """
    """

    MonthNameShort: ... = PySide.QtCore.QSystemLocale.QueryType.MonthNameShort
    """
    """

    NativeCountryName: ...
    """
    """

    NativeLanguageName: ...
    """
    """

    NegativeSign: ... = PySide.QtCore.QSystemLocale.QueryType.NegativeSign
    """
    """

    PMText: ... = PySide.QtCore.QSystemLocale.QueryType.PMText
    """
    """

    PositiveSign: ... = PySide.QtCore.QSystemLocale.QueryType.PositiveSign
    """
    """

    QueryType: ...
    """
    """

    ScriptId: ... = PySide.QtCore.QSystemLocale.QueryType.ScriptId
    """
    """

    StandaloneMonthNameLong: ...
    """
    """

    StandaloneMonthNameShort: ...
    """
    """

    StringToAlternateQuotation: ...
    """
    """

    StringToStandardQuotation: ...
    """
    """

    TimeFormatLong: ... = PySide.QtCore.QSystemLocale.QueryType.TimeFormatLong
    """
    """

    TimeFormatShort: ...
    """
    """

    TimeToStringLong: ...
    """
    """

    TimeToStringShort: ...
    """
    """

    UILanguages: ... = PySide.QtCore.QSystemLocale.QueryType.UILanguages
    """
    """

    Weekdays: ... = PySide.QtCore.QSystemLocale.QueryType.Weekdays
    """
    """

    ZeroDigit: ... = PySide.QtCore.QSystemLocale.QueryType.ZeroDigit
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def fallbackLocale(self, *args, **kwargs):
        """
        """
        ...

    def query(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSystemSemaphore(Shiboken.Object):
    AccessMode: ...
    """
    """

    AlreadyExists: ...
    """
    """

    Create: ... = PySide.QtCore.QSystemSemaphore.AccessMode.Create
    """
    """

    KeyError: ...
    """
    """

    NoError: ... = PySide.QtCore.QSystemSemaphore.SystemSemaphoreError.NoError
    """
    """

    NotFound: ...
    """
    """

    Open: ... = PySide.QtCore.QSystemSemaphore.AccessMode.Open
    """
    """

    OutOfResources: ...
    """
    """

    PermissionDenied: ...
    """
    """

    SystemSemaphoreError: ...
    """
    """

    UnknownError: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def acquire(self, *args, **kwargs):
        """
        """
        ...

    def error(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def release(self, *args, **kwargs):
        """
        """
        ...

    def setKey(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTemporaryFile(QFile):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def createLocalFile(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoRemove(self, *args, **kwargs):
        """
        """
        ...

    def fileEngine(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def fileTemplate(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def setAutoRemove(self, *args, **kwargs):
        """
        """
        ...

    def setFileTemplate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextBoundaryFinder(Shiboken.Object):
    BoundaryReason: ...
    """
    """

    BoundaryReasons: ...
    """
    """

    BoundaryType: ...
    """
    """

    EndWord: ... = PySide.QtCore.QTextBoundaryFinder.BoundaryReason.EndWord
    """
    """

    Grapheme: ... = PySide.QtCore.QTextBoundaryFinder.BoundaryType.Grapheme
    """
    """

    Line: ... = PySide.QtCore.QTextBoundaryFinder.BoundaryType.Line
    """
    """

    NotAtBoundary: ...
    """
    """

    Sentence: ... = PySide.QtCore.QTextBoundaryFinder.BoundaryType.Sentence
    """
    """

    StartWord: ... = PySide.QtCore.QTextBoundaryFinder.BoundaryReason.StartWord
    """
    """

    Word: ... = PySide.QtCore.QTextBoundaryFinder.BoundaryType.Word
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundaryReasons(self, *args, **kwargs):
        """
        """
        ...

    def isAtBoundary(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def setPosition(self, *args, **kwargs):
        """
        """
        ...

    def string(self, *args, **kwargs):
        """
        """
        ...

    def toEnd(self, *args, **kwargs):
        """
        """
        ...

    def toNextBoundary(self, *args, **kwargs):
        """
        """
        ...

    def toPreviousBoundary(self, *args, **kwargs):
        """
        """
        ...

    def toStart(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextCodec(Shiboken.Object):
    ConversionFlag: ...
    """
    """

    ConversionFlags: ...
    """
    """

    ConvertInvalidToNull: ...
    """
    """

    ConverterState: ...
    """
    """

    DefaultConversion: ...
    """
    """

    FreeFunction: ... = PySide.QtCore.QTextCodec.ConversionFlag.FreeFunction
    """
    """

    IgnoreHeader: ... = PySide.QtCore.QTextCodec.ConversionFlag.IgnoreHeader
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def availableCodecs(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def availableMibs(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def codecForCStrings(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def codecForHtml(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def codecForLocale(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def codecForMib(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def codecForName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def codecForTr(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def codecForUtfText(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCodecForCStrings(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCodecForLocale(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCodecForTr(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def aliases(self, *args, **kwargs):
        """
        """
        ...

    def canEncode(self, *args, **kwargs):
        """
        """
        ...

    def convertToUnicode(self, *args, **kwargs):
        """
        """
        ...

    def fromUnicode(self, *args, **kwargs):
        """
        """
        ...

    def makeDecoder(self, *args, **kwargs):
        """
        """
        ...

    def makeEncoder(self, *args, **kwargs):
        """
        """
        ...

    def mibEnum(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def toUnicode(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextDecoder(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def hasFailure(self, *args, **kwargs):
        """
        """
        ...

    def toUnicode(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextEncoder(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def fromUnicode(self, *args, **kwargs):
        """
        """
        ...

    def hasFailure(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextStream(Shiboken.Object):
    AlignAccountingStyle: ...
    """
    """

    AlignCenter: ... = PySide.QtCore.QTextStream.FieldAlignment.AlignCenter
    """
    """

    AlignLeft: ... = PySide.QtCore.QTextStream.FieldAlignment.AlignLeft
    """
    """

    AlignRight: ... = PySide.QtCore.QTextStream.FieldAlignment.AlignRight
    """
    """

    FieldAlignment: ...
    """
    """

    FixedNotation: ...
    """
    """

    ForcePoint: ... = PySide.QtCore.QTextStream.NumberFlag.ForcePoint
    """
    """

    ForceSign: ... = PySide.QtCore.QTextStream.NumberFlag.ForceSign
    """
    """

    NumberFlag: ...
    """
    """

    NumberFlags: ...
    """
    """

    Ok: ... = PySide.QtCore.QTextStream.Status.Ok
    """
    """

    ReadCorruptData: ... = PySide.QtCore.QTextStream.Status.ReadCorruptData
    """
    """

    ReadPastEnd: ... = PySide.QtCore.QTextStream.Status.ReadPastEnd
    """
    """

    RealNumberNotation: ...
    """
    """

    ScientificNotation: ...
    """
    """

    ShowBase: ... = PySide.QtCore.QTextStream.NumberFlag.ShowBase
    """
    """

    SmartNotation: ...
    """
    """

    Status: ...
    """
    """

    UppercaseBase: ... = PySide.QtCore.QTextStream.NumberFlag.UppercaseBase
    """
    """

    UppercaseDigits: ... = PySide.QtCore.QTextStream.NumberFlag.UppercaseDigits
    """
    """

    WriteFailed: ... = PySide.QtCore.QTextStream.Status.WriteFailed
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def autoDetectUnicode(self, *args, **kwargs):
        """
        """
        ...

    def codec(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def fieldAlignment(self, *args, **kwargs):
        """
        """
        ...

    def fieldWidth(self, *args, **kwargs):
        """
        """
        ...

    def flush(self, *args, **kwargs):
        """
        """
        ...

    def generateByteOrderMark(self, *args, **kwargs):
        """
        """
        ...

    def integerBase(self, *args, **kwargs):
        """
        """
        ...

    def locale(self, *args, **kwargs):
        """
        """
        ...

    def numberFlags(self, *args, **kwargs):
        """
        """
        ...

    def padChar(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def readAll(self, *args, **kwargs):
        """
        """
        ...

    def readLine(self, *args, **kwargs):
        """
        """
        ...

    def realNumberNotation(self, *args, **kwargs):
        """
        """
        ...

    def realNumberPrecision(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def resetStatus(self, *args, **kwargs):
        """
        """
        ...

    def seek(self, *args, **kwargs):
        """
        """
        ...

    def setAutoDetectUnicode(self, *args, **kwargs):
        """
        """
        ...

    def setCodec(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def setFieldAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setFieldWidth(self, *args, **kwargs):
        """
        """
        ...

    def setGenerateByteOrderMark(self, *args, **kwargs):
        """
        """
        ...

    def setIntegerBase(self, *args, **kwargs):
        """
        """
        ...

    def setLocale(self, *args, **kwargs):
        """
        """
        ...

    def setNumberFlags(self, *args, **kwargs):
        """
        """
        ...

    def setPadChar(self, *args, **kwargs):
        """
        """
        ...

    def setRealNumberNotation(self, *args, **kwargs):
        """
        """
        ...

    def setRealNumberPrecision(self, *args, **kwargs):
        """
        """
        ...

    def setStatus(self, *args, **kwargs):
        """
        """
        ...

    def skipWhiteSpace(self, *args, **kwargs):
        """
        """
        ...

    def status(self, *args, **kwargs):
        """
        """
        ...

    def string(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextStreamManipulator(Shiboken.Object):
    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    ...

class QThread(QObject):
    HighPriority: ... = PySide.QtCore.QThread.Priority.HighPriority
    """
    """

    HighestPriority: ... = PySide.QtCore.QThread.Priority.HighestPriority
    """
    """

    IdlePriority: ... = PySide.QtCore.QThread.Priority.IdlePriority
    """
    """

    InheritPriority: ... = PySide.QtCore.QThread.Priority.InheritPriority
    """
    """

    LowPriority: ... = PySide.QtCore.QThread.Priority.LowPriority
    """
    """

    LowestPriority: ... = PySide.QtCore.QThread.Priority.LowestPriority
    """
    """

    NormalPriority: ... = PySide.QtCore.QThread.Priority.NormalPriority
    """
    """

    Priority: ...
    """
    """

    TimeCriticalPriority: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    finished: ...
    """
    Signal
    """

    started: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    terminated: ...
    """
    Signal
    """

    @staticmethod
    def currentThread(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def currentThreadId(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def idealThreadCount(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def msleep(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setTerminationEnabled(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def sleep(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def usleep(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def yieldCurrentThread(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def exit(self, *args, **kwargs):
        """
        """
        ...

    def isFinished(self, *args, **kwargs):
        """
        """
        ...

    def isRunning(self, *args, **kwargs):
        """
        """
        ...

    def priority(self, *args, **kwargs):
        """
        """
        ...

    def quit(self, *args, **kwargs):
        """
        """
        ...

    def run(self, *args, **kwargs):
        """
        """
        ...

    def setPriority(self, *args, **kwargs):
        """
        """
        ...

    def setStackSize(self, *args, **kwargs):
        """
        """
        ...

    def stackSize(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def terminate(self, *args, **kwargs):
        """
        """
        ...

    def wait(self, *args, **kwargs):
        """
        """
        ...

    ...

class QThreadPool(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def globalInstance(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def activeThreadCount(self, *args, **kwargs):
        """
        """
        ...

    def expiryTimeout(self, *args, **kwargs):
        """
        """
        ...

    def maxThreadCount(self, *args, **kwargs):
        """
        """
        ...

    def releaseThread(self, *args, **kwargs):
        """
        """
        ...

    def reserveThread(self, *args, **kwargs):
        """
        """
        ...

    def setExpiryTimeout(self, *args, **kwargs):
        """
        """
        ...

    def setMaxThreadCount(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def tryStart(self, *args, **kwargs):
        """
        """
        ...

    def waitForDone(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTime(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def currentTime(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isValid(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def addMSecs(self, *args, **kwargs):
        """
        """
        ...

    def addSecs(self, *args, **kwargs):
        """
        """
        ...

    def elapsed(self, *args, **kwargs):
        """
        """
        ...

    def hour(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def minute(self, *args, **kwargs):
        """
        """
        ...

    def msec(self, *args, **kwargs):
        """
        """
        ...

    def msecsTo(self, *args, **kwargs):
        """
        """
        ...

    def restart(self, *args, **kwargs):
        """
        """
        ...

    def second(self, *args, **kwargs):
        """
        """
        ...

    def secsTo(self, *args, **kwargs):
        """
        """
        ...

    def setHMS(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def toPython(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTimeLine(QObject):
    Backward: ... = PySide.QtCore.QTimeLine.Direction.Backward
    """
    """

    CosineCurve: ... = PySide.QtCore.QTimeLine.CurveShape.CosineCurve
    """
    """

    CurveShape: ...
    """
    """

    Direction: ...
    """
    """

    EaseInCurve: ... = PySide.QtCore.QTimeLine.CurveShape.EaseInCurve
    """
    """

    EaseInOutCurve: ... = PySide.QtCore.QTimeLine.CurveShape.EaseInOutCurve
    """
    """

    EaseOutCurve: ... = PySide.QtCore.QTimeLine.CurveShape.EaseOutCurve
    """
    """

    Forward: ... = PySide.QtCore.QTimeLine.Direction.Forward
    """
    """

    LinearCurve: ... = PySide.QtCore.QTimeLine.CurveShape.LinearCurve
    """
    """

    NotRunning: ... = PySide.QtCore.QTimeLine.State.NotRunning
    """
    """

    Paused: ... = PySide.QtCore.QTimeLine.State.Paused
    """
    """

    Running: ... = PySide.QtCore.QTimeLine.State.Running
    """
    """

    SineCurve: ... = PySide.QtCore.QTimeLine.CurveShape.SineCurve
    """
    """

    State: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    finished: ...
    """
    Signal
    """

    frameChanged: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    valueChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def currentFrame(self, *args, **kwargs):
        """
        """
        ...

    def currentTime(self, *args, **kwargs):
        """
        """
        ...

    def currentValue(self, *args, **kwargs):
        """
        """
        ...

    def curveShape(self, *args, **kwargs):
        """
        """
        ...

    def direction(self, *args, **kwargs):
        """
        """
        ...

    def duration(self, *args, **kwargs):
        """
        """
        ...

    def easingCurve(self, *args, **kwargs):
        """
        """
        ...

    def endFrame(self, *args, **kwargs):
        """
        """
        ...

    def frameForTime(self, *args, **kwargs):
        """
        """
        ...

    def loopCount(self, *args, **kwargs):
        """
        """
        ...

    def resume(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentTime(self, *args, **kwargs):
        """
        """
        ...

    def setCurveShape(self, *args, **kwargs):
        """
        """
        ...

    def setDirection(self, *args, **kwargs):
        """
        """
        ...

    def setDuration(self, *args, **kwargs):
        """
        """
        ...

    def setEasingCurve(self, *args, **kwargs):
        """
        """
        ...

    def setEndFrame(self, *args, **kwargs):
        """
        """
        ...

    def setFrameRange(self, *args, **kwargs):
        """
        """
        ...

    def setLoopCount(self, *args, **kwargs):
        """
        """
        ...

    def setPaused(self, *args, **kwargs):
        """
        """
        ...

    def setStartFrame(self, *args, **kwargs):
        """
        """
        ...

    def setUpdateInterval(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def startFrame(self, *args, **kwargs):
        """
        """
        ...

    def state(self, *args, **kwargs):
        """
        """
        ...

    def stop(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def toggleDirection(self, *args, **kwargs):
        """
        """
        ...

    def updateInterval(self, *args, **kwargs):
        """
        """
        ...

    def valueForTime(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTimer(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    timeout: ...
    """
    Signal
    """

    @staticmethod
    def singleShot(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def interval(self, *args, **kwargs):
        """
        """
        ...

    def isActive(self, *args, **kwargs):
        """
        """
        ...

    def isSingleShot(self, *args, **kwargs):
        """
        """
        ...

    def killTimer(self, *args, **kwargs):
        """
        """
        ...

    def setInterval(self, *args, **kwargs):
        """
        """
        ...

    def setSingleShot(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def startTimer(self, *args, **kwargs):
        """
        """
        ...

    def stop(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def timerId(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTimerEvent(QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def timerId(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTranslator(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def load(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QUrl(Shiboken.Object):
    FormattingOption: ...
    """
    """

    FormattingOptions: ...
    """
    """

    None: ... = PySide.QtCore.QUrl.FormattingOption.None
    """
    """

    ParsingMode: ...
    """
    """

    RemoveAuthority: ... = PySide.QtCore.QUrl.FormattingOption.RemoveAuthority
    """
    """

    RemoveFragment: ... = PySide.QtCore.QUrl.FormattingOption.RemoveFragment
    """
    """

    RemovePassword: ... = PySide.QtCore.QUrl.FormattingOption.RemovePassword
    """
    """

    RemovePath: ... = PySide.QtCore.QUrl.FormattingOption.RemovePath
    """
    """

    RemovePort: ... = PySide.QtCore.QUrl.FormattingOption.RemovePort
    """
    """

    RemoveQuery: ... = PySide.QtCore.QUrl.FormattingOption.RemoveQuery
    """
    """

    RemoveScheme: ... = PySide.QtCore.QUrl.FormattingOption.RemoveScheme
    """
    """

    RemoveUserInfo: ... = PySide.QtCore.QUrl.FormattingOption.RemoveUserInfo
    """
    """

    StrictMode: ... = PySide.QtCore.QUrl.ParsingMode.StrictMode
    """
    """

    StripTrailingSlash: ...
    """
    """

    TolerantMode: ... = PySide.QtCore.QUrl.ParsingMode.TolerantMode
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromAce(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromEncoded(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromLocalFile(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromPercentEncoding(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromPunycode(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromUserInput(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def idnWhitelist(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setIdnWhitelist(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def toAce(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def toPercentEncoding(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def toPunycode(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def addEncodedQueryItem(self, *args, **kwargs):
        """
        """
        ...

    def addQueryItem(self, *args, **kwargs):
        """
        """
        ...

    def allEncodedQueryItemValues(self, *args, **kwargs):
        """
        """
        ...

    def allQueryItemValues(self, *args, **kwargs):
        """
        """
        ...

    def authority(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def encodedFragment(self, *args, **kwargs):
        """
        """
        ...

    def encodedHost(self, *args, **kwargs):
        """
        """
        ...

    def encodedPassword(self, *args, **kwargs):
        """
        """
        ...

    def encodedPath(self, *args, **kwargs):
        """
        """
        ...

    def encodedQuery(self, *args, **kwargs):
        """
        """
        ...

    def encodedQueryItemValue(self, *args, **kwargs):
        """
        """
        ...

    def encodedQueryItems(self, *args, **kwargs):
        """
        """
        ...

    def encodedUserName(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def fragment(self, *args, **kwargs):
        """
        """
        ...

    def hasEncodedQueryItem(self, *args, **kwargs):
        """
        """
        ...

    def hasFragment(self, *args, **kwargs):
        """
        """
        ...

    def hasQuery(self, *args, **kwargs):
        """
        """
        ...

    def hasQueryItem(self, *args, **kwargs):
        """
        """
        ...

    def host(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isLocalFile(self, *args, **kwargs):
        """
        """
        ...

    def isParentOf(self, *args, **kwargs):
        """
        """
        ...

    def isRelative(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def password(self, *args, **kwargs):
        """
        """
        ...

    def path(self, *args, **kwargs):
        """
        """
        ...

    def port(self, *args, **kwargs):
        """
        """
        ...

    def queryItemValue(self, *args, **kwargs):
        """
        """
        ...

    def queryItems(self, *args, **kwargs):
        """
        """
        ...

    def queryPairDelimiter(self, *args, **kwargs):
        """
        """
        ...

    def queryValueDelimiter(self, *args, **kwargs):
        """
        """
        ...

    def removeAllEncodedQueryItems(self, *args, **kwargs):
        """
        """
        ...

    def removeAllQueryItems(self, *args, **kwargs):
        """
        """
        ...

    def removeEncodedQueryItem(self, *args, **kwargs):
        """
        """
        ...

    def removeQueryItem(self, *args, **kwargs):
        """
        """
        ...

    def resolved(self, *args, **kwargs):
        """
        """
        ...

    def scheme(self, *args, **kwargs):
        """
        """
        ...

    def setAuthority(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedFragment(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedHost(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedPassword(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedPath(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedQuery(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedQueryItems(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedUrl(self, *args, **kwargs):
        """
        """
        ...

    def setEncodedUserName(self, *args, **kwargs):
        """
        """
        ...

    def setFragment(self, *args, **kwargs):
        """
        """
        ...

    def setHost(self, *args, **kwargs):
        """
        """
        ...

    def setPassword(self, *args, **kwargs):
        """
        """
        ...

    def setPath(self, *args, **kwargs):
        """
        """
        ...

    def setPort(self, *args, **kwargs):
        """
        """
        ...

    def setQueryDelimiters(self, *args, **kwargs):
        """
        """
        ...

    def setQueryItems(self, *args, **kwargs):
        """
        """
        ...

    def setScheme(self, *args, **kwargs):
        """
        """
        ...

    def setUrl(self, *args, **kwargs):
        """
        """
        ...

    def setUserInfo(self, *args, **kwargs):
        """
        """
        ...

    def setUserName(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def toEncoded(self, *args, **kwargs):
        """
        """
        ...

    def toLocalFile(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    def topLevelDomain(self, *args, **kwargs):
        """
        """
        ...

    def userInfo(self, *args, **kwargs):
        """
        """
        ...

    def userName(self, *args, **kwargs):
        """
        """
        ...

    ...

class QUuid(Shiboken.Object):
    DCE: ... = PySide.QtCore.QUuid.Variant.DCE
    """
    """

    EmbeddedPOSIX: ... = PySide.QtCore.QUuid.Version.EmbeddedPOSIX
    """
    """

    Microsoft: ... = PySide.QtCore.QUuid.Variant.Microsoft
    """
    """

    NCS: ... = PySide.QtCore.QUuid.Variant.NCS
    """
    """

    Name: ... = PySide.QtCore.QUuid.Version.Name
    """
    """

    Random: ... = PySide.QtCore.QUuid.Version.Random
    """
    """

    Reserved: ... = PySide.QtCore.QUuid.Variant.Reserved
    """
    """

    Time: ... = PySide.QtCore.QUuid.Version.Time
    """
    """

    VarUnknown: ... = PySide.QtCore.QUuid.Variant.VarUnknown
    """
    """

    Variant: ...
    """
    """

    VerUnknown: ... = PySide.QtCore.QUuid.Version.VerUnknown
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def createUuid(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromRfc4122(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def toByteArray(self, *args, **kwargs):
        """
        """
        ...

    def toRfc4122(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    def variant(self, *args, **kwargs):
        """
        """
        ...

    def version(self, *args, **kwargs):
        """
        """
        ...

    ...

class QVariantAnimation(QAbstractAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    valueChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def currentValue(self, *args, **kwargs):
        """
        """
        ...

    def duration(self, *args, **kwargs):
        """
        """
        ...

    def easingCurve(self, *args, **kwargs):
        """
        """
        ...

    def endValue(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def interpolated(self, *args, **kwargs):
        """
        """
        ...

    def keyValueAt(self, *args, **kwargs):
        """
        """
        ...

    def keyValues(self, *args, **kwargs):
        """
        """
        ...

    def setDuration(self, *args, **kwargs):
        """
        """
        ...

    def setEasingCurve(self, *args, **kwargs):
        """
        """
        ...

    def setEndValue(self, *args, **kwargs):
        """
        """
        ...

    def setKeyValueAt(self, *args, **kwargs):
        """
        """
        ...

    def setKeyValues(self, *args, **kwargs):
        """
        """
        ...

    def setStartValue(self, *args, **kwargs):
        """
        """
        ...

    def startValue(self, *args, **kwargs):
        """
        """
        ...

    def updateCurrentTime(self, *args, **kwargs):
        """
        """
        ...

    def updateCurrentValue(self, *args, **kwargs):
        """
        """
        ...

    def updateState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWaitCondition(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def wait(self, *args, **kwargs):
        """
        """
        ...

    def wakeAll(self, *args, **kwargs):
        """
        """
        ...

    def wakeOne(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWriteLocker(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __enter__(self, *args, **kwargs):
        """
        """
        ...

    def __exit__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def readWriteLock(self, *args, **kwargs):
        """
        """
        ...

    def relock(self, *args, **kwargs):
        """
        """
        ...

    def unlock(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamAttribute(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def isDefault(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def namespaceUri(self, *args, **kwargs):
        """
        """
        ...

    def prefix(self, *args, **kwargs):
        """
        """
        ...

    def qualifiedName(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamAttributes(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...

    def append(self, *args, **kwargs):
        """
        """
        ...

    def at(self, *args, **kwargs):
        """
        """
        ...

    def capacity(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def constData(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def empty(self, *args, **kwargs):
        """
        """
        ...

    def endsWith(self, *args, **kwargs):
        """
        """
        ...

    def erase(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def first(self, *args, **kwargs):
        """
        """
        ...

    def front(self, *args, **kwargs):
        """
        """
        ...

    def hasAttribute(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def insert(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isSharedWith(self, *args, **kwargs):
        """
        """
        ...

    def last(self, *args, **kwargs):
        """
        """
        ...

    def lastIndexOf(self, *args, **kwargs):
        """
        """
        ...

    def mid(self, *args, **kwargs):
        """
        """
        ...

    def prepend(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def replace(self, *args, **kwargs):
        """
        """
        ...

    def reserve(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def setSharable(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def squeeze(self, *args, **kwargs):
        """
        """
        ...

    def startsWith(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamEntityDeclaration(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def notationName(self, *args, **kwargs):
        """
        """
        ...

    def publicId(self, *args, **kwargs):
        """
        """
        ...

    def systemId(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamEntityResolver(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def resolveEntity(self, *args, **kwargs):
        """
        """
        ...

    def resolveUndeclaredEntity(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamNamespaceDeclaration(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def namespaceUri(self, *args, **kwargs):
        """
        """
        ...

    def prefix(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamNotationDeclaration(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def publicId(self, *args, **kwargs):
        """
        """
        ...

    def systemId(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamReader(Shiboken.Object):
    Characters: ... = PySide.QtCore.QXmlStreamReader.TokenType.Characters
    """
    """

    Comment: ... = PySide.QtCore.QXmlStreamReader.TokenType.Comment
    """
    """

    CustomError: ... = PySide.QtCore.QXmlStreamReader.Error.CustomError
    """
    """

    DTD: ... = PySide.QtCore.QXmlStreamReader.TokenType.DTD
    """
    """

    EndDocument: ... = PySide.QtCore.QXmlStreamReader.TokenType.EndDocument
    """
    """

    EndElement: ... = PySide.QtCore.QXmlStreamReader.TokenType.EndElement
    """
    """

    EntityReference: ...
    """
    """

    Error: ...
    """
    """

    ErrorOnUnexpectedElement: ...
    """
    """

    IncludeChildElements: ...
    """
    """

    Invalid: ... = PySide.QtCore.QXmlStreamReader.TokenType.Invalid
    """
    """

    NoError: ... = PySide.QtCore.QXmlStreamReader.Error.NoError
    """
    """

    NoToken: ... = PySide.QtCore.QXmlStreamReader.TokenType.NoToken
    """
    """

    NotWellFormedError: ...
    """
    """

    PrematureEndOfDocumentError: ...
    """
    """

    ProcessingInstruction: ...
    """
    """

    ReadElementTextBehaviour: ...
    """
    """

    SkipChildElements: ...
    """
    """

    StartDocument: ... = PySide.QtCore.QXmlStreamReader.TokenType.StartDocument
    """
    """

    StartElement: ... = PySide.QtCore.QXmlStreamReader.TokenType.StartElement
    """
    """

    TokenType: ...
    """
    """

    UnexpectedElementError: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addData(self, *args, **kwargs):
        """
        """
        ...

    def addExtraNamespaceDeclaration(self, *args, **kwargs):
        """
        """
        ...

    def addExtraNamespaceDeclarations(self, *args, **kwargs):
        """
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def attributes(self, *args, **kwargs):
        """
        """
        ...

    def characterOffset(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def columnNumber(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def documentEncoding(self, *args, **kwargs):
        """
        """
        ...

    def documentVersion(self, *args, **kwargs):
        """
        """
        ...

    def dtdName(self, *args, **kwargs):
        """
        """
        ...

    def dtdPublicId(self, *args, **kwargs):
        """
        """
        ...

    def dtdSystemId(self, *args, **kwargs):
        """
        """
        ...

    def entityDeclarations(self, *args, **kwargs):
        """
        """
        ...

    def entityResolver(self, *args, **kwargs):
        """
        """
        ...

    def error(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def hasError(self, *args, **kwargs):
        """
        """
        ...

    def isCDATA(self, *args, **kwargs):
        """
        """
        ...

    def isCharacters(self, *args, **kwargs):
        """
        """
        ...

    def isComment(self, *args, **kwargs):
        """
        """
        ...

    def isDTD(self, *args, **kwargs):
        """
        """
        ...

    def isEndDocument(self, *args, **kwargs):
        """
        """
        ...

    def isEndElement(self, *args, **kwargs):
        """
        """
        ...

    def isEntityReference(self, *args, **kwargs):
        """
        """
        ...

    def isProcessingInstruction(self, *args, **kwargs):
        """
        """
        ...

    def isStandaloneDocument(self, *args, **kwargs):
        """
        """
        ...

    def isStartDocument(self, *args, **kwargs):
        """
        """
        ...

    def isStartElement(self, *args, **kwargs):
        """
        """
        ...

    def isWhitespace(self, *args, **kwargs):
        """
        """
        ...

    def lineNumber(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def namespaceDeclarations(self, *args, **kwargs):
        """
        """
        ...

    def namespaceProcessing(self, *args, **kwargs):
        """
        """
        ...

    def namespaceUri(self, *args, **kwargs):
        """
        """
        ...

    def notationDeclarations(self, *args, **kwargs):
        """
        """
        ...

    def prefix(self, *args, **kwargs):
        """
        """
        ...

    def processingInstructionData(self, *args, **kwargs):
        """
        """
        ...

    def processingInstructionTarget(self, *args, **kwargs):
        """
        """
        ...

    def qualifiedName(self, *args, **kwargs):
        """
        """
        ...

    def raiseError(self, *args, **kwargs):
        """
        """
        ...

    def readElementText(self, *args, **kwargs):
        """
        """
        ...

    def readNext(self, *args, **kwargs):
        """
        """
        ...

    def readNextStartElement(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def setEntityResolver(self, *args, **kwargs):
        """
        """
        ...

    def setNamespaceProcessing(self, *args, **kwargs):
        """
        """
        ...

    def skipCurrentElement(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def tokenString(self, *args, **kwargs):
        """
        """
        ...

    def tokenType(self, *args, **kwargs):
        """
        """
        ...

    ...

class QXmlStreamWriter(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoFormatting(self, *args, **kwargs):
        """
        """
        ...

    def autoFormattingIndent(self, *args, **kwargs):
        """
        """
        ...

    def codec(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def hasError(self, *args, **kwargs):
        """
        """
        ...

    def setAutoFormatting(self, *args, **kwargs):
        """
        """
        ...

    def setAutoFormattingIndent(self, *args, **kwargs):
        """
        """
        ...

    def setCodec(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def writeAttribute(self, *args, **kwargs):
        """
        """
        ...

    def writeAttributes(self, *args, **kwargs):
        """
        """
        ...

    def writeCDATA(self, *args, **kwargs):
        """
        """
        ...

    def writeCharacters(self, *args, **kwargs):
        """
        """
        ...

    def writeComment(self, *args, **kwargs):
        """
        """
        ...

    def writeCurrentToken(self, *args, **kwargs):
        """
        """
        ...

    def writeDTD(self, *args, **kwargs):
        """
        """
        ...

    def writeDefaultNamespace(self, *args, **kwargs):
        """
        """
        ...

    def writeEmptyElement(self, *args, **kwargs):
        """
        """
        ...

    def writeEndDocument(self, *args, **kwargs):
        """
        """
        ...

    def writeEndElement(self, *args, **kwargs):
        """
        """
        ...

    def writeEntityReference(self, *args, **kwargs):
        """
        """
        ...

    def writeNamespace(self, *args, **kwargs):
        """
        """
        ...

    def writeProcessingInstruction(self, *args, **kwargs):
        """
        """
        ...

    def writeStartDocument(self, *args, **kwargs):
        """
        """
        ...

    def writeStartElement(self, *args, **kwargs):
        """
        """
        ...

    def writeTextElement(self, *args, **kwargs):
        """
        """
        ...

    ...

class Qt(Shiboken.Object):
    AA_AttributeCount: ...
    """
    """

    AA_CaptureMultimediaKeys: ...
    """
    """

    AA_DontCreateNativeWidgetSiblings: ...
    """
    """

    AA_DontShowIconsInMenus: ...
    """
    """

    AA_DontUseNativeMenuBar: ...
    """
    """

    AA_ImmediateWidgetCreation: ...
    """
    """

    AA_MSWindowsUseDirect3DByDefault: ...
    """
    """

    AA_MacDontSwapCtrlAndMeta: ...
    """
    """

    AA_MacPluginApplication: ...
    """
    """

    AA_NativeWindows: ...
    """
    """

    AA_S60DisablePartialScreenInputMode: ...
    """
    """

    AA_S60DontConstructApplicationPanes: ...
    """
    """

    AA_X11InitThreads: ...
    """
    """

    ALT: ... = PySide.QtCore.Qt.Modifier.ALT
    """
    """

    AbsoluteSize: ... = PySide.QtCore.Qt.SizeMode.AbsoluteSize
    """
    """

    AccessibleDescriptionRole: ...
    """
    """

    AccessibleTextRole: ... = PySide.QtCore.Qt.ItemDataRole.AccessibleTextRole
    """
    """

    ActionMask: ... = PySide.QtCore.Qt.DropAction.ActionMask
    """
    """

    ActionsContextMenu: ...
    """
    """

    ActiveWindowFocusReason: ...
    """
    """

    AlignAbsolute: ... = PySide.QtCore.Qt.AlignmentFlag.AlignAbsolute
    """
    """

    AlignBottom: ... = PySide.QtCore.Qt.AlignmentFlag.AlignBottom
    """
    """

    AlignCenter: ... = PySide.QtCore.Qt.AlignmentFlag.AlignCenter
    """
    """

    AlignHCenter: ... = PySide.QtCore.Qt.AlignmentFlag.AlignHCenter
    """
    """

    AlignHorizontal_Mask: ...
    """
    """

    AlignJustify: ... = PySide.QtCore.Qt.AlignmentFlag.AlignJustify
    """
    """

    AlignLeading: ... = PySide.QtCore.Qt.AlignmentFlag.AlignLeading
    """
    """

    AlignLeft: ... = PySide.QtCore.Qt.AlignmentFlag.AlignLeft
    """
    """

    AlignRight: ... = PySide.QtCore.Qt.AlignmentFlag.AlignRight
    """
    """

    AlignTop: ... = PySide.QtCore.Qt.AlignmentFlag.AlignTop
    """
    """

    AlignTrailing: ... = PySide.QtCore.Qt.AlignmentFlag.AlignTrailing
    """
    """

    AlignVCenter: ... = PySide.QtCore.Qt.AlignmentFlag.AlignVCenter
    """
    """

    AlignVertical_Mask: ... = PySide.QtCore.Qt.AlignmentFlag.AlignVertical_Mask
    """
    """

    Alignment: ...
    """
    """

    AlignmentFlag: ...
    """
    """

    AllDockWidgetAreas: ...
    """
    """

    AllToolBarAreas: ... = PySide.QtCore.Qt.ToolBarArea.AllToolBarAreas
    """
    """

    AlphaDither_Mask: ...
    """
    """

    AltModifier: Key
    """
    """

    AnchorAttribute: ...
    """
    """

    AnchorBottom: ... = PySide.QtCore.Qt.AnchorPoint.AnchorBottom
    """
    """

    AnchorHorizontalCenter: ...
    """
    """

    AnchorHref: ... = PySide.QtCore.Qt.AnchorAttribute.AnchorHref
    """
    """

    AnchorLeft: ... = PySide.QtCore.Qt.AnchorPoint.AnchorLeft
    """
    """

    AnchorName: ... = PySide.QtCore.Qt.AnchorAttribute.AnchorName
    """
    """

    AnchorPoint: ...
    """
    """

    AnchorRight: ... = PySide.QtCore.Qt.AnchorPoint.AnchorRight
    """
    """

    AnchorTop: ... = PySide.QtCore.Qt.AnchorPoint.AnchorTop
    """
    """

    AnchorVerticalCenter: ...
    """
    """

    ApplicationAttribute: ...
    """
    """

    ApplicationModal: ... = PySide.QtCore.Qt.WindowModality.ApplicationModal
    """
    """

    ApplicationShortcut: ...
    """
    """

    ArrowCursor: ... = PySide.QtCore.Qt.CursorShape.ArrowCursor
    """
    """

    ArrowType: ...
    """
    """

    AscendingOrder: ... = PySide.QtCore.Qt.SortOrder.AscendingOrder
    """
    """

    AspectRatioMode: ...
    """
    """

    AutoColor: ... = PySide.QtCore.Qt.ImageConversionFlag.AutoColor
    """
    """

    AutoCompatConnection: ...
    """
    """

    AutoConnection: ... = PySide.QtCore.Qt.ConnectionType.AutoConnection
    """
    """

    AutoDither: ... = PySide.QtCore.Qt.ImageConversionFlag.AutoDither
    """
    """

    AutoText: ... = PySide.QtCore.Qt.TextFormat.AutoText
    """
    """

    AvoidDither: ... = PySide.QtCore.Qt.ImageConversionFlag.AvoidDither
    """
    """

    Axis: ...
    """
    """

    BDiagPattern: ... = PySide.QtCore.Qt.BrushStyle.BDiagPattern
    """
    """

    BGMode: ...
    """
    """

    BackgroundColorRole: ...
    """
    """

    BackgroundRole: ... = PySide.QtCore.Qt.ItemDataRole.BackgroundRole
    """
    """

    BacktabFocusReason: ... = PySide.QtCore.Qt.FocusReason.BacktabFocusReason
    """
    """

    BevelJoin: ... = PySide.QtCore.Qt.PenJoinStyle.BevelJoin
    """
    """

    BitmapCursor: ... = PySide.QtCore.Qt.CursorShape.BitmapCursor
    """
    """

    BlankCursor: ... = PySide.QtCore.Qt.CursorShape.BlankCursor
    """
    """

    BlockingQueuedConnection: ...
    """
    """

    BottomDockWidgetArea: ...
    """
    """

    BottomLeftCorner: ... = PySide.QtCore.Qt.Corner.BottomLeftCorner
    """
    """

    BottomLeftSection: ...
    """
    """

    BottomRightCorner: ... = PySide.QtCore.Qt.Corner.BottomRightCorner
    """
    """

    BottomRightSection: ...
    """
    """

    BottomSection: ... = PySide.QtCore.Qt.WindowFrameSection.BottomSection
    """
    """

    BottomToolBarArea: ... = PySide.QtCore.Qt.ToolBarArea.BottomToolBarArea
    """
    """

    BrushStyle: ...
    """
    """

    BusyCursor: ... = PySide.QtCore.Qt.CursorShape.BusyCursor
    """
    """

    BypassGraphicsProxyWidget: ...
    """
    """

    CTRL: ... = PySide.QtCore.Qt.Modifier.CTRL
    """
    """

    CaseInsensitive: ... = PySide.QtCore.Qt.CaseSensitivity.CaseInsensitive
    """
    """

    CaseSensitive: ... = PySide.QtCore.Qt.CaseSensitivity.CaseSensitive
    """
    """

    CaseSensitivity: ...
    """
    """

    CheckState: ...
    """
    """

    CheckStateRole: ... = PySide.QtCore.Qt.ItemDataRole.CheckStateRole
    """
    """

    Checked: ... = PySide.QtCore.Qt.CheckState.Checked
    """
    """

    ClickFocus: ... = PySide.QtCore.Qt.FocusPolicy.ClickFocus
    """
    """

    ClipOperation: ...
    """
    """

    ClosedHandCursor: ... = PySide.QtCore.Qt.CursorShape.ClosedHandCursor
    """
    """

    ColorMode_Mask: ... = PySide.QtCore.Qt.ImageConversionFlag.ColorMode_Mask
    """
    """

    ColorOnly: ... = PySide.QtCore.Qt.ImageConversionFlag.ColorOnly
    """
    """

    ConicalGradientPattern: ...
    """
    """

    ConnectionType: ...
    """
    """

    ContainsItemBoundingRect: ...
    """
    """

    ContainsItemShape: ...
    """
    """

    ContextMenuPolicy: ...
    """
    """

    ControlModifier: Key
    """
    """

    CoordinateSystem: ...
    """
    """

    CopyAction: ... = PySide.QtCore.Qt.DropAction.CopyAction
    """
    """

    Corner: ...
    """
    """

    CrossCursor: ... = PySide.QtCore.Qt.CursorShape.CrossCursor
    """
    """

    CrossPattern: ... = PySide.QtCore.Qt.BrushStyle.CrossPattern
    """
    """

    CursorMoveStyle: ...
    """
    """

    CursorShape: ...
    """
    """

    CustomContextMenu: ...
    """
    """

    CustomCursor: ... = PySide.QtCore.Qt.CursorShape.CustomCursor
    """
    """

    CustomDashLine: ... = PySide.QtCore.Qt.PenStyle.CustomDashLine
    """
    """

    CustomGesture: ... = PySide.QtCore.Qt.GestureType.CustomGesture
    """
    """

    CustomizeWindowHint: ... = PySide.QtCore.Qt.WindowType.CustomizeWindowHint
    """
    """

    DashDotDotLine: ... = PySide.QtCore.Qt.PenStyle.DashDotDotLine
    """
    """

    DashDotLine: ... = PySide.QtCore.Qt.PenStyle.DashDotLine
    """
    """

    DashLine: ... = PySide.QtCore.Qt.PenStyle.DashLine
    """
    """

    DateFormat: ...
    """
    """

    DayOfWeek: ...
    """
    """

    DecorationPropertyRole: ...
    """
    """

    DecorationRole: ... = PySide.QtCore.Qt.ItemDataRole.DecorationRole
    """
    """

    DefaultContextMenu: ...
    """
    """

    DefaultLocaleLongDate: ...
    """
    """

    DefaultLocaleShortDate: ...
    """
    """

    Dense1Pattern: ... = PySide.QtCore.Qt.BrushStyle.Dense1Pattern
    """
    """

    Dense2Pattern: ... = PySide.QtCore.Qt.BrushStyle.Dense2Pattern
    """
    """

    Dense3Pattern: ... = PySide.QtCore.Qt.BrushStyle.Dense3Pattern
    """
    """

    Dense4Pattern: ... = PySide.QtCore.Qt.BrushStyle.Dense4Pattern
    """
    """

    Dense5Pattern: ... = PySide.QtCore.Qt.BrushStyle.Dense5Pattern
    """
    """

    Dense6Pattern: ... = PySide.QtCore.Qt.BrushStyle.Dense6Pattern
    """
    """

    Dense7Pattern: ... = PySide.QtCore.Qt.BrushStyle.Dense7Pattern
    """
    """

    DescendingOrder: ... = PySide.QtCore.Qt.SortOrder.DescendingOrder
    """
    """

    Desktop: ... = PySide.QtCore.Qt.WindowType.Desktop
    """
    """

    DeviceCoordinates: ...
    """
    """

    DiagCrossPattern: ... = PySide.QtCore.Qt.BrushStyle.DiagCrossPattern
    """
    """

    Dialog: ... = PySide.QtCore.Qt.WindowType.Dialog
    """
    """

    DiffuseAlphaDither: ...
    """
    """

    DiffuseDither: ... = PySide.QtCore.Qt.ImageConversionFlag.DiffuseDither
    """
    """

    DirectConnection: ... = PySide.QtCore.Qt.ConnectionType.DirectConnection
    """
    """

    DisplayPropertyRole: ...
    """
    """

    DisplayRole: ... = PySide.QtCore.Qt.ItemDataRole.DisplayRole
    """
    """

    DitherMode_Mask: ... = PySide.QtCore.Qt.ImageConversionFlag.DitherMode_Mask
    """
    """

    Dither_Mask: ... = PySide.QtCore.Qt.ImageConversionFlag.Dither_Mask
    """
    """

    DockWidgetArea: ...
    """
    """

    DockWidgetAreaSizes: ...
    """
    """

    DockWidgetArea_Mask: ...
    """
    """

    DockWidgetAreas: ...
    """
    """

    DontStartGestureOnChildren: ...
    """
    """

    DotLine: ... = PySide.QtCore.Qt.PenStyle.DotLine
    """
    """

    DownArrow: ... = PySide.QtCore.Qt.ArrowType.DownArrow
    """
    """

    DragCopyCursor: ... = PySide.QtCore.Qt.CursorShape.DragCopyCursor
    """
    """

    DragLinkCursor: ... = PySide.QtCore.Qt.CursorShape.DragLinkCursor
    """
    """

    DragMoveCursor: ... = PySide.QtCore.Qt.CursorShape.DragMoveCursor
    """
    """

    Drawer: ... = PySide.QtCore.Qt.WindowType.Drawer
    """
    """

    DropAction: ...
    """
    """

    DropActions: ...
    """
    """

    EditRole: ... = PySide.QtCore.Qt.ItemDataRole.EditRole
    """
    """

    ElideLeft: ... = PySide.QtCore.Qt.TextElideMode.ElideLeft
    """
    """

    ElideMiddle: ... = PySide.QtCore.Qt.TextElideMode.ElideMiddle
    """
    """

    ElideNone: ... = PySide.QtCore.Qt.TextElideMode.ElideNone
    """
    """

    ElideRight: ... = PySide.QtCore.Qt.TextElideMode.ElideRight
    """
    """

    EventPriority: ...
    """
    """

    ExactHit: ... = PySide.QtCore.Qt.HitTestAccuracy.ExactHit
    """
    """

    FDiagPattern: ... = PySide.QtCore.Qt.BrushStyle.FDiagPattern
    """
    """

    FastTransformation: ...
    """
    """

    FillRule: ...
    """
    """

    FlatCap: ... = PySide.QtCore.Qt.PenCapStyle.FlatCap
    """
    """

    FocusPolicy: ...
    """
    """

    FocusReason: ...
    """
    """

    FontRole: ... = PySide.QtCore.Qt.ItemDataRole.FontRole
    """
    """

    ForbiddenCursor: ... = PySide.QtCore.Qt.CursorShape.ForbiddenCursor
    """
    """

    ForegroundRole: ... = PySide.QtCore.Qt.ItemDataRole.ForegroundRole
    """
    """

    FramelessWindowHint: ... = PySide.QtCore.Qt.WindowType.FramelessWindowHint
    """
    """

    Friday: ... = PySide.QtCore.Qt.DayOfWeek.Friday
    """
    """

    FuzzyHit: ... = PySide.QtCore.Qt.HitTestAccuracy.FuzzyHit
    """
    """

    GestureCanceled: ... = PySide.QtCore.Qt.GestureState.GestureCanceled
    """
    """

    GestureFinished: ... = PySide.QtCore.Qt.GestureState.GestureFinished
    """
    """

    GestureFlag: ...
    """
    """

    GestureFlags: ...
    """
    """

    GestureStarted: ... = PySide.QtCore.Qt.GestureState.GestureStarted
    """
    """

    GestureState: ...
    """
    """

    GestureType: ...
    """
    """

    GestureUpdated: ... = PySide.QtCore.Qt.GestureState.GestureUpdated
    """
    """

    GlobalColor: ...
    """
    """

    GroupSwitchModifier: ...
    """
    """

    HighEventPriority: ... = PySide.QtCore.Qt.EventPriority.HighEventPriority
    """
    """

    HitTestAccuracy: ...
    """
    """

    HorPattern: ... = PySide.QtCore.Qt.BrushStyle.HorPattern
    """
    """

    Horizontal: ... = PySide.QtCore.Qt.Orientation.Horizontal
    """
    """

    IBeamCursor: ... = PySide.QtCore.Qt.CursorShape.IBeamCursor
    """
    """

    ISODate: ... = PySide.QtCore.Qt.DateFormat.ISODate
    """
    """

    IgnoreAction: ... = PySide.QtCore.Qt.DropAction.IgnoreAction
    """
    """

    IgnoreAspectRatio: ... = PySide.QtCore.Qt.AspectRatioMode.IgnoreAspectRatio
    """
    """

    IgnoredGesturesPropagateToParent: ...
    """
    """

    ImAnchorPosition: ... = PySide.QtCore.Qt.InputMethodQuery.ImAnchorPosition
    """
    """

    ImCurrentSelection: ...
    """
    """

    ImCursorPosition: ... = PySide.QtCore.Qt.InputMethodQuery.ImCursorPosition
    """
    """

    ImFont: ... = PySide.QtCore.Qt.InputMethodQuery.ImFont
    """
    """

    ImMaximumTextLength: ...
    """
    """

    ImMicroFocus: ... = PySide.QtCore.Qt.InputMethodQuery.ImMicroFocus
    """
    """

    ImSurroundingText: ...
    """
    """

    ImageConversionFlag: ...
    """
    """

    ImageConversionFlags: ...
    """
    """

    ImhDialableCharactersOnly: ...
    """
    """

    ImhDigitsOnly: ... = PySide.QtCore.Qt.InputMethodHint.ImhDigitsOnly
    """
    """

    ImhEmailCharactersOnly: ...
    """
    """

    ImhExclusiveInputMask: ...
    """
    """

    ImhFormattedNumbersOnly: ...
    """
    """

    ImhHiddenText: ... = PySide.QtCore.Qt.InputMethodHint.ImhHiddenText
    """
    """

    ImhLowercaseOnly: ... = PySide.QtCore.Qt.InputMethodHint.ImhLowercaseOnly
    """
    """

    ImhNoAutoUppercase: ...
    """
    """

    ImhNoPredictiveText: ...
    """
    """

    ImhNone: ... = PySide.QtCore.Qt.InputMethodHint.ImhNone
    """
    """

    ImhPreferLowercase: ...
    """
    """

    ImhPreferNumbers: ... = PySide.QtCore.Qt.InputMethodHint.ImhPreferNumbers
    """
    """

    ImhPreferUppercase: ...
    """
    """

    ImhUppercaseOnly: ... = PySide.QtCore.Qt.InputMethodHint.ImhUppercaseOnly
    """
    """

    ImhUrlCharactersOnly: ...
    """
    """

    InitialSortOrderRole: ...
    """
    """

    InputMethodHint: ...
    """
    """

    InputMethodHints: ...
    """
    """

    InputMethodQuery: ...
    """
    """

    IntersectClip: ... = PySide.QtCore.Qt.ClipOperation.IntersectClip
    """
    """

    IntersectsItemBoundingRect: ...
    """
    """

    IntersectsItemShape: ...
    """
    """

    ItemDataRole: ...
    """
    """

    ItemFlag: ...
    """
    """

    ItemFlags: ...
    """
    """

    ItemIsDragEnabled: ... = PySide.QtCore.Qt.ItemFlag.ItemIsDragEnabled
    """
    """

    ItemIsDropEnabled: ... = PySide.QtCore.Qt.ItemFlag.ItemIsDropEnabled
    """
    """

    ItemIsEditable: ... = PySide.QtCore.Qt.ItemFlag.ItemIsEditable
    """
    """

    ItemIsEnabled: ... = PySide.QtCore.Qt.ItemFlag.ItemIsEnabled
    """
    """

    ItemIsSelectable: ... = PySide.QtCore.Qt.ItemFlag.ItemIsSelectable
    """
    """

    ItemIsTristate: ... = PySide.QtCore.Qt.ItemFlag.ItemIsTristate
    """
    """

    ItemIsUserCheckable: ... = PySide.QtCore.Qt.ItemFlag.ItemIsUserCheckable
    """
    """

    ItemSelectionMode: ...
    """
    """

    KeepAspectRatio: ... = PySide.QtCore.Qt.AspectRatioMode.KeepAspectRatio
    """
    """

    KeepAspectRatioByExpanding: ...
    """
    """

    class Key(int):
        """
        """

    Key_0: Key
    """
    """

    Key_1: Key
    """
    """

    Key_2: Key
    """
    """

    Key_3: Key
    """
    """

    Key_4: Key
    """
    """

    Key_5: Key
    """
    """

    Key_6: Key
    """
    """

    Key_7: Key
    """
    """

    Key_8: Key
    """
    """

    Key_9: Key
    """
    """

    Key_A: Key
    """
    """

    Key_AE: Key
    """
    """

    Key_Aacute: Key
    """
    """

    Key_Acircumflex: Key
    """
    """

    Key_AddFavorite: Key
    """
    """

    Key_Adiaeresis: Key
    """
    """

    Key_Agrave: Key
    """
    """

    Key_Alt: Key
    """
    """

    Key_AltGr: Key
    """
    """

    Key_Ampersand: Key
    """
    """

    Key_Any: Key
    """
    """

    Key_Apostrophe: Key
    """
    """

    Key_ApplicationLeft: Key
    """
    """

    Key_ApplicationRight: Key
    """
    """

    Key_Aring: Key
    """
    """

    Key_AsciiCircum: Key
    """
    """

    Key_AsciiTilde: Key
    """
    """

    Key_Asterisk: Key
    """
    """

    Key_At: Key
    """
    """

    Key_Atilde: Key
    """
    """

    Key_AudioCycleTrack: Key
    """
    """

    Key_AudioForward: Key
    """
    """

    Key_AudioRandomPlay: Key
    """
    """

    Key_AudioRepeat: Key
    """
    """

    Key_AudioRewind: Key
    """
    """

    Key_Away: Key
    """
    """

    Key_B: Key
    """
    """

    Key_Back: Key
    """
    """

    Key_BackForward: Key
    """
    """

    Key_Backslash: Key
    """
    """

    Key_Backspace: Key
    """
    """

    Key_Backtab: Key
    """
    """

    Key_Bar: Key
    """
    """

    Key_BassBoost: Key
    """
    """

    Key_BassDown: Key
    """
    """

    Key_BassUp: Key
    """
    """

    Key_Battery: Key
    """
    """

    Key_Bluetooth: Key
    """
    """

    Key_Book: Key
    """
    """

    Key_BraceLeft: Key
    """
    """

    Key_BraceRight: Key
    """
    """

    Key_BracketLeft: Key
    """
    """

    Key_BracketRight: Key
    """
    """

    Key_BrightnessAdjust: Key
    """
    """

    Key_C: Key
    """
    """

    Key_CD: Key
    """
    """

    Key_Calculator: Key
    """
    """

    Key_Calendar: Key
    """
    """

    Key_Call: Key
    """
    """

    Key_Camera: Key
    """
    """

    Key_CameraFocus: Key
    """
    """

    Key_Cancel: Key
    """
    """

    Key_CapsLock: Key
    """
    """

    Key_Ccedilla: Key
    """
    """

    Key_Clear: Key
    """
    """

    Key_ClearGrab: Key
    """
    """

    Key_Close: Key
    """
    """

    Key_Codeinput: Key
    """
    """

    Key_Colon: Key
    """
    """

    Key_Comma: Key
    """
    """

    Key_Community: Key
    """
    """

    Key_Context1: Key
    """
    """

    Key_Context2: Key
    """
    """

    Key_Context3: Key
    """
    """

    Key_Context4: Key
    """
    """

    Key_ContrastAdjust: Key
    """
    """

    Key_Control: Key
    """
    """

    Key_Copy: Key
    """
    """

    Key_Cut: Key
    """
    """

    Key_D: Key
    """
    """

    Key_DOS: Key
    """
    """

    Key_Dead_Abovedot: Key
    """
    """

    Key_Dead_Abovering: Key
    """
    """

    Key_Dead_Acute: Key
    """
    """

    Key_Dead_Belowdot: Key
    """
    """

    Key_Dead_Breve: Key
    """
    """

    Key_Dead_Caron: Key
    """
    """

    Key_Dead_Cedilla: Key
    """
    """

    Key_Dead_Circumflex: Key
    """
    """

    Key_Dead_Diaeresis: Key
    """
    """

    Key_Dead_Doubleacute: Key
    """
    """

    Key_Dead_Grave: Key
    """
    """

    Key_Dead_Hook: Key
    """
    """

    Key_Dead_Horn: Key
    """
    """

    Key_Dead_Iota: Key
    """
    """

    Key_Dead_Macron: Key
    """
    """

    Key_Dead_Ogonek: Key
    """
    """

    Key_Dead_Semivoiced_Sound: ...
    """
    """

    Key_Dead_Tilde: Key
    """
    """

    Key_Dead_Voiced_Sound: Key
    """
    """

    Key_Delete: Key
    """
    """

    Key_Direction_L: Key
    """
    """

    Key_Direction_R: Key
    """
    """

    Key_Display: Key
    """
    """

    Key_Documents: Key
    """
    """

    Key_Dollar: Key
    """
    """

    Key_Down: Key
    """
    """

    Key_E: Key
    """
    """

    Key_ETH: Key
    """
    """

    Key_Eacute: Key
    """
    """

    Key_Ecircumflex: Key
    """
    """

    Key_Ediaeresis: Key
    """
    """

    Key_Egrave: Key
    """
    """

    Key_Eisu_Shift: Key
    """
    """

    Key_Eisu_toggle: Key
    """
    """

    Key_Eject: Key
    """
    """

    Key_End: Key
    """
    """

    Key_Enter: Key
    """
    """

    Key_Equal: Key
    """
    """

    Key_Escape: Key
    """
    """

    Key_Excel: Key
    """
    """

    Key_Exclam: Key
    """
    """

    Key_Execute: Key
    """
    """

    Key_Explorer: Key
    """
    """

    Key_F: Key
    """
    """

    Key_F1: Key
    """
    """

    Key_F10: Key
    """
    """

    Key_F11: Key
    """
    """

    Key_F12: Key
    """
    """

    Key_F13: Key
    """
    """

    Key_F14: Key
    """
    """

    Key_F15: Key
    """
    """

    Key_F16: Key
    """
    """

    Key_F17: Key
    """
    """

    Key_F18: Key
    """
    """

    Key_F19: Key
    """
    """

    Key_F2: Key
    """
    """

    Key_F20: Key
    """
    """

    Key_F21: Key
    """
    """

    Key_F22: Key
    """
    """

    Key_F23: Key
    """
    """

    Key_F24: Key
    """
    """

    Key_F25: Key
    """
    """

    Key_F26: Key
    """
    """

    Key_F27: Key
    """
    """

    Key_F28: Key
    """
    """

    Key_F29: Key
    """
    """

    Key_F3: Key
    """
    """

    Key_F30: Key
    """
    """

    Key_F31: Key
    """
    """

    Key_F32: Key
    """
    """

    Key_F33: Key
    """
    """

    Key_F34: Key
    """
    """

    Key_F35: Key
    """
    """

    Key_F4: Key
    """
    """

    Key_F5: Key
    """
    """

    Key_F6: Key
    """
    """

    Key_F7: Key
    """
    """

    Key_F8: Key
    """
    """

    Key_F9: Key
    """
    """

    Key_Favorites: Key
    """
    """

    Key_Finance: Key
    """
    """

    Key_Flip: Key
    """
    """

    Key_Forward: Key
    """
    """

    Key_G: Key
    """
    """

    Key_Game: Key
    """
    """

    Key_Go: Key
    """
    """

    Key_Greater: Key
    """
    """

    Key_H: Key
    """
    """

    Key_Hangul: Key
    """
    """

    Key_Hangul_Banja: Key
    """
    """

    Key_Hangul_End: Key
    """
    """

    Key_Hangul_Hanja: Key
    """
    """

    Key_Hangul_Jamo: Key
    """
    """

    Key_Hangul_Jeonja: Key
    """
    """

    Key_Hangul_PostHanja: Key
    """
    """

    Key_Hangul_PreHanja: Key
    """
    """

    Key_Hangul_Romaja: Key
    """
    """

    Key_Hangul_Special: Key
    """
    """

    Key_Hangul_Start: Key
    """
    """

    Key_Hangup: Key
    """
    """

    Key_Hankaku: Key
    """
    """

    Key_Help: Key
    """
    """

    Key_Henkan: Key
    """
    """

    Key_Hibernate: Key
    """
    """

    Key_Hiragana: Key
    """
    """

    Key_Hiragana_Katakana: Key
    """
    """

    Key_History: Key
    """
    """

    Key_Home: Key
    """
    """

    Key_HomePage: Key
    """
    """

    Key_HotLinks: Key
    """
    """

    Key_Hyper_L: Key
    """
    """

    Key_Hyper_R: Key
    """
    """

    Key_I: Key
    """
    """

    Key_Iacute: Key
    """
    """

    Key_Icircumflex: Key
    """
    """

    Key_Idiaeresis: Key
    """
    """

    Key_Igrave: Key
    """
    """

    Key_Insert: Key
    """
    """

    Key_J: Key
    """
    """

    Key_K: Key
    """
    """

    Key_Kana_Lock: Key
    """
    """

    Key_Kana_Shift: Key
    """
    """

    Key_Kanji: Key
    """
    """

    Key_Katakana: Key
    """
    """

    Key_KeyboardBrightnessDown: ...
    """
    """

    Key_KeyboardBrightnessUp: ...
    """
    """

    Key_KeyboardLightOnOff: Key
    """
    """

    Key_L: Key
    """
    """

    Key_LastNumberRedial: Key
    """
    """

    Key_Launch0: Key
    """
    """

    Key_Launch1: Key
    """
    """

    Key_Launch2: Key
    """
    """

    Key_Launch3: Key
    """
    """

    Key_Launch4: Key
    """
    """

    Key_Launch5: Key
    """
    """

    Key_Launch6: Key
    """
    """

    Key_Launch7: Key
    """
    """

    Key_Launch8: Key
    """
    """

    Key_Launch9: Key
    """
    """

    Key_LaunchA: Key
    """
    """

    Key_LaunchB: Key
    """
    """

    Key_LaunchC: Key
    """
    """

    Key_LaunchD: Key
    """
    """

    Key_LaunchE: Key
    """
    """

    Key_LaunchF: Key
    """
    """

    Key_LaunchG: Key
    """
    """

    Key_LaunchH: Key
    """
    """

    Key_LaunchMail: Key
    """
    """

    Key_LaunchMedia: Key
    """
    """

    Key_Left: Key
    """
    """

    Key_Less: Key
    """
    """

    Key_LightBulb: Key
    """
    """

    Key_LogOff: Key
    """
    """

    Key_M: Key
    """
    """

    Key_MailForward: Key
    """
    """

    Key_Market: Key
    """
    """

    Key_Massyo: Key
    """
    """

    Key_MediaLast: Key
    """
    """

    Key_MediaNext: Key
    """
    """

    Key_MediaPause: Key
    """
    """

    Key_MediaPlay: Key
    """
    """

    Key_MediaPrevious: Key
    """
    """

    Key_MediaRecord: Key
    """
    """

    Key_MediaStop: Key
    """
    """

    Key_MediaTogglePlayPause: ...
    """
    """

    Key_Meeting: Key
    """
    """

    Key_Memo: Key
    """
    """

    Key_Menu: Key
    """
    """

    Key_MenuKB: Key
    """
    """

    Key_MenuPB: Key
    """
    """

    Key_Messenger: Key
    """
    """

    Key_Meta: Key
    """
    """

    Key_Minus: Key
    """
    """

    Key_Mode_switch: Key
    """
    """

    Key_MonBrightnessDown: Key
    """
    """

    Key_MonBrightnessUp: Key
    """
    """

    Key_Muhenkan: Key
    """
    """

    Key_Multi_key: Key
    """
    """

    Key_MultipleCandidate: Key
    """
    """

    Key_Music: Key
    """
    """

    Key_MySites: Key
    """
    """

    Key_N: Key
    """
    """

    Key_News: Key
    """
    """

    Key_No: Key
    """
    """

    Key_Ntilde: Key
    """
    """

    Key_NumLock: Key
    """
    """

    Key_NumberSign: Key
    """
    """

    Key_O: Key
    """
    """

    Key_Oacute: Key
    """
    """

    Key_Ocircumflex: Key
    """
    """

    Key_Odiaeresis: Key
    """
    """

    Key_OfficeHome: Key
    """
    """

    Key_Ograve: Key
    """
    """

    Key_Ooblique: Key
    """
    """

    Key_OpenUrl: Key
    """
    """

    Key_Option: Key
    """
    """

    Key_Otilde: Key
    """
    """

    Key_P: Key
    """
    """

    Key_PageDown: Key
    """
    """

    Key_PageUp: Key
    """
    """

    Key_ParenLeft: Key
    """
    """

    Key_ParenRight: Key
    """
    """

    Key_Paste: Key
    """
    """

    Key_Pause: Key
    """
    """

    Key_Percent: Key
    """
    """

    Key_Period: Key
    """
    """

    Key_Phone: Key
    """
    """

    Key_Pictures: Key
    """
    """

    Key_Play: Key
    """
    """

    Key_Plus: Key
    """
    """

    Key_PowerDown: Key
    """
    """

    Key_PowerOff: Key
    """
    """

    Key_PreviousCandidate: Key
    """
    """

    Key_Print: Key
    """
    """

    Key_Printer: Key
    """
    """

    Key_Q: Key
    """
    """

    Key_Question: Key
    """
    """

    Key_QuoteDbl: Key
    """
    """

    Key_QuoteLeft: Key
    """
    """

    Key_R: Key
    """
    """

    Key_Refresh: Key
    """
    """

    Key_Reload: Key
    """
    """

    Key_Reply: Key
    """
    """

    Key_Return: Key
    """
    """

    Key_Right: Key
    """
    """

    Key_Romaji: Key
    """
    """

    Key_RotateWindows: Key
    """
    """

    Key_RotationKB: Key
    """
    """

    Key_RotationPB: Key
    """
    """

    Key_S: Key
    """
    """

    Key_Save: Key
    """
    """

    Key_ScreenSaver: Key
    """
    """

    Key_ScrollLock: Key
    """
    """

    Key_Search: Key
    """
    """

    Key_Select: Key
    """
    """

    Key_Semicolon: Key
    """
    """

    Key_Send: Key
    """
    """

    Key_Shift: Key
    """
    """

    Key_Shop: Key
    """
    """

    Key_SingleCandidate: Key
    """
    """

    Key_Slash: Key
    """
    """

    Key_Sleep: Key
    """
    """

    Key_Space: Key
    """
    """

    Key_Spell: Key
    """
    """

    Key_SplitScreen: Key
    """
    """

    Key_Standby: Key
    """
    """

    Key_Stop: Key
    """
    """

    Key_Subtitle: Key
    """
    """

    Key_Super_L: Key
    """
    """

    Key_Super_R: Key
    """
    """

    Key_Support: Key
    """
    """

    Key_Suspend: Key
    """
    """

    Key_SysReq: Key
    """
    """

    Key_T: Key
    """
    """

    Key_THORN: Key
    """
    """

    Key_Tab: Key
    """
    """

    Key_TaskPane: Key
    """
    """

    Key_Terminal: Key
    """
    """

    Key_Time: Key
    """
    """

    Key_ToDoList: Key
    """
    """

    Key_ToggleCallHangup: Key
    """
    """

    Key_Tools: Key
    """
    """

    Key_TopMenu: Key
    """
    """

    Key_Touroku: Key
    """
    """

    Key_Travel: Key
    """
    """

    Key_TrebleDown: Key
    """
    """

    Key_TrebleUp: Key
    """
    """

    Key_U: Key
    """
    """

    Key_UWB: Key
    """
    """

    Key_Uacute: Key
    """
    """

    Key_Ucircumflex: Key
    """
    """

    Key_Udiaeresis: Key
    """
    """

    Key_Ugrave: Key
    """
    """

    Key_Underscore: Key
    """
    """

    Key_Up: Key
    """
    """

    Key_V: Key
    """
    """

    Key_Video: Key
    """
    """

    Key_View: Key
    """
    """

    Key_VoiceDial: Key
    """
    """

    Key_VolumeDown: Key
    """
    """

    Key_VolumeMute: Key
    """
    """

    Key_VolumeUp: Key
    """
    """

    Key_W: Key
    """
    """

    Key_WLAN: Key
    """
    """

    Key_WWW: Key
    """
    """

    Key_WakeUp: Key
    """
    """

    Key_WebCam: Key
    """
    """

    Key_Word: Key
    """
    """

    Key_X: Key
    """
    """

    Key_Xfer: Key
    """
    """

    Key_Y: Key
    """
    """

    Key_Yacute: Key
    """
    """

    Key_Yes: Key
    """
    """

    Key_Z: Key
    """
    """

    Key_Zenkaku: Key
    """
    """

    Key_Zenkaku_Hankaku: Key
    """
    """

    Key_Zoom: Key
    """
    """

    Key_ZoomIn: Key
    """
    """

    Key_ZoomOut: Key
    """
    """

    Key_acute: Key
    """
    """

    Key_brokenbar: Key
    """
    """

    Key_cedilla: Key
    """
    """

    Key_cent: Key
    """
    """

    Key_copyright: Key
    """
    """

    Key_currency: Key
    """
    """

    Key_degree: Key
    """
    """

    Key_diaeresis: Key
    """
    """

    Key_division: Key
    """
    """

    Key_exclamdown: Key
    """
    """

    Key_guillemotleft: Key
    """
    """

    Key_guillemotright: Key
    """
    """

    Key_hyphen: Key
    """
    """

    Key_iTouch: Key
    """
    """

    Key_macron: Key
    """
    """

    Key_masculine: Key
    """
    """

    Key_mu: Key
    """
    """

    Key_multiply: Key
    """
    """

    Key_nobreakspace: Key
    """
    """

    Key_notsign: Key
    """
    """

    Key_onehalf: Key
    """
    """

    Key_onequarter: Key
    """
    """

    Key_onesuperior: Key
    """
    """

    Key_ordfeminine: Key
    """
    """

    Key_paragraph: Key
    """
    """

    Key_periodcentered: Key
    """
    """

    Key_plusminus: Key
    """
    """

    Key_questiondown: Key
    """
    """

    Key_registered: Key
    """
    """

    Key_section: Key
    """
    """

    Key_ssharp: Key
    """
    """

    Key_sterling: Key
    """
    """

    Key_threequarters: Key
    """
    """

    Key_threesuperior: Key
    """
    """

    Key_twosuperior: Key
    """
    """

    Key_unknown: Key
    """
    """

    Key_ydiaeresis: Key
    """
    """

    Key_yen: Key
    """
    """

    KeyboardModifier: ...
    """
    """

    KeyboardModifierMask: ...
    """
    """

    KeyboardModifiers: ...
    """
    """

    KeypadModifier: Key
    """
    """

    LastCursor: ... = PySide.QtCore.Qt.CursorShape.LastCursor
    """
    """

    LastGestureType: ... = PySide.QtCore.Qt.GestureType.LastGestureType
    """
    """

    LayoutDirection: ...
    """
    """

    LayoutDirectionAuto: ...
    """
    """

    LeftArrow: ... = PySide.QtCore.Qt.ArrowType.LeftArrow
    """
    """

    LeftButton: ... = PySide.QtCore.Qt.MouseButton.LeftButton
    """
    """

    LeftDockWidgetArea: ...
    """
    """

    LeftSection: ... = PySide.QtCore.Qt.WindowFrameSection.LeftSection
    """
    """

    LeftToRight: ... = PySide.QtCore.Qt.LayoutDirection.LeftToRight
    """
    """

    LeftToolBarArea: ... = PySide.QtCore.Qt.ToolBarArea.LeftToolBarArea
    """
    """

    LinearGradientPattern: ...
    """
    """

    LinkAction: ... = PySide.QtCore.Qt.DropAction.LinkAction
    """
    """

    LinksAccessibleByKeyboard: ...
    """
    """

    LinksAccessibleByMouse: ...
    """
    """

    LocalDate: ... = PySide.QtCore.Qt.DateFormat.LocalDate
    """
    """

    LocalTime: ... = PySide.QtCore.Qt.TimeSpec.LocalTime
    """
    """

    LocaleDate: ... = PySide.QtCore.Qt.DateFormat.LocaleDate
    """
    """

    LogText: ... = PySide.QtCore.Qt.TextFormat.LogText
    """
    """

    LogicalCoordinates: ...
    """
    """

    LogicalMoveStyle: ... = PySide.QtCore.Qt.CursorMoveStyle.LogicalMoveStyle
    """
    """

    LowEventPriority: ... = PySide.QtCore.Qt.EventPriority.LowEventPriority
    """
    """

    META: ... = PySide.QtCore.Qt.Modifier.META
    """
    """

    MODIFIER_MASK: ... = PySide.QtCore.Qt.Modifier.MODIFIER_MASK
    """
    """

    MPenCapStyle: ... = PySide.QtCore.Qt.PenCapStyle.MPenCapStyle
    """
    """

    MPenJoinStyle: ... = PySide.QtCore.Qt.PenJoinStyle.MPenJoinStyle
    """
    """

    MPenStyle: ... = PySide.QtCore.Qt.PenStyle.MPenStyle
    """
    """

    MSWindowsFixedSizeDialogHint: ...
    """
    """

    MSWindowsOwnDC: ... = PySide.QtCore.Qt.WindowType.MSWindowsOwnDC
    """
    """

    MacWindowToolBarButtonHint: ...
    """
    """

    MaskInColor: ... = PySide.QtCore.Qt.MaskMode.MaskInColor
    """
    """

    MaskMode: ...
    """
    """

    MaskOutColor: ... = PySide.QtCore.Qt.MaskMode.MaskOutColor
    """
    """

    MatchCaseSensitive: ... = PySide.QtCore.Qt.MatchFlag.MatchCaseSensitive
    """
    """

    MatchContains: ... = PySide.QtCore.Qt.MatchFlag.MatchContains
    """
    """

    MatchEndsWith: ... = PySide.QtCore.Qt.MatchFlag.MatchEndsWith
    """
    """

    MatchExactly: ... = PySide.QtCore.Qt.MatchFlag.MatchExactly
    """
    """

    MatchFixedString: ... = PySide.QtCore.Qt.MatchFlag.MatchFixedString
    """
    """

    MatchFlag: ...
    """
    """

    MatchFlags: ...
    """
    """

    MatchRecursive: ... = PySide.QtCore.Qt.MatchFlag.MatchRecursive
    """
    """

    MatchRegExp: ... = PySide.QtCore.Qt.MatchFlag.MatchRegExp
    """
    """

    MatchStartsWith: ... = PySide.QtCore.Qt.MatchFlag.MatchStartsWith
    """
    """

    MatchWildcard: ... = PySide.QtCore.Qt.MatchFlag.MatchWildcard
    """
    """

    MatchWrap: ... = PySide.QtCore.Qt.MatchFlag.MatchWrap
    """
    """

    MaximumSize: ... = PySide.QtCore.Qt.SizeHint.MaximumSize
    """
    """

    MenuBarFocusReason: ... = PySide.QtCore.Qt.FocusReason.MenuBarFocusReason
    """
    """

    MetaModifier: Key
    """
    """

    MidButton: ... = PySide.QtCore.Qt.MouseButton.MidButton
    """
    """

    MiddleButton: ... = PySide.QtCore.Qt.MouseButton.MiddleButton
    """
    """

    MinimumDescent: ... = PySide.QtCore.Qt.SizeHint.MinimumDescent
    """
    """

    MinimumSize: ... = PySide.QtCore.Qt.SizeHint.MinimumSize
    """
    """

    MiterJoin: ... = PySide.QtCore.Qt.PenJoinStyle.MiterJoin
    """
    """

    Modifier: ...
    """
    """

    Monday: ... = PySide.QtCore.Qt.DayOfWeek.Monday
    """
    """

    MonoOnly: ... = PySide.QtCore.Qt.ImageConversionFlag.MonoOnly
    """
    """

    MouseButton: ...
    """
    """

    MouseButtonMask: ... = PySide.QtCore.Qt.MouseButton.MouseButtonMask
    """
    """

    MouseButtons: ...
    """
    """

    MouseFocusReason: ... = PySide.QtCore.Qt.FocusReason.MouseFocusReason
    """
    """

    MoveAction: ... = PySide.QtCore.Qt.DropAction.MoveAction
    """
    """

    NDockWidgetAreas: ...
    """
    """

    NSizeHints: ... = PySide.QtCore.Qt.SizeHint.NSizeHints
    """
    """

    NToolBarAreas: ... = PySide.QtCore.Qt.ToolBarAreaSizes.NToolBarAreas
    """
    """

    NavigationMode: ...
    """
    """

    NavigationModeCursorAuto: ...
    """
    """

    NavigationModeCursorForceVisible: ...
    """
    """

    NavigationModeKeypadDirectional: ...
    """
    """

    NavigationModeKeypadTabOrder: ...
    """
    """

    NavigationModeNone: ...
    """
    """

    NoAlpha: ... = PySide.QtCore.Qt.ImageConversionFlag.NoAlpha
    """
    """

    NoArrow: ... = PySide.QtCore.Qt.ArrowType.NoArrow
    """
    """

    NoBrush: ... = PySide.QtCore.Qt.BrushStyle.NoBrush
    """
    """

    NoButton: ... = PySide.QtCore.Qt.MouseButton.NoButton
    """
    """

    NoClip: ... = PySide.QtCore.Qt.ClipOperation.NoClip
    """
    """

    NoContextMenu: ... = PySide.QtCore.Qt.ContextMenuPolicy.NoContextMenu
    """
    """

    NoDockWidgetArea: ... = PySide.QtCore.Qt.DockWidgetArea.NoDockWidgetArea
    """
    """

    NoFocus: ... = PySide.QtCore.Qt.FocusPolicy.NoFocus
    """
    """

    NoFocusReason: ... = PySide.QtCore.Qt.FocusReason.NoFocusReason
    """
    """

    NoFormatConversion: ...
    """
    """

    NoGesture: ... = PySide.QtCore.Qt.GestureState.NoGesture
    """
    """

    NoItemFlags: ... = PySide.QtCore.Qt.ItemFlag.NoItemFlags
    """
    """

    NoModifier: Key
    """
    """

    NoOpaqueDetection: ...
    """
    """

    NoPen: ... = PySide.QtCore.Qt.PenStyle.NoPen
    """
    """

    NoSection: ... = PySide.QtCore.Qt.WindowFrameSection.NoSection
    """
    """

    NoTextInteraction: ...
    """
    """

    NoToolBarArea: ... = PySide.QtCore.Qt.ToolBarArea.NoToolBarArea
    """
    """

    NonModal: ... = PySide.QtCore.Qt.WindowModality.NonModal
    """
    """

    NormalEventPriority: ...
    """
    """

    OddEvenFill: ... = PySide.QtCore.Qt.FillRule.OddEvenFill
    """
    """

    OffsetFromUTC: ... = PySide.QtCore.Qt.TimeSpec.OffsetFromUTC
    """
    """

    OpaqueMode: ... = PySide.QtCore.Qt.BGMode.OpaqueMode
    """
    """

    OpenHandCursor: ... = PySide.QtCore.Qt.CursorShape.OpenHandCursor
    """
    """

    OrderedAlphaDither: ...
    """
    """

    OrderedDither: ... = PySide.QtCore.Qt.ImageConversionFlag.OrderedDither
    """
    """

    Orientation: ...
    """
    """

    Orientations: ...
    """
    """

    OtherFocusReason: ... = PySide.QtCore.Qt.FocusReason.OtherFocusReason
    """
    """

    PanGesture: ... = PySide.QtCore.Qt.GestureType.PanGesture
    """
    """

    PartiallyChecked: ... = PySide.QtCore.Qt.CheckState.PartiallyChecked
    """
    """

    PenCapStyle: ...
    """
    """

    PenJoinStyle: ...
    """
    """

    PenStyle: ...
    """
    """

    PinchGesture: ... = PySide.QtCore.Qt.GestureType.PinchGesture
    """
    """

    PlainText: ... = PySide.QtCore.Qt.TextFormat.PlainText
    """
    """

    PointingHandCursor: ... = PySide.QtCore.Qt.CursorShape.PointingHandCursor
    """
    """

    Popup: ... = PySide.QtCore.Qt.WindowType.Popup
    """
    """

    PopupFocusReason: ... = PySide.QtCore.Qt.FocusReason.PopupFocusReason
    """
    """

    PreferDither: ... = PySide.QtCore.Qt.ImageConversionFlag.PreferDither
    """
    """

    PreferredSize: ... = PySide.QtCore.Qt.SizeHint.PreferredSize
    """
    """

    PreventContextMenu: ...
    """
    """

    QueuedConnection: ... = PySide.QtCore.Qt.ConnectionType.QueuedConnection
    """
    """

    RadialGradientPattern: ...
    """
    """

    ReceivePartialGestures: ...
    """
    """

    RelativeSize: ... = PySide.QtCore.Qt.SizeMode.RelativeSize
    """
    """

    RepeatTile: ... = PySide.QtCore.Qt.TileRule.RepeatTile
    """
    """

    ReplaceClip: ... = PySide.QtCore.Qt.ClipOperation.ReplaceClip
    """
    """

    RichText: ... = PySide.QtCore.Qt.TextFormat.RichText
    """
    """

    RightArrow: ... = PySide.QtCore.Qt.ArrowType.RightArrow
    """
    """

    RightButton: ... = PySide.QtCore.Qt.MouseButton.RightButton
    """
    """

    RightDockWidgetArea: ...
    """
    """

    RightSection: ... = PySide.QtCore.Qt.WindowFrameSection.RightSection
    """
    """

    RightToLeft: ... = PySide.QtCore.Qt.LayoutDirection.RightToLeft
    """
    """

    RightToolBarArea: ... = PySide.QtCore.Qt.ToolBarArea.RightToolBarArea
    """
    """

    RoundCap: ... = PySide.QtCore.Qt.PenCapStyle.RoundCap
    """
    """

    RoundJoin: ... = PySide.QtCore.Qt.PenJoinStyle.RoundJoin
    """
    """

    RoundTile: ... = PySide.QtCore.Qt.TileRule.RoundTile
    """
    """

    SHIFT: ... = PySide.QtCore.Qt.Modifier.SHIFT
    """
    """

    Saturday: ... = PySide.QtCore.Qt.DayOfWeek.Saturday
    """
    """

    ScrollBarAlwaysOff: ...
    """
    """

    ScrollBarAlwaysOn: ... = PySide.QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn
    """
    """

    ScrollBarAsNeeded: ... = PySide.QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded
    """
    """

    ScrollBarPolicy: ...
    """
    """

    Sheet: ... = PySide.QtCore.Qt.WindowType.Sheet
    """
    """

    ShiftModifier: Key
    """
    """

    ShortcutContext: ...
    """
    """

    ShortcutFocusReason: ... = PySide.QtCore.Qt.FocusReason.ShortcutFocusReason
    """
    """

    SizeAllCursor: ... = PySide.QtCore.Qt.CursorShape.SizeAllCursor
    """
    """

    SizeBDiagCursor: ... = PySide.QtCore.Qt.CursorShape.SizeBDiagCursor
    """
    """

    SizeFDiagCursor: ... = PySide.QtCore.Qt.CursorShape.SizeFDiagCursor
    """
    """

    SizeHint: ...
    """
    """

    SizeHintRole: ... = PySide.QtCore.Qt.ItemDataRole.SizeHintRole
    """
    """

    SizeHorCursor: ... = PySide.QtCore.Qt.CursorShape.SizeHorCursor
    """
    """

    SizeMode: ...
    """
    """

    SizeVerCursor: ... = PySide.QtCore.Qt.CursorShape.SizeVerCursor
    """
    """

    SmoothTransformation: ...
    """
    """

    SolidLine: ... = PySide.QtCore.Qt.PenStyle.SolidLine
    """
    """

    SolidPattern: ... = PySide.QtCore.Qt.BrushStyle.SolidPattern
    """
    """

    SortOrder: ...
    """
    """

    SplashScreen: ... = PySide.QtCore.Qt.WindowType.SplashScreen
    """
    """

    SplitHCursor: ... = PySide.QtCore.Qt.CursorShape.SplitHCursor
    """
    """

    SplitVCursor: ... = PySide.QtCore.Qt.CursorShape.SplitVCursor
    """
    """

    SquareCap: ... = PySide.QtCore.Qt.PenCapStyle.SquareCap
    """
    """

    StatusTipPropertyRole: ...
    """
    """

    StatusTipRole: ... = PySide.QtCore.Qt.ItemDataRole.StatusTipRole
    """
    """

    StretchTile: ... = PySide.QtCore.Qt.TileRule.StretchTile
    """
    """

    StrongFocus: ... = PySide.QtCore.Qt.FocusPolicy.StrongFocus
    """
    """

    SubWindow: ... = PySide.QtCore.Qt.WindowType.SubWindow
    """
    """

    Sunday: ... = PySide.QtCore.Qt.DayOfWeek.Sunday
    """
    """

    SvgMiterJoin: ... = PySide.QtCore.Qt.PenJoinStyle.SvgMiterJoin
    """
    """

    SwipeGesture: ... = PySide.QtCore.Qt.GestureType.SwipeGesture
    """
    """

    SystemLocaleDate: ... = PySide.QtCore.Qt.DateFormat.SystemLocaleDate
    """
    """

    SystemLocaleLongDate: ...
    """
    """

    SystemLocaleShortDate: ...
    """
    """

    TabFocus: ... = PySide.QtCore.Qt.FocusPolicy.TabFocus
    """
    """

    TabFocusReason: ... = PySide.QtCore.Qt.FocusReason.TabFocusReason
    """
    """

    TapAndHoldGesture: ... = PySide.QtCore.Qt.GestureType.TapAndHoldGesture
    """
    """

    TapGesture: ... = PySide.QtCore.Qt.GestureType.TapGesture
    """
    """

    TargetMoveAction: ... = PySide.QtCore.Qt.DropAction.TargetMoveAction
    """
    """

    TextAlignmentRole: ... = PySide.QtCore.Qt.ItemDataRole.TextAlignmentRole
    """
    """

    TextBrowserInteraction: ...
    """
    """

    TextBypassShaping: ... = PySide.QtCore.Qt.TextFlag.TextBypassShaping
    """
    """

    TextColorRole: ... = PySide.QtCore.Qt.ItemDataRole.TextColorRole
    """
    """

    TextDate: ... = PySide.QtCore.Qt.DateFormat.TextDate
    """
    """

    TextDontClip: ... = PySide.QtCore.Qt.TextFlag.TextDontClip
    """
    """

    TextDontPrint: ... = PySide.QtCore.Qt.TextFlag.TextDontPrint
    """
    """

    TextEditable: ... = PySide.QtCore.Qt.TextInteractionFlag.TextEditable
    """
    """

    TextEditorInteraction: ...
    """
    """

    TextElideMode: ...
    """
    """

    TextExpandTabs: ... = PySide.QtCore.Qt.TextFlag.TextExpandTabs
    """
    """

    TextFlag: ...
    """
    """

    TextForceLeftToRight: ... = PySide.QtCore.Qt.TextFlag.TextForceLeftToRight
    """
    """

    TextForceRightToLeft: ... = PySide.QtCore.Qt.TextFlag.TextForceRightToLeft
    """
    """

    TextFormat: ...
    """
    """

    TextHideMnemonic: ... = PySide.QtCore.Qt.TextFlag.TextHideMnemonic
    """
    """

    TextIncludeTrailingSpaces: ...
    """
    """

    TextInteractionFlag: ...
    """
    """

    TextInteractionFlags: ...
    """
    """

    TextJustificationForced: ...
    """
    """

    TextLongestVariant: ... = PySide.QtCore.Qt.TextFlag.TextLongestVariant
    """
    """

    TextSelectableByKeyboard: ...
    """
    """

    TextSelectableByMouse: ...
    """
    """

    TextShowMnemonic: ... = PySide.QtCore.Qt.TextFlag.TextShowMnemonic
    """
    """

    TextSingleLine: ... = PySide.QtCore.Qt.TextFlag.TextSingleLine
    """
    """

    TextWordWrap: ... = PySide.QtCore.Qt.TextFlag.TextWordWrap
    """
    """

    TextWrapAnywhere: ... = PySide.QtCore.Qt.TextFlag.TextWrapAnywhere
    """
    """

    TexturePattern: ... = PySide.QtCore.Qt.BrushStyle.TexturePattern
    """
    """

    ThresholdAlphaDither: ...
    """
    """

    ThresholdDither: ... = PySide.QtCore.Qt.ImageConversionFlag.ThresholdDither
    """
    """

    Thursday: ... = PySide.QtCore.Qt.DayOfWeek.Thursday
    """
    """

    TileRule: ...
    """
    """

    TimeSpec: ...
    """
    """

    TitleBarArea: ... = PySide.QtCore.Qt.WindowFrameSection.TitleBarArea
    """
    """

    Tool: ... = PySide.QtCore.Qt.WindowType.Tool
    """
    """

    ToolBarArea: ...
    """
    """

    ToolBarAreaSizes: ...
    """
    """

    ToolBarArea_Mask: ... = PySide.QtCore.Qt.ToolBarArea.ToolBarArea_Mask
    """
    """

    ToolBarAreas: ...
    """
    """

    ToolButtonFollowStyle: ...
    """
    """

    ToolButtonIconOnly: ...
    """
    """

    ToolButtonStyle: ...
    """
    """

    ToolButtonTextBesideIcon: ...
    """
    """

    ToolButtonTextOnly: ...
    """
    """

    ToolButtonTextUnderIcon: ...
    """
    """

    ToolTip: ... = PySide.QtCore.Qt.WindowType.ToolTip
    """
    """

    ToolTipPropertyRole: ...
    """
    """

    ToolTipRole: ... = PySide.QtCore.Qt.ItemDataRole.ToolTipRole
    """
    """

    TopDockWidgetArea: ... = PySide.QtCore.Qt.DockWidgetArea.TopDockWidgetArea
    """
    """

    TopLeftCorner: ... = PySide.QtCore.Qt.Corner.TopLeftCorner
    """
    """

    TopLeftSection: ... = PySide.QtCore.Qt.WindowFrameSection.TopLeftSection
    """
    """

    TopRightCorner: ... = PySide.QtCore.Qt.Corner.TopRightCorner
    """
    """

    TopRightSection: ... = PySide.QtCore.Qt.WindowFrameSection.TopRightSection
    """
    """

    TopSection: ... = PySide.QtCore.Qt.WindowFrameSection.TopSection
    """
    """

    TopToolBarArea: ... = PySide.QtCore.Qt.ToolBarArea.TopToolBarArea
    """
    """

    TouchPointMoved: ... = PySide.QtCore.Qt.TouchPointState.TouchPointMoved
    """
    """

    TouchPointPressed: ... = PySide.QtCore.Qt.TouchPointState.TouchPointPressed
    """
    """

    TouchPointPrimary: ... = PySide.QtCore.Qt.TouchPointState.TouchPointPrimary
    """
    """

    TouchPointReleased: ...
    """
    """

    TouchPointState: ...
    """
    """

    TouchPointStateMask: ...
    """
    """

    TouchPointStationary: ...
    """
    """

    TransformationMode: ...
    """
    """

    TransparentMode: ... = PySide.QtCore.Qt.BGMode.TransparentMode
    """
    """

    Tuesday: ... = PySide.QtCore.Qt.DayOfWeek.Tuesday
    """
    """

    UIEffect: ...
    """
    """

    UI_AnimateCombo: ... = PySide.QtCore.Qt.UIEffect.UI_AnimateCombo
    """
    """

    UI_AnimateMenu: ... = PySide.QtCore.Qt.UIEffect.UI_AnimateMenu
    """
    """

    UI_AnimateToolBox: ... = PySide.QtCore.Qt.UIEffect.UI_AnimateToolBox
    """
    """

    UI_AnimateTooltip: ... = PySide.QtCore.Qt.UIEffect.UI_AnimateTooltip
    """
    """

    UI_FadeMenu: ... = PySide.QtCore.Qt.UIEffect.UI_FadeMenu
    """
    """

    UI_FadeTooltip: ... = PySide.QtCore.Qt.UIEffect.UI_FadeTooltip
    """
    """

    UI_General: ... = PySide.QtCore.Qt.UIEffect.UI_General
    """
    """

    UNICODE_ACCEL: ... = PySide.QtCore.Qt.Modifier.UNICODE_ACCEL
    """
    """

    UTC: ... = PySide.QtCore.Qt.TimeSpec.UTC
    """
    """

    Unchecked: ... = PySide.QtCore.Qt.CheckState.Unchecked
    """
    """

    UniqueConnection: ... = PySide.QtCore.Qt.ConnectionType.UniqueConnection
    """
    """

    UniteClip: ... = PySide.QtCore.Qt.ClipOperation.UniteClip
    """
    """

    UpArrow: ... = PySide.QtCore.Qt.ArrowType.UpArrow
    """
    """

    UpArrowCursor: ... = PySide.QtCore.Qt.CursorShape.UpArrowCursor
    """
    """

    UserRole: ... = PySide.QtCore.Qt.ItemDataRole.UserRole
    """
    """

    VerPattern: ... = PySide.QtCore.Qt.BrushStyle.VerPattern
    """
    """

    Vertical: ... = PySide.QtCore.Qt.Orientation.Vertical
    """
    """

    VisualMoveStyle: ... = PySide.QtCore.Qt.CursorMoveStyle.VisualMoveStyle
    """
    """

    WA_AcceptDrops: ... = PySide.QtCore.Qt.WidgetAttribute.WA_AcceptDrops
    """
    """

    WA_AcceptTouchEvents: ...
    """
    """

    WA_AlwaysShowToolTips: ...
    """
    """

    WA_AttributeCount: ... = PySide.QtCore.Qt.WidgetAttribute.WA_AttributeCount
    """
    """

    WA_AutoOrientation: ...
    """
    """

    WA_CanHostQMdiSubWindowTitleBar: ...
    """
    """

    WA_ContentsPropagated: ...
    """
    """

    WA_CustomWhatsThis: ...
    """
    """

    WA_DeleteOnClose: ... = PySide.QtCore.Qt.WidgetAttribute.WA_DeleteOnClose
    """
    """

    WA_Disabled: ... = PySide.QtCore.Qt.WidgetAttribute.WA_Disabled
    """
    """

    WA_DontCreateNativeAncestors: ...
    """
    """

    WA_DontShowOnScreen: ...
    """
    """

    WA_DropSiteRegistered: ...
    """
    """

    WA_ForceAcceptDrops: ...
    """
    """

    WA_ForceDisabled: ... = PySide.QtCore.Qt.WidgetAttribute.WA_ForceDisabled
    """
    """

    WA_ForceUpdatesDisabled: ...
    """
    """

    WA_GrabbedShortcut: ...
    """
    """

    WA_GroupLeader: ... = PySide.QtCore.Qt.WidgetAttribute.WA_GroupLeader
    """
    """

    WA_Hover: ... = PySide.QtCore.Qt.WidgetAttribute.WA_Hover
    """
    """

    WA_InputMethodEnabled: ...
    """
    """

    WA_InputMethodTransparent: ...
    """
    """

    WA_InvalidSize: ... = PySide.QtCore.Qt.WidgetAttribute.WA_InvalidSize
    """
    """

    WA_KeyCompression: ... = PySide.QtCore.Qt.WidgetAttribute.WA_KeyCompression
    """
    """

    WA_KeyboardFocusChange: ...
    """
    """

    WA_LaidOut: ... = PySide.QtCore.Qt.WidgetAttribute.WA_LaidOut
    """
    """

    WA_LayoutOnEntireRect: ...
    """
    """

    WA_LayoutUsesWidgetRect: ...
    """
    """

    WA_LockLandscapeOrientation: ...
    """
    """

    WA_LockPortraitOrientation: ...
    """
    """

    WA_MSWindowsUseDirect3D: ...
    """
    """

    WA_MacAlwaysShowToolWindow: ...
    """
    """

    WA_MacBrushedMetal: ...
    """
    """

    WA_MacFrameworkScaled: ...
    """
    """

    WA_MacMetalStyle: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MacMetalStyle
    """
    """

    WA_MacMiniSize: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MacMiniSize
    """
    """

    WA_MacNoClickThrough: ...
    """
    """

    WA_MacNoShadow: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MacNoShadow
    """
    """

    WA_MacNormalSize: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MacNormalSize
    """
    """

    WA_MacOpaqueSizeGrip: ...
    """
    """

    WA_MacShowFocusRect: ...
    """
    """

    WA_MacSmallSize: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MacSmallSize
    """
    """

    WA_MacVariableSize: ...
    """
    """

    WA_Mapped: ... = PySide.QtCore.Qt.WidgetAttribute.WA_Mapped
    """
    """

    WA_MergeSoftkeys: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MergeSoftkeys
    """
    """

    WA_MergeSoftkeysRecursively: ...
    """
    """

    WA_MouseNoMask: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MouseNoMask
    """
    """

    WA_MouseTracking: ... = PySide.QtCore.Qt.WidgetAttribute.WA_MouseTracking
    """
    """

    WA_Moved: ... = PySide.QtCore.Qt.WidgetAttribute.WA_Moved
    """
    """

    WA_NativeWindow: ... = PySide.QtCore.Qt.WidgetAttribute.WA_NativeWindow
    """
    """

    WA_NoBackground: ... = PySide.QtCore.Qt.WidgetAttribute.WA_NoBackground
    """
    """

    WA_NoChildEventsForParent: ...
    """
    """

    WA_NoChildEventsFromChildren: ...
    """
    """

    WA_NoMousePropagation: ...
    """
    """

    WA_NoMouseReplay: ... = PySide.QtCore.Qt.WidgetAttribute.WA_NoMouseReplay
    """
    """

    WA_NoSystemBackground: ...
    """
    """

    WA_NoX11EventCompression: ...
    """
    """

    WA_OpaquePaintEvent: ...
    """
    """

    WA_OutsideWSRange: ... = PySide.QtCore.Qt.WidgetAttribute.WA_OutsideWSRange
    """
    """

    WA_PaintOnScreen: ... = PySide.QtCore.Qt.WidgetAttribute.WA_PaintOnScreen
    """
    """

    WA_PaintOutsidePaintEvent: ...
    """
    """

    WA_PaintUnclipped: ... = PySide.QtCore.Qt.WidgetAttribute.WA_PaintUnclipped
    """
    """

    WA_PendingMoveEvent: ...
    """
    """

    WA_PendingResizeEvent: ...
    """
    """

    WA_PendingUpdate: ... = PySide.QtCore.Qt.WidgetAttribute.WA_PendingUpdate
    """
    """

    WA_QuitOnClose: ... = PySide.QtCore.Qt.WidgetAttribute.WA_QuitOnClose
    """
    """

    WA_Resized: ... = PySide.QtCore.Qt.WidgetAttribute.WA_Resized
    """
    """

    WA_RightToLeft: ... = PySide.QtCore.Qt.WidgetAttribute.WA_RightToLeft
    """
    """

    WA_SetCursor: ... = PySide.QtCore.Qt.WidgetAttribute.WA_SetCursor
    """
    """

    WA_SetFont: ... = PySide.QtCore.Qt.WidgetAttribute.WA_SetFont
    """
    """

    WA_SetLayoutDirection: ...
    """
    """

    WA_SetLocale: ... = PySide.QtCore.Qt.WidgetAttribute.WA_SetLocale
    """
    """

    WA_SetPalette: ... = PySide.QtCore.Qt.WidgetAttribute.WA_SetPalette
    """
    """

    WA_SetStyle: ... = PySide.QtCore.Qt.WidgetAttribute.WA_SetStyle
    """
    """

    WA_SetWindowIcon: ... = PySide.QtCore.Qt.WidgetAttribute.WA_SetWindowIcon
    """
    """

    WA_SetWindowModality: ...
    """
    """

    WA_ShowModal: ... = PySide.QtCore.Qt.WidgetAttribute.WA_ShowModal
    """
    """

    WA_ShowWithoutActivating: ...
    """
    """

    WA_StaticContents: ... = PySide.QtCore.Qt.WidgetAttribute.WA_StaticContents
    """
    """

    WA_StyleSheet: ... = PySide.QtCore.Qt.WidgetAttribute.WA_StyleSheet
    """
    """

    WA_StyledBackground: ...
    """
    """

    WA_SymbianNoSystemRotation: ...
    """
    """

    WA_TintedBackground: ...
    """
    """

    WA_TouchPadAcceptSingleTouchEvents: ...
    """
    """

    WA_TranslucentBackground: ...
    """
    """

    WA_TransparentForMouseEvents: ...
    """
    """

    WA_UnderMouse: ... = PySide.QtCore.Qt.WidgetAttribute.WA_UnderMouse
    """
    """

    WA_UpdatesDisabled: ...
    """
    """

    WA_WState_AcceptedTouchBeginEvent: ...
    """
    """

    WA_WState_CompressKeys: ...
    """
    """

    WA_WState_ConfigPending: ...
    """
    """

    WA_WState_Created: ... = PySide.QtCore.Qt.WidgetAttribute.WA_WState_Created
    """
    """

    WA_WState_DND: ... = PySide.QtCore.Qt.WidgetAttribute.WA_WState_DND
    """
    """

    WA_WState_ExplicitShowHide: ...
    """
    """

    WA_WState_Hidden: ... = PySide.QtCore.Qt.WidgetAttribute.WA_WState_Hidden
    """
    """

    WA_WState_InPaintEvent: ...
    """
    """

    WA_WState_OwnSizePolicy: ...
    """
    """

    WA_WState_Polished: ...
    """
    """

    WA_WState_Reparented: ...
    """
    """

    WA_WState_Visible: ... = PySide.QtCore.Qt.WidgetAttribute.WA_WState_Visible
    """
    """

    WA_WState_WindowOpacitySet: ...
    """
    """

    WA_WindowModified: ... = PySide.QtCore.Qt.WidgetAttribute.WA_WindowModified
    """
    """

    WA_WindowPropagation: ...
    """
    """

    WA_X11BypassTransientForHint: ...
    """
    """

    WA_X11DoNotAcceptFocus: ...
    """
    """

    WA_X11NetWmWindowTypeCombo: ...
    """
    """

    WA_X11NetWmWindowTypeDND: ...
    """
    """

    WA_X11NetWmWindowTypeDesktop: ...
    """
    """

    WA_X11NetWmWindowTypeDialog: ...
    """
    """

    WA_X11NetWmWindowTypeDock: ...
    """
    """

    WA_X11NetWmWindowTypeDropDownMenu: ...
    """
    """

    WA_X11NetWmWindowTypeMenu: ...
    """
    """

    WA_X11NetWmWindowTypeNotification: ...
    """
    """

    WA_X11NetWmWindowTypePopupMenu: ...
    """
    """

    WA_X11NetWmWindowTypeSplash: ...
    """
    """

    WA_X11NetWmWindowTypeToolBar: ...
    """
    """

    WA_X11NetWmWindowTypeToolTip: ...
    """
    """

    WA_X11NetWmWindowTypeUtility: ...
    """
    """

    WA_X11OpenGLOverlay: ...
    """
    """

    WaitCursor: ... = PySide.QtCore.Qt.CursorShape.WaitCursor
    """
    """

    Wednesday: ... = PySide.QtCore.Qt.DayOfWeek.Wednesday
    """
    """

    WhatsThisCursor: ... = PySide.QtCore.Qt.CursorShape.WhatsThisCursor
    """
    """

    WhatsThisPropertyRole: ...
    """
    """

    WhatsThisRole: ... = PySide.QtCore.Qt.ItemDataRole.WhatsThisRole
    """
    """

    WheelFocus: ... = PySide.QtCore.Qt.FocusPolicy.WheelFocus
    """
    """

    WhiteSpaceMode: ...
    """
    """

    WhiteSpaceModeUndefined: ...
    """
    """

    WhiteSpaceNoWrap: ... = PySide.QtCore.Qt.WhiteSpaceMode.WhiteSpaceNoWrap
    """
    """

    WhiteSpaceNormal: ... = PySide.QtCore.Qt.WhiteSpaceMode.WhiteSpaceNormal
    """
    """

    WhiteSpacePre: ... = PySide.QtCore.Qt.WhiteSpaceMode.WhiteSpacePre
    """
    """

    Widget: ... = PySide.QtCore.Qt.WindowType.Widget
    """
    """

    WidgetAttribute: ...
    """
    """

    WidgetShortcut: ... = PySide.QtCore.Qt.ShortcutContext.WidgetShortcut
    """
    """

    WidgetWithChildrenShortcut: ...
    """
    """

    WindingFill: ... = PySide.QtCore.Qt.FillRule.WindingFill
    """
    """

    Window: ... = PySide.QtCore.Qt.WindowType.Window
    """
    """

    WindowActive: ... = PySide.QtCore.Qt.WindowState.WindowActive
    """
    """

    WindowCancelButtonHint: ...
    """
    """

    WindowCloseButtonHint: ...
    """
    """

    WindowContextHelpButtonHint: ...
    """
    """

    WindowFlags: ...
    """
    """

    WindowFrameSection: ...
    """
    """

    WindowFullScreen: ... = PySide.QtCore.Qt.WindowState.WindowFullScreen
    """
    """

    WindowMaximizeButtonHint: ...
    """
    """

    WindowMaximized: ... = PySide.QtCore.Qt.WindowState.WindowMaximized
    """
    """

    WindowMinMaxButtonsHint: ...
    """
    """

    WindowMinimizeButtonHint: ...
    """
    """

    WindowMinimized: ... = PySide.QtCore.Qt.WindowState.WindowMinimized
    """
    """

    WindowModal: ... = PySide.QtCore.Qt.WindowModality.WindowModal
    """
    """

    WindowModality: ...
    """
    """

    WindowNoState: ... = PySide.QtCore.Qt.WindowState.WindowNoState
    """
    """

    WindowOkButtonHint: ... = PySide.QtCore.Qt.WindowType.WindowOkButtonHint
    """
    """

    WindowShadeButtonHint: ...
    """
    """

    WindowShortcut: ... = PySide.QtCore.Qt.ShortcutContext.WindowShortcut
    """
    """

    WindowSoftkeysRespondHint: ...
    """
    """

    WindowSoftkeysVisibleHint: ...
    """
    """

    WindowState: ...
    """
    """

    WindowStates: ...
    """
    """

    WindowStaysOnBottomHint: ...
    """
    """

    WindowStaysOnTopHint: ...
    """
    """

    WindowSystemMenuHint: ...
    """
    """

    WindowTitleHint: ... = PySide.QtCore.Qt.WindowType.WindowTitleHint
    """
    """

    WindowType: ...
    """
    """

    WindowType_Mask: ... = PySide.QtCore.Qt.WindowType.WindowType_Mask
    """
    """

    X11BypassWindowManagerHint: ...
    """
    """

    XAxis: ... = PySide.QtCore.Qt.Axis.XAxis
    """
    """

    XButton1: ... = PySide.QtCore.Qt.MouseButton.XButton1
    """
    """

    XButton2: ... = PySide.QtCore.Qt.MouseButton.XButton2
    """
    """

    YAxis: ... = PySide.QtCore.Qt.Axis.YAxis
    """
    """

    ZAxis: ... = PySide.QtCore.Qt.Axis.ZAxis
    """
    """

    black: ... = PySide.QtCore.Qt.GlobalColor.black
    """
    """

    blue: ... = PySide.QtCore.Qt.GlobalColor.blue
    """
    """

    color0: ... = PySide.QtCore.Qt.GlobalColor.color0
    """
    """

    color1: ... = PySide.QtCore.Qt.GlobalColor.color1
    """
    """

    cyan: ... = PySide.QtCore.Qt.GlobalColor.cyan
    """
    """

    darkBlue: ... = PySide.QtCore.Qt.GlobalColor.darkBlue
    """
    """

    darkCyan: ... = PySide.QtCore.Qt.GlobalColor.darkCyan
    """
    """

    darkGray: ... = PySide.QtCore.Qt.GlobalColor.darkGray
    """
    """

    darkGreen: ... = PySide.QtCore.Qt.GlobalColor.darkGreen
    """
    """

    darkMagenta: ... = PySide.QtCore.Qt.GlobalColor.darkMagenta
    """
    """

    darkRed: ... = PySide.QtCore.Qt.GlobalColor.darkRed
    """
    """

    darkYellow: ... = PySide.QtCore.Qt.GlobalColor.darkYellow
    """
    """

    gray: ... = PySide.QtCore.Qt.GlobalColor.gray
    """
    """

    green: ... = PySide.QtCore.Qt.GlobalColor.green
    """
    """

    lightGray: ... = PySide.QtCore.Qt.GlobalColor.lightGray
    """
    """

    magenta: ... = PySide.QtCore.Qt.GlobalColor.magenta
    """
    """

    red: ... = PySide.QtCore.Qt.GlobalColor.red
    """
    """

    transparent: ... = PySide.QtCore.Qt.GlobalColor.transparent
    """
    """

    white: ... = PySide.QtCore.Qt.GlobalColor.white
    """
    """

    yellow: ... = PySide.QtCore.Qt.GlobalColor.yellow
    """
    """

    ...

class QtConcurrent(Shiboken.Object):
    OrderedReduce: ... = PySide.QtCore.QtConcurrent.ReduceOption.OrderedReduce
    """
    """

    ReduceOption: ...
    """
    """

    ReduceOptions: ...
    """
    """

    SequentialReduce: ...
    """
    """

    UnorderedReduce: ...
    """
    """

    ...

class QtMsgType(__builtin__.object):
    QtCriticalMsg: ... = PySide.QtCore.QtMsgType.QtCriticalMsg
    """
    """

    QtDebugMsg: ... = PySide.QtCore.QtMsgType.QtDebugMsg
    """
    """

    QtFatalMsg: ... = PySide.QtCore.QtMsgType.QtFatalMsg
    """
    """

    QtSystemMsg: ... = PySide.QtCore.QtMsgType.QtSystemMsg
    """
    """

    QtWarningMsg: ... = PySide.QtCore.QtMsgType.QtWarningMsg
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __index__(self, *args, **kwargs):
        """
        x[y:z] <==> x[y.__index__():z.__index__()]
        """
        ...

    def __int__(self, *args, **kwargs):
        """
        x.__int__() <==> int(x)
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __long__(self, *args, **kwargs):
        """
        x.__long__() <==> long(x)
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __pos__(self, *args, **kwargs):
        """
        x.__pos__() <==> +x
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...

    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...

    ...

class QtValidLicenseForDeclarativeModule(__builtin__.object):
    LicensedDeclarative: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __index__(self, *args, **kwargs):
        """
        x[y:z] <==> x[y.__index__():z.__index__()]
        """
        ...

    def __int__(self, *args, **kwargs):
        """
        x.__int__() <==> int(x)
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __long__(self, *args, **kwargs):
        """
        x.__long__() <==> long(x)
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __pos__(self, *args, **kwargs):
        """
        x.__pos__() <==> +x
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...

    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...

    ...

class QtValidLicenseForMultimediaModule(__builtin__.object):
    LicensedMultimedia: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __index__(self, *args, **kwargs):
        """
        x[y:z] <==> x[y.__index__():z.__index__()]
        """
        ...

    def __int__(self, *args, **kwargs):
        """
        x.__int__() <==> int(x)
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __long__(self, *args, **kwargs):
        """
        x.__long__() <==> long(x)
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __pos__(self, *args, **kwargs):
        """
        x.__pos__() <==> +x
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...

    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...

    ...

class QtValidLicenseForOpenVGModule(__builtin__.object):
    LicensedOpenVG: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __index__(self, *args, **kwargs):
        """
        x[y:z] <==> x[y.__index__():z.__index__()]
        """
        ...

    def __int__(self, *args, **kwargs):
        """
        x.__int__() <==> int(x)
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __long__(self, *args, **kwargs):
        """
        x.__long__() <==> long(x)
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __pos__(self, *args, **kwargs):
        """
        x.__pos__() <==> +x
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...

    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...

    ...

class Signal(__builtin__.object):
    """
    Signal
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...

    ...

class Slot(__builtin__.object):
    """
    Slot
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

def QT_TRANSLATE_NOOP(*args, **kwargs):
    """
    """
    ...


def QT_TRANSLATE_NOOP3(*args, **kwargs):
    """
    """
    ...


def QT_TRANSLATE_NOOP_UTF8(*args, **kwargs):
    """
    """
    ...


def QT_TR_NOOP(*args, **kwargs):
    """
    """
    ...


def QT_TR_NOOP_UTF8(*args, **kwargs):
    """
    """
    ...


def SIGNAL(*args, **kwargs):
    """
    """
    ...


def SLOT(*args, **kwargs):
    """
    """
    ...


def __moduleShutdown(*args, **kwargs):
    """
    """
    ...


def qAbs(*args, **kwargs):
    """
    """
    ...


def qAcos(*args, **kwargs):
    """
    """
    ...


def qAddPostRoutine(*args, **kwargs):
    """
    """
    ...


def qAsin(*args, **kwargs):
    """
    """
    ...


def qAtan(*args, **kwargs):
    """
    """
    ...


def qAtan2(*args, **kwargs):
    """
    """
    ...


def qChecksum(*args, **kwargs):
    """
    """
    ...


def qCritical(*args, **kwargs):
    """
    """
    ...


def qDebug(*args, **kwargs):
    """
    """
    ...


def qExp(*args, **kwargs):
    """
    """
    ...


def qFabs(*args, **kwargs):
    """
    """
    ...


def qFastCos(*args, **kwargs):
    """
    """
    ...


def qFastSin(*args, **kwargs):
    """
    """
    ...


def qFatal(*args, **kwargs):
    """
    """
    ...


def qFuzzyCompare(*args, **kwargs):
    """
    """
    ...


def qFuzzyIsNull(*args, **kwargs):
    """
    """
    ...


def qInstallMsgHandler(*args, **kwargs):
    """
    """
    ...


def qIsFinite(*args, **kwargs):
    """
    """
    ...


def qIsInf(*args, **kwargs):
    """
    """
    ...


def qIsNaN(*args, **kwargs):
    """
    """
    ...


def qIsNull(*args, **kwargs):
    """
    """
    ...


def qRegisterResourceData(*args, **kwargs):
    """
    """
    ...


def qRound(*args, **kwargs):
    """
    """
    ...


def qTan(*args, **kwargs):
    """
    """
    ...


def qUnregisterResourceData(*args, **kwargs):
    """
    """
    ...


def qVersion(*args, **kwargs):
    """
    """
    ...


def qWarning(*args, **kwargs):
    """
    """
    ...


def qrand(*args, **kwargs):
    """
    """
    ...


def qsrand(*args, **kwargs):
    """
    """
    ...


def qtTrId(*args, **kwargs):
    """
    """
    ...


LicensedDeclarative: ...
"""
PySide.QtCore.QtValidLicenseForDeclarativeModule...
"""

LicensedMultimedia: ...
"""
PySide.QtCore.QtValidLicenseForMultimediaModule.L...
"""

LicensedOpenVG: ...
"""
PySide.QtCore.QtValidLicenseForOpenVGModule.LicensedO...
"""

QtCriticalMsg: QtMsgType.QtCriticalMsg = PySide.QtCore.QtMsgType.QtCriticalMsg

QtDebugMsg: QtMsgType.QtDebugMsg = PySide.QtCore.QtMsgType.QtDebugMsg

QtFatalMsg: QtMsgType.QtFatalMsg = PySide.QtCore.QtMsgType.QtFatalMsg

QtSystemMsg: QtMsgType.QtSystemMsg = PySide.QtCore.QtMsgType.QtSystemMsg

QtWarningMsg: QtMsgType.QtWarningMsg = PySide.QtCore.QtMsgType.QtWarningMsg

__all__: ...
"""
['ClassInfo', 'LicensedDeclarative', 'LicensedMultimedia', '...
"""

__version__: typing.Text
"""
'4.8.5'
"""

__version_info__: (4, 8, 5) = (4, 8, 5)

# version: None
