# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
# pyright: reportUndefinedVariable=information,reportUnusedImport=false
"""
PySide.QtGui

"""

import typing
import PySide.QtCore

class QAbstractButton(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    clicked: ...
    """
    Signal
    """

    pressed: ...
    """
    Signal
    """

    released: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    toggled: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def animateClick(self, *args, **kwargs):
        """
        """
        ...

    def autoExclusive(self, *args, **kwargs):
        """
        """
        ...

    def autoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def autoRepeatDelay(self, *args, **kwargs):
        """
        """
        ...

    def autoRepeatInterval(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def checkStateSet(self, *args, **kwargs):
        """
        """
        ...

    def click(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def group(self, *args, **kwargs):
        """
        """
        ...

    def hitButton(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def iconSize(self, *args, **kwargs):
        """
        """
        ...

    def isCheckable(self, *args, **kwargs):
        """
        """
        ...

    def isChecked(self, *args, **kwargs):
        """
        """
        ...

    def isDown(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def nextCheckState(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setAutoExclusive(self, *args, **kwargs):
        """
        """
        ...

    def setAutoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def setAutoRepeatDelay(self, *args, **kwargs):
        """
        """
        ...

    def setAutoRepeatInterval(self, *args, **kwargs):
        """
        """
        ...

    def setCheckable(self, *args, **kwargs):
        """
        """
        ...

    def setChecked(self, *args, **kwargs):
        """
        """
        ...

    def setDown(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setIconSize(self, *args, **kwargs):
        """
        """
        ...

    def setShortcut(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def shortcut(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def toggle(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractGraphicsShapeItem(QGraphicsItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def brush(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def pen(self, *args, **kwargs):
        """
        """
        ...

    def setBrush(self, *args, **kwargs):
        """
        """
        ...

    def setPen(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractItemDelegate(PySide.QtCore.QObject):
    EditNextItem: ...
    """
    """

    EditPreviousItem: ...
    """
    """

    EndEditHint: ...
    """
    """

    NoHint: ... = PySide.QtGui.QAbstractItemDelegate.EndEditHint.NoHint
    """
    """

    RevertModelCache: ...
    """
    """

    SubmitModelCache: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    closeEditor: ...
    """
    Signal
    """

    commitData: ...
    """
    Signal
    """

    sizeHintChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def createEditor(self, *args, **kwargs):
        """
        """
        ...

    def editorEvent(self, *args, **kwargs):
        """
        """
        ...

    def helpEvent(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def setEditorData(self, *args, **kwargs):
        """
        """
        ...

    def setModelData(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def updateEditorGeometry(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractItemView(QAbstractScrollArea):
    AboveItem: ...
    """
    """

    AllEditTriggers: ...
    """
    """

    AnimatingState: ... = PySide.QtGui.QAbstractItemView.State.AnimatingState
    """
    """

    AnyKeyPressed: ...
    """
    """

    BelowItem: ...
    """
    """

    CollapsingState: ... = PySide.QtGui.QAbstractItemView.State.CollapsingState
    """
    """

    ContiguousSelection: ...
    """
    """

    CurrentChanged: ...
    """
    """

    CursorAction: ...
    """
    """

    DoubleClicked: ...
    """
    """

    DragDrop: ... = PySide.QtGui.QAbstractItemView.DragDropMode.DragDrop
    """
    """

    DragDropMode: ...
    """
    """

    DragOnly: ... = PySide.QtGui.QAbstractItemView.DragDropMode.DragOnly
    """
    """

    DragSelectingState: ...
    """
    """

    DraggingState: ... = PySide.QtGui.QAbstractItemView.State.DraggingState
    """
    """

    DropIndicatorPosition: ...
    """
    """

    DropOnly: ... = PySide.QtGui.QAbstractItemView.DragDropMode.DropOnly
    """
    """

    EditKeyPressed: ...
    """
    """

    EditTrigger: ...
    """
    """

    EditTriggers: ...
    """
    """

    EditingState: ... = PySide.QtGui.QAbstractItemView.State.EditingState
    """
    """

    EnsureVisible: ...
    """
    """

    ExpandingState: ... = PySide.QtGui.QAbstractItemView.State.ExpandingState
    """
    """

    ExtendedSelection: ...
    """
    """

    InternalMove: ...
    """
    """

    MoveDown: ... = PySide.QtGui.QAbstractItemView.CursorAction.MoveDown
    """
    """

    MoveEnd: ... = PySide.QtGui.QAbstractItemView.CursorAction.MoveEnd
    """
    """

    MoveHome: ... = PySide.QtGui.QAbstractItemView.CursorAction.MoveHome
    """
    """

    MoveLeft: ... = PySide.QtGui.QAbstractItemView.CursorAction.MoveLeft
    """
    """

    MoveNext: ... = PySide.QtGui.QAbstractItemView.CursorAction.MoveNext
    """
    """

    MovePageDown: ...
    """
    """

    MovePageUp: ... = PySide.QtGui.QAbstractItemView.CursorAction.MovePageUp
    """
    """

    MovePrevious: ...
    """
    """

    MoveRight: ... = PySide.QtGui.QAbstractItemView.CursorAction.MoveRight
    """
    """

    MoveUp: ... = PySide.QtGui.QAbstractItemView.CursorAction.MoveUp
    """
    """

    MultiSelection: ...
    """
    """

    NoDragDrop: ... = PySide.QtGui.QAbstractItemView.DragDropMode.NoDragDrop
    """
    """

    NoEditTriggers: ...
    """
    """

    NoSelection: ... = PySide.QtGui.QAbstractItemView.SelectionMode.NoSelection
    """
    """

    NoState: ... = PySide.QtGui.QAbstractItemView.State.NoState
    """
    """

    OnItem: ... = PySide.QtGui.QAbstractItemView.DropIndicatorPosition.OnItem
    """
    """

    OnViewport: ...
    """
    """

    PositionAtBottom: ...
    """
    """

    PositionAtCenter: ...
    """
    """

    PositionAtTop: ...
    """
    """

    ScrollHint: ...
    """
    """

    ScrollMode: ...
    """
    """

    ScrollPerItem: ...
    """
    """

    ScrollPerPixel: ...
    """
    """

    SelectColumns: ...
    """
    """

    SelectItems: ...
    """
    """

    SelectRows: ...
    """
    """

    SelectedClicked: ...
    """
    """

    SelectionBehavior: ...
    """
    """

    SelectionMode: ...
    """
    """

    SingleSelection: ...
    """
    """

    State: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    clicked: ...
    """
    Signal
    """

    doubleClicked: ...
    """
    Signal
    """

    entered: ...
    """
    Signal
    """

    pressed: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    viewportEntered: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alternatingRowColors(self, *args, **kwargs):
        """
        """
        ...

    def autoScrollMargin(self, *args, **kwargs):
        """
        """
        ...

    def clearSelection(self, *args, **kwargs):
        """
        """
        ...

    def closeEditor(self, *args, **kwargs):
        """
        """
        ...

    def closePersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def commitData(self, *args, **kwargs):
        """
        """
        ...

    def currentChanged(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def dataChanged(self, *args, **kwargs):
        """
        """
        ...

    def defaultDropAction(self, *args, **kwargs):
        """
        """
        ...

    def dirtyRegionOffset(self, *args, **kwargs):
        """
        """
        ...

    def doAutoScroll(self, *args, **kwargs):
        """
        """
        ...

    def doItemsLayout(self, *args, **kwargs):
        """
        """
        ...

    def dragDropMode(self, *args, **kwargs):
        """
        """
        ...

    def dragDropOverwriteMode(self, *args, **kwargs):
        """
        """
        ...

    def dragEnabled(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropIndicatorPosition(self, *args, **kwargs):
        """
        """
        ...

    def edit(self, *args, **kwargs):
        """
        """
        ...

    def editTriggers(self, *args, **kwargs):
        """
        """
        ...

    def editorDestroyed(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def executeDelayedItemsLayout(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def hasAutoScroll(self, *args, **kwargs):
        """
        """
        ...

    def horizontalOffset(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScrollMode(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScrollbarAction(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScrollbarValueChanged(self, *args, **kwargs):
        """
        """
        ...

    def iconSize(self, *args, **kwargs):
        """
        """
        ...

    def indexAt(self, *args, **kwargs):
        """
        """
        ...

    def indexWidget(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def isIndexHidden(self, *args, **kwargs):
        """
        """
        ...

    def itemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def itemDelegateForColumn(self, *args, **kwargs):
        """
        """
        ...

    def itemDelegateForRow(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyboardSearch(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def openPersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def rootIndex(self, *args, **kwargs):
        """
        """
        ...

    def rowsAboutToBeRemoved(self, *args, **kwargs):
        """
        """
        ...

    def rowsInserted(self, *args, **kwargs):
        """
        """
        ...

    def scheduleDelayedItemsLayout(self, *args, **kwargs):
        """
        """
        ...

    def scrollDirtyRegion(self, *args, **kwargs):
        """
        """
        ...

    def scrollTo(self, *args, **kwargs):
        """
        """
        ...

    def scrollToBottom(self, *args, **kwargs):
        """
        """
        ...

    def scrollToTop(self, *args, **kwargs):
        """
        """
        ...

    def selectAll(self, *args, **kwargs):
        """
        """
        ...

    def selectedIndexes(self, *args, **kwargs):
        """
        """
        ...

    def selectionBehavior(self, *args, **kwargs):
        """
        """
        ...

    def selectionChanged(self, *args, **kwargs):
        """
        """
        ...

    def selectionCommand(self, *args, **kwargs):
        """
        """
        ...

    def selectionMode(self, *args, **kwargs):
        """
        """
        ...

    def selectionModel(self, *args, **kwargs):
        """
        """
        ...

    def setAlternatingRowColors(self, *args, **kwargs):
        """
        """
        ...

    def setAutoScroll(self, *args, **kwargs):
        """
        """
        ...

    def setAutoScrollMargin(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultDropAction(self, *args, **kwargs):
        """
        """
        ...

    def setDirtyRegion(self, *args, **kwargs):
        """
        """
        ...

    def setDragDropMode(self, *args, **kwargs):
        """
        """
        ...

    def setDragDropOverwriteMode(self, *args, **kwargs):
        """
        """
        ...

    def setDragEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setDropIndicatorShown(self, *args, **kwargs):
        """
        """
        ...

    def setEditTriggers(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalScrollMode(self, *args, **kwargs):
        """
        """
        ...

    def setIconSize(self, *args, **kwargs):
        """
        """
        ...

    def setIndexWidget(self, *args, **kwargs):
        """
        """
        ...

    def setItemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def setItemDelegateForColumn(self, *args, **kwargs):
        """
        """
        ...

    def setItemDelegateForRow(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setRootIndex(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionBehavior(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionMode(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionModel(self, *args, **kwargs):
        """
        """
        ...

    def setState(self, *args, **kwargs):
        """
        """
        ...

    def setTabKeyNavigation(self, *args, **kwargs):
        """
        """
        ...

    def setTextElideMode(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalScrollMode(self, *args, **kwargs):
        """
        """
        ...

    def showDropIndicator(self, *args, **kwargs):
        """
        """
        ...

    def sizeHintForColumn(self, *args, **kwargs):
        """
        """
        ...

    def sizeHintForIndex(self, *args, **kwargs):
        """
        """
        ...

    def sizeHintForRow(self, *args, **kwargs):
        """
        """
        ...

    def startAutoScroll(self, *args, **kwargs):
        """
        """
        ...

    def startDrag(self, *args, **kwargs):
        """
        """
        ...

    def state(self, *args, **kwargs):
        """
        """
        ...

    def stopAutoScroll(self, *args, **kwargs):
        """
        """
        ...

    def tabKeyNavigation(self, *args, **kwargs):
        """
        """
        ...

    def textElideMode(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    def updateEditorData(self, *args, **kwargs):
        """
        """
        ...

    def updateEditorGeometries(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometries(self, *args, **kwargs):
        """
        """
        ...

    def verticalOffset(self, *args, **kwargs):
        """
        """
        ...

    def verticalScrollMode(self, *args, **kwargs):
        """
        """
        ...

    def verticalScrollbarAction(self, *args, **kwargs):
        """
        """
        ...

    def verticalScrollbarValueChanged(self, *args, **kwargs):
        """
        """
        ...

    def viewOptions(self, *args, **kwargs):
        """
        """
        ...

    def viewportEvent(self, *args, **kwargs):
        """
        """
        ...

    def visualRect(self, *args, **kwargs):
        """
        """
        ...

    def visualRegionForSelection(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractPageSetupDialog(QDialog):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def printer(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractPrintDialog(QDialog):
    AllPages: ... = PySide.QtGui.QAbstractPrintDialog.PrintRange.AllPages
    """
    """

    CurrentPage: ... = PySide.QtGui.QAbstractPrintDialog.PrintRange.CurrentPage
    """
    """

    DontUseSheet: ...
    """
    """

    None: ... = PySide.QtGui.QAbstractPrintDialog.PrintDialogOption.None
    """
    """

    PageRange: ... = PySide.QtGui.QAbstractPrintDialog.PrintRange.PageRange
    """
    """

    PrintCollateCopies: ...
    """
    """

    PrintCurrentPage: ...
    """
    """

    PrintDialogOption: ...
    """
    """

    PrintDialogOptions: ...
    """
    """

    PrintPageRange: ...
    """
    """

    PrintRange: ...
    """
    """

    PrintSelection: ...
    """
    """

    PrintShowPageSize: ...
    """
    """

    PrintToFile: ...
    """
    """

    Selection: ... = PySide.QtGui.QAbstractPrintDialog.PrintRange.Selection
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addEnabledOption(self, *args, **kwargs):
        """
        """
        ...

    def enabledOptions(self, *args, **kwargs):
        """
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def fromPage(self, *args, **kwargs):
        """
        """
        ...

    def isOptionEnabled(self, *args, **kwargs):
        """
        """
        ...

    def maxPage(self, *args, **kwargs):
        """
        """
        ...

    def minPage(self, *args, **kwargs):
        """
        """
        ...

    def printRange(self, *args, **kwargs):
        """
        """
        ...

    def printer(self, *args, **kwargs):
        """
        """
        ...

    def setEnabledOptions(self, *args, **kwargs):
        """
        """
        ...

    def setFromTo(self, *args, **kwargs):
        """
        """
        ...

    def setMinMax(self, *args, **kwargs):
        """
        """
        ...

    def setOptionTabs(self, *args, **kwargs):
        """
        """
        ...

    def setPrintRange(self, *args, **kwargs):
        """
        """
        ...

    def toPage(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractProxyModel(PySide.QtCore.QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def buddy(self, *args, **kwargs):
        """
        """
        ...

    def canFetchMore(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fetchMore(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def headerData(self, *args, **kwargs):
        """
        """
        ...

    def itemData(self, *args, **kwargs):
        """
        """
        ...

    def mapFromSource(self, *args, **kwargs):
        """
        """
        ...

    def mapSelectionFromSource(self, *args, **kwargs):
        """
        """
        ...

    def mapSelectionToSource(self, *args, **kwargs):
        """
        """
        ...

    def mapToSource(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def revert(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderData(self, *args, **kwargs):
        """
        """
        ...

    def setItemData(self, *args, **kwargs):
        """
        """
        ...

    def setSourceModel(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def sourceModel(self, *args, **kwargs):
        """
        """
        ...

    def span(self, *args, **kwargs):
        """
        """
        ...

    def submit(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractScrollArea(QFrame):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addScrollBarWidget(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def cornerWidget(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScrollBar(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScrollBarPolicy(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def maximumViewportSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def scrollBarWidgets(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def setCornerWidget(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalScrollBar(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalScrollBarPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalScrollBar(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalScrollBarPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setViewport(self, *args, **kwargs):
        """
        """
        ...

    def setViewportMargins(self, *args, **kwargs):
        """
        """
        ...

    def setupViewport(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def verticalScrollBar(self, *args, **kwargs):
        """
        """
        ...

    def verticalScrollBarPolicy(self, *args, **kwargs):
        """
        """
        ...

    def viewport(self, *args, **kwargs):
        """
        """
        ...

    def viewportEvent(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractSlider(QWidget):
    SliderAction: ...
    """
    """

    SliderChange: ...
    """
    """

    SliderMove: ... = PySide.QtGui.QAbstractSlider.SliderAction.SliderMove
    """
    """

    SliderNoAction: ...
    """
    """

    SliderOrientationChange: ...
    """
    """

    SliderPageStepAdd: ...
    """
    """

    SliderPageStepSub: ...
    """
    """

    SliderRangeChange: ...
    """
    """

    SliderSingleStepAdd: ...
    """
    """

    SliderSingleStepSub: ...
    """
    """

    SliderStepsChange: ...
    """
    """

    SliderToMaximum: ...
    """
    """

    SliderToMinimum: ...
    """
    """

    SliderValueChange: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    actionTriggered: ...
    """
    Signal
    """

    rangeChanged: ...
    """
    Signal
    """

    sliderMoved: ...
    """
    Signal
    """

    sliderPressed: ...
    """
    Signal
    """

    sliderReleased: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    valueChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def hasTracking(self, *args, **kwargs):
        """
        """
        ...

    def invertedAppearance(self, *args, **kwargs):
        """
        """
        ...

    def invertedControls(self, *args, **kwargs):
        """
        """
        ...

    def isSliderDown(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def maximum(self, *args, **kwargs):
        """
        """
        ...

    def minimum(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def pageStep(self, *args, **kwargs):
        """
        """
        ...

    def repeatAction(self, *args, **kwargs):
        """
        """
        ...

    def setInvertedAppearance(self, *args, **kwargs):
        """
        """
        ...

    def setInvertedControls(self, *args, **kwargs):
        """
        """
        ...

    def setMaximum(self, *args, **kwargs):
        """
        """
        ...

    def setMinimum(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setPageStep(self, *args, **kwargs):
        """
        """
        ...

    def setRange(self, *args, **kwargs):
        """
        """
        ...

    def setRepeatAction(self, *args, **kwargs):
        """
        """
        ...

    def setSingleStep(self, *args, **kwargs):
        """
        """
        ...

    def setSliderDown(self, *args, **kwargs):
        """
        """
        ...

    def setSliderPosition(self, *args, **kwargs):
        """
        """
        ...

    def setTracking(self, *args, **kwargs):
        """
        """
        ...

    def setValue(self, *args, **kwargs):
        """
        """
        ...

    def singleStep(self, *args, **kwargs):
        """
        """
        ...

    def sliderChange(self, *args, **kwargs):
        """
        """
        ...

    def sliderPosition(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def triggerAction(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractSpinBox(QWidget):
    ButtonSymbols: ...
    """
    """

    CorrectToNearestValue: ...
    """
    """

    CorrectToPreviousValue: ...
    """
    """

    CorrectionMode: ...
    """
    """

    NoButtons: ... = PySide.QtGui.QAbstractSpinBox.ButtonSymbols.NoButtons
    """
    """

    PlusMinus: ... = PySide.QtGui.QAbstractSpinBox.ButtonSymbols.PlusMinus
    """
    """

    StepDownEnabled: ...
    """
    """

    StepEnabled: ...
    """
    """

    StepEnabledFlag: ...
    """
    """

    StepNone: ... = PySide.QtGui.QAbstractSpinBox.StepEnabledFlag.StepNone
    """
    """

    StepUpEnabled: ...
    """
    """

    UpDownArrows: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    editingFinished: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def buttonSymbols(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def correctionMode(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def fixup(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def hasAcceptableInput(self, *args, **kwargs):
        """
        """
        ...

    def hasFrame(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def interpretText(self, *args, **kwargs):
        """
        """
        ...

    def isAccelerated(self, *args, **kwargs):
        """
        """
        ...

    def isReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyboardTracking(self, *args, **kwargs):
        """
        """
        ...

    def lineEdit(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def selectAll(self, *args, **kwargs):
        """
        """
        ...

    def setAccelerated(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setButtonSymbols(self, *args, **kwargs):
        """
        """
        ...

    def setCorrectionMode(self, *args, **kwargs):
        """
        """
        ...

    def setFrame(self, *args, **kwargs):
        """
        """
        ...

    def setKeyboardTracking(self, *args, **kwargs):
        """
        """
        ...

    def setLineEdit(self, *args, **kwargs):
        """
        """
        ...

    def setReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def setSpecialValueText(self, *args, **kwargs):
        """
        """
        ...

    def setWrapping(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def specialValueText(self, *args, **kwargs):
        """
        """
        ...

    def stepBy(self, *args, **kwargs):
        """
        """
        ...

    def stepDown(self, *args, **kwargs):
        """
        """
        ...

    def stepEnabled(self, *args, **kwargs):
        """
        """
        ...

    def stepUp(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def wrapping(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAbstractTextDocumentLayout(PySide.QtCore.QObject):
    PaintContext: ...
    """
    """

    Selection: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    documentSizeChanged: ...
    """
    Signal
    """

    pageCountChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    update: ...
    """
    Signal
    """

    updateBlock: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def anchorAt(self, *args, **kwargs):
        """
        """
        ...

    def blockBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def documentChanged(self, *args, **kwargs):
        """
        """
        ...

    def documentSize(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def drawInlineObject(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def formatIndex(self, *args, **kwargs):
        """
        """
        ...

    def frameBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def handlerForObject(self, *args, **kwargs):
        """
        """
        ...

    def hitTest(self, *args, **kwargs):
        """
        """
        ...

    def pageCount(self, *args, **kwargs):
        """
        """
        ...

    def paintDevice(self, *args, **kwargs):
        """
        """
        ...

    def positionInlineObject(self, *args, **kwargs):
        """
        """
        ...

    def registerHandler(self, *args, **kwargs):
        """
        """
        ...

    def resizeInlineObject(self, *args, **kwargs):
        """
        """
        ...

    def setPaintDevice(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAccessibleEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def child(self, *args, **kwargs):
        """
        """
        ...

    def setValue(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QAction(PySide.QtCore.QObject):
    AboutQtRole: ... = PySide.QtGui.QAction.MenuRole.AboutQtRole
    """
    """

    AboutRole: ... = PySide.QtGui.QAction.MenuRole.AboutRole
    """
    """

    ActionEvent: ...
    """
    """

    ApplicationSpecificRole: ...
    """
    """

    HighPriority: ... = PySide.QtGui.QAction.Priority.HighPriority
    """
    """

    Hover: ... = PySide.QtGui.QAction.ActionEvent.Hover
    """
    """

    LowPriority: ... = PySide.QtGui.QAction.Priority.LowPriority
    """
    """

    MenuRole: ...
    """
    """

    NegativeSoftKey: ... = PySide.QtGui.QAction.SoftKeyRole.NegativeSoftKey
    """
    """

    NoRole: ... = PySide.QtGui.QAction.MenuRole.NoRole
    """
    """

    NoSoftKey: ... = PySide.QtGui.QAction.SoftKeyRole.NoSoftKey
    """
    """

    NormalPriority: ... = PySide.QtGui.QAction.Priority.NormalPriority
    """
    """

    PositiveSoftKey: ... = PySide.QtGui.QAction.SoftKeyRole.PositiveSoftKey
    """
    """

    PreferencesRole: ... = PySide.QtGui.QAction.MenuRole.PreferencesRole
    """
    """

    Priority: ...
    """
    """

    QuitRole: ... = PySide.QtGui.QAction.MenuRole.QuitRole
    """
    """

    SelectSoftKey: ... = PySide.QtGui.QAction.SoftKeyRole.SelectSoftKey
    """
    """

    SoftKeyRole: ...
    """
    """

    TextHeuristicRole: ... = PySide.QtGui.QAction.MenuRole.TextHeuristicRole
    """
    """

    Trigger: ... = PySide.QtGui.QAction.ActionEvent.Trigger
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    changed: ...
    """
    Signal
    """

    hovered: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    toggled: ...
    """
    Signal
    """

    triggered: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actionGroup(self, *args, **kwargs):
        """
        """
        ...

    def activate(self, *args, **kwargs):
        """
        """
        ...

    def associatedGraphicsWidgets(self, *args, **kwargs):
        """
        """
        ...

    def associatedWidgets(self, *args, **kwargs):
        """
        """
        ...

    def autoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def hover(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def iconText(self, *args, **kwargs):
        """
        """
        ...

    def isCheckable(self, *args, **kwargs):
        """
        """
        ...

    def isChecked(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isIconVisibleInMenu(self, *args, **kwargs):
        """
        """
        ...

    def isSeparator(self, *args, **kwargs):
        """
        """
        ...

    def isVisible(self, *args, **kwargs):
        """
        """
        ...

    def menu(self, *args, **kwargs):
        """
        """
        ...

    def menuRole(self, *args, **kwargs):
        """
        """
        ...

    def parentWidget(self, *args, **kwargs):
        """
        """
        ...

    def priority(self, *args, **kwargs):
        """
        """
        ...

    def setActionGroup(self, *args, **kwargs):
        """
        """
        ...

    def setAutoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def setCheckable(self, *args, **kwargs):
        """
        """
        ...

    def setChecked(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setDisabled(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setIconText(self, *args, **kwargs):
        """
        """
        ...

    def setIconVisibleInMenu(self, *args, **kwargs):
        """
        """
        ...

    def setMenu(self, *args, **kwargs):
        """
        """
        ...

    def setMenuRole(self, *args, **kwargs):
        """
        """
        ...

    def setPriority(self, *args, **kwargs):
        """
        """
        ...

    def setSeparator(self, *args, **kwargs):
        """
        """
        ...

    def setShortcut(self, *args, **kwargs):
        """
        """
        ...

    def setShortcutContext(self, *args, **kwargs):
        """
        """
        ...

    def setShortcuts(self, *args, **kwargs):
        """
        """
        ...

    def setSoftKeyRole(self, *args, **kwargs):
        """
        """
        ...

    def setStatusTip(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def setWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def shortcut(self, *args, **kwargs):
        """
        """
        ...

    def shortcutContext(self, *args, **kwargs):
        """
        """
        ...

    def shortcuts(self, *args, **kwargs):
        """
        """
        ...

    def showStatusText(self, *args, **kwargs):
        """
        """
        ...

    def softKeyRole(self, *args, **kwargs):
        """
        """
        ...

    def statusTip(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def toggle(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def trigger(self, *args, **kwargs):
        """
        """
        ...

    def whatsThis(self, *args, **kwargs):
        """
        """
        ...

    ...

class QActionEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def action(self, *args, **kwargs):
        """
        """
        ...

    def before(self, *args, **kwargs):
        """
        """
        ...

    ...

class QActionGroup(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    hovered: ...
    """
    Signal
    """

    selected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    triggered: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actions(self, *args, **kwargs):
        """
        """
        ...

    def addAction(self, *args, **kwargs):
        """
        """
        ...

    def checkedAction(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isExclusive(self, *args, **kwargs):
        """
        """
        ...

    def isVisible(self, *args, **kwargs):
        """
        """
        ...

    def removeAction(self, *args, **kwargs):
        """
        """
        ...

    def setDisabled(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setExclusive(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    ...

class QApplication(PySide.QtCore.QCoreApplication):
    ColorSpec: ...
    """
    """

    CustomColor: ... = PySide.QtGui.QApplication.ColorSpec.CustomColor
    """
    """

    GuiClient: ... = PySide.QtGui.QApplication.Type.GuiClient
    """
    """

    GuiServer: ... = PySide.QtGui.QApplication.Type.GuiServer
    """
    """

    ManyColor: ... = PySide.QtGui.QApplication.ColorSpec.ManyColor
    """
    """

    NormalColor: ... = PySide.QtGui.QApplication.ColorSpec.NormalColor
    """
    """

    Tty: ... = PySide.QtGui.QApplication.Type.Tty
    """
    """

    Type: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    commitDataRequest: ...
    """
    Signal
    """

    focusChanged: ...
    """
    Signal
    """

    fontDatabaseChanged: ...
    """
    Signal
    """

    lastWindowClosed: ...
    """
    Signal
    """

    saveStateRequest: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def aboutQt(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def activeModalWidget(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def activePopupWidget(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def activeWindow(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def alert(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def allWidgets(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def beep(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def changeOverrideCursor(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def clipboard(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def closeAllWindows(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def colorSpec(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def cursorFlashTime(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def desktop(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def desktopSettingsAware(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def doubleClickInterval(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def exec_(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def focusWidget(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def font(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fontMetrics(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def globalStrut(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isEffectEnabled(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isLeftToRight(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isRightToLeft(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def keyboardInputDirection(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def keyboardInputInterval(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def keyboardInputLocale(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def keyboardModifiers(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def layoutDirection(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def mouseButtons(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def overrideCursor(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def palette(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def queryKeyboardModifiers(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def quitOnLastWindowClosed(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def restoreOverrideCursor(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setActiveWindow(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setColorSpec(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCursorFlashTime(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setDesktopSettingsAware(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setDoubleClickInterval(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setEffectEnabled(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setFont(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setGlobalStrut(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setGraphicsSystem(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setKeyboardInputInterval(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setLayoutDirection(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setOverrideCursor(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setPalette(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setQuitOnLastWindowClosed(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setStartDragDistance(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setStartDragTime(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setStyle(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setWheelScrollLines(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setWindowIcon(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def startDragDistance(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def startDragTime(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def style(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def syncX(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def topLevelAt(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def topLevelWidgets(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def type(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def wheelScrollLines(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def widgetAt(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def winMouseButtonUp(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def windowIcon(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoSipEnabled(self, *args, **kwargs):
        """
        """
        ...

    def commitData(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def inputContext(self, *args, **kwargs):
        """
        """
        ...

    def isSessionRestored(self, *args, **kwargs):
        """
        """
        ...

    def notify(self, *args, **kwargs):
        """
        """
        ...

    def saveState(self, *args, **kwargs):
        """
        """
        ...

    def sessionId(self, *args, **kwargs):
        """
        """
        ...

    def sessionKey(self, *args, **kwargs):
        """
        """
        ...

    def setAutoSipEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setInputContext(self, *args, **kwargs):
        """
        """
        ...

    def setStyleSheet(self, *args, **kwargs):
        """
        """
        ...

    def styleSheet(self, *args, **kwargs):
        """
        """
        ...

    def winFocus(self, *args, **kwargs):
        """
        """
        ...

    ...

class QBitmap(QPixmap):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromData(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromImage(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def transformed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QBoxLayout(QLayout):
    BottomToTop: ... = PySide.QtGui.QBoxLayout.Direction.BottomToTop
    """
    """

    Direction: ...
    """
    """

    Down: ... = PySide.QtGui.QBoxLayout.Direction.Down
    """
    """

    LeftToRight: ... = PySide.QtGui.QBoxLayout.Direction.LeftToRight
    """
    """

    RightToLeft: ... = PySide.QtGui.QBoxLayout.Direction.RightToLeft
    """
    """

    TopToBottom: ... = PySide.QtGui.QBoxLayout.Direction.TopToBottom
    """
    """

    Up: ... = PySide.QtGui.QBoxLayout.Direction.Up
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addLayout(self, *args, **kwargs):
        """
        """
        ...

    def addSpacerItem(self, *args, **kwargs):
        """
        """
        ...

    def addSpacing(self, *args, **kwargs):
        """
        """
        ...

    def addStretch(self, *args, **kwargs):
        """
        """
        ...

    def addStrut(self, *args, **kwargs):
        """
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def direction(self, *args, **kwargs):
        """
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def hasHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def insertItem(self, *args, **kwargs):
        """
        """
        ...

    def insertLayout(self, *args, **kwargs):
        """
        """
        ...

    def insertSpacerItem(self, *args, **kwargs):
        """
        """
        ...

    def insertSpacing(self, *args, **kwargs):
        """
        """
        ...

    def insertStretch(self, *args, **kwargs):
        """
        """
        ...

    def insertWidget(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def setDirection(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setStretch(self, *args, **kwargs):
        """
        """
        ...

    def setStretchFactor(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def spacing(self, *args, **kwargs):
        """
        """
        ...

    def stretch(self, *args, **kwargs):
        """
        """
        ...

    def takeAt(self, *args, **kwargs):
        """
        """
        ...

    ...

class QBrush(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def color(self, *args, **kwargs):
        """
        """
        ...

    def gradient(self, *args, **kwargs):
        """
        """
        ...

    def isOpaque(self, *args, **kwargs):
        """
        """
        ...

    def matrix(self, *args, **kwargs):
        """
        """
        ...

    def setColor(self, *args, **kwargs):
        """
        """
        ...

    def setMatrix(self, *args, **kwargs):
        """
        """
        ...

    def setStyle(self, *args, **kwargs):
        """
        """
        ...

    def setTexture(self, *args, **kwargs):
        """
        """
        ...

    def setTextureImage(self, *args, **kwargs):
        """
        """
        ...

    def setTransform(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def texture(self, *args, **kwargs):
        """
        """
        ...

    def textureImage(self, *args, **kwargs):
        """
        """
        ...

    def transform(self, *args, **kwargs):
        """
        """
        ...

    ...

class QButtonGroup(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    buttonClicked: ...
    """
    Signal
    """

    buttonPressed: ...
    """
    Signal
    """

    buttonReleased: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addButton(self, *args, **kwargs):
        """
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def checkedButton(self, *args, **kwargs):
        """
        """
        ...

    def checkedId(self, *args, **kwargs):
        """
        """
        ...

    def exclusive(self, *args, **kwargs):
        """
        """
        ...

    def id(self, *args, **kwargs):
        """
        """
        ...

    def removeButton(self, *args, **kwargs):
        """
        """
        ...

    def setExclusive(self, *args, **kwargs):
        """
        """
        ...

    def setId(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCDEStyle(QMotifStyle):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def pixelMetric(self, *args, **kwargs):
        """
        """
        ...

    def standardIconImplementation(self, *args, **kwargs):
        """
        """
        ...

    def standardPalette(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCalendarWidget(QWidget):
    HorizontalHeaderFormat: ...
    """
    """

    ISOWeekNumbers: ...
    """
    """

    LongDayNames: ...
    """
    """

    NoHorizontalHeader: ...
    """
    """

    NoSelection: ... = PySide.QtGui.QCalendarWidget.SelectionMode.NoSelection
    """
    """

    NoVerticalHeader: ...
    """
    """

    SelectionMode: ...
    """
    """

    ShortDayNames: ...
    """
    """

    SingleLetterDayNames: ...
    """
    """

    SingleSelection: ...
    """
    """

    VerticalHeaderFormat: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    clicked: ...
    """
    Signal
    """

    currentPageChanged: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def dateEditAcceptDelay(self, *args, **kwargs):
        """
        """
        ...

    def dateTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def firstDayOfWeek(self, *args, **kwargs):
        """
        """
        ...

    def headerTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def horizontalHeaderFormat(self, *args, **kwargs):
        """
        """
        ...

    def isDateEditEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isGridVisible(self, *args, **kwargs):
        """
        """
        ...

    def isNavigationBarVisible(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def maximumDate(self, *args, **kwargs):
        """
        """
        ...

    def minimumDate(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def monthShown(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintCell(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def selectedDate(self, *args, **kwargs):
        """
        """
        ...

    def selectionMode(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentPage(self, *args, **kwargs):
        """
        """
        ...

    def setDateEditAcceptDelay(self, *args, **kwargs):
        """
        """
        ...

    def setDateEditEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setDateRange(self, *args, **kwargs):
        """
        """
        ...

    def setDateTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def setFirstDayOfWeek(self, *args, **kwargs):
        """
        """
        ...

    def setGridVisible(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalHeaderFormat(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumDate(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumDate(self, *args, **kwargs):
        """
        """
        ...

    def setNavigationBarVisible(self, *args, **kwargs):
        """
        """
        ...

    def setSelectedDate(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionMode(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalHeaderFormat(self, *args, **kwargs):
        """
        """
        ...

    def setWeekdayTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def showNextMonth(self, *args, **kwargs):
        """
        """
        ...

    def showNextYear(self, *args, **kwargs):
        """
        """
        ...

    def showPreviousMonth(self, *args, **kwargs):
        """
        """
        ...

    def showPreviousYear(self, *args, **kwargs):
        """
        """
        ...

    def showSelectedDate(self, *args, **kwargs):
        """
        """
        ...

    def showToday(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def updateCell(self, *args, **kwargs):
        """
        """
        ...

    def updateCells(self, *args, **kwargs):
        """
        """
        ...

    def verticalHeaderFormat(self, *args, **kwargs):
        """
        """
        ...

    def weekdayTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def yearShown(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCheckBox(QAbstractButton):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def checkState(self, *args, **kwargs):
        """
        """
        ...

    def checkStateSet(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def hitButton(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def isTristate(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def nextCheckState(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setCheckState(self, *args, **kwargs):
        """
        """
        ...

    def setTristate(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCleanlooksStyle(QWindowsStyle):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawItemPixmap(self, *args, **kwargs):
        """
        """
        ...

    def drawItemText(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def generatedIconPixmap(self, *args, **kwargs):
        """
        """
        ...

    def hitTestComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def itemPixmapRect(self, *args, **kwargs):
        """
        """
        ...

    def pixelMetric(self, *args, **kwargs):
        """
        """
        ...

    def polish(self, *args, **kwargs):
        """
        """
        ...

    def sizeFromContents(self, *args, **kwargs):
        """
        """
        ...

    def standardIconImplementation(self, *args, **kwargs):
        """
        """
        ...

    def standardPalette(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def subControlRect(self, *args, **kwargs):
        """
        """
        ...

    def subElementRect(self, *args, **kwargs):
        """
        """
        ...

    def unpolish(self, *args, **kwargs):
        """
        """
        ...

    ...

class QClipboard(PySide.QtCore.QObject):
    Clipboard: ... = PySide.QtGui.QClipboard.Mode.Clipboard
    """
    """

    FindBuffer: ... = PySide.QtGui.QClipboard.Mode.FindBuffer
    """
    """

    LastMode: ... = PySide.QtGui.QClipboard.Mode.LastMode
    """
    """

    Mode: ...
    """
    """

    Selection: ... = PySide.QtGui.QClipboard.Mode.Selection
    """
    """

    changed: ...
    """
    Signal
    """

    dataChanged: ...
    """
    Signal
    """

    findBufferChanged: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def connectNotify(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def image(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def ownsClipboard(self, *args, **kwargs):
        """
        """
        ...

    def ownsFindBuffer(self, *args, **kwargs):
        """
        """
        ...

    def ownsSelection(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def setImage(self, *args, **kwargs):
        """
        """
        ...

    def setMimeData(self, *args, **kwargs):
        """
        """
        ...

    def setPixmap(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def supportsFindBuffer(self, *args, **kwargs):
        """
        """
        ...

    def supportsSelection(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    ...

class QClipboardEvent(PySide.QtCore.QEvent):
    ...

class QCloseEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QColor(Shiboken.Object):
    Cmyk: ... = PySide.QtGui.QColor.Spec.Cmyk
    """
    """

    Hsl: ... = PySide.QtGui.QColor.Spec.Hsl
    """
    """

    Hsv: ... = PySide.QtGui.QColor.Spec.Hsv
    """
    """

    Invalid: ... = PySide.QtGui.QColor.Spec.Invalid
    """
    """

    Rgb: ... = PySide.QtGui.QColor.Spec.Rgb
    """
    """

    Spec: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def colorNames(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromCmyk(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromCmykF(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromHsl(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromHslF(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromHsv(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromHsvF(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromRgb(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromRgbF(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromRgba(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isValidColor(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __setstate__(self, *args, **kwargs):
        """
        """
        ...

    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...

    def alpha(self, *args, **kwargs):
        """
        """
        ...

    def alphaF(self, *args, **kwargs):
        """
        """
        ...

    def black(self, *args, **kwargs):
        """
        """
        ...

    def blackF(self, *args, **kwargs):
        """
        """
        ...

    def blue(self, *args, **kwargs):
        """
        """
        ...

    def blueF(self, *args, **kwargs):
        """
        """
        ...

    def convertTo(self, *args, **kwargs):
        """
        """
        ...

    def cyan(self, *args, **kwargs):
        """
        """
        ...

    def cyanF(self, *args, **kwargs):
        """
        """
        ...

    def darker(self, *args, **kwargs):
        """
        """
        ...

    def getCmyk(self, *args, **kwargs):
        """
        """
        ...

    def getCmykF(self, *args, **kwargs):
        """
        """
        ...

    def getHsl(self, *args, **kwargs):
        """
        """
        ...

    def getHslF(self, *args, **kwargs):
        """
        """
        ...

    def getHsv(self, *args, **kwargs):
        """
        """
        ...

    def getHsvF(self, *args, **kwargs):
        """
        """
        ...

    def getRgb(self, *args, **kwargs):
        """
        """
        ...

    def getRgbF(self, *args, **kwargs):
        """
        """
        ...

    def green(self, *args, **kwargs):
        """
        """
        ...

    def greenF(self, *args, **kwargs):
        """
        """
        ...

    def hslHue(self, *args, **kwargs):
        """
        """
        ...

    def hslHueF(self, *args, **kwargs):
        """
        """
        ...

    def hslSaturation(self, *args, **kwargs):
        """
        """
        ...

    def hslSaturationF(self, *args, **kwargs):
        """
        """
        ...

    def hsvHue(self, *args, **kwargs):
        """
        """
        ...

    def hsvHueF(self, *args, **kwargs):
        """
        """
        ...

    def hsvSaturation(self, *args, **kwargs):
        """
        """
        ...

    def hsvSaturationF(self, *args, **kwargs):
        """
        """
        ...

    def hue(self, *args, **kwargs):
        """
        """
        ...

    def hueF(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def lighter(self, *args, **kwargs):
        """
        """
        ...

    def lightness(self, *args, **kwargs):
        """
        """
        ...

    def lightnessF(self, *args, **kwargs):
        """
        """
        ...

    def magenta(self, *args, **kwargs):
        """
        """
        ...

    def magentaF(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def red(self, *args, **kwargs):
        """
        """
        ...

    def redF(self, *args, **kwargs):
        """
        """
        ...

    def rgb(self, *args, **kwargs):
        """
        """
        ...

    def rgba(self, *args, **kwargs):
        """
        """
        ...

    def saturation(self, *args, **kwargs):
        """
        """
        ...

    def saturationF(self, *args, **kwargs):
        """
        """
        ...

    def setAlpha(self, *args, **kwargs):
        """
        """
        ...

    def setAlphaF(self, *args, **kwargs):
        """
        """
        ...

    def setBlue(self, *args, **kwargs):
        """
        """
        ...

    def setBlueF(self, *args, **kwargs):
        """
        """
        ...

    def setCmyk(self, *args, **kwargs):
        """
        """
        ...

    def setCmykF(self, *args, **kwargs):
        """
        """
        ...

    def setGreen(self, *args, **kwargs):
        """
        """
        ...

    def setGreenF(self, *args, **kwargs):
        """
        """
        ...

    def setHsl(self, *args, **kwargs):
        """
        """
        ...

    def setHslF(self, *args, **kwargs):
        """
        """
        ...

    def setHsv(self, *args, **kwargs):
        """
        """
        ...

    def setHsvF(self, *args, **kwargs):
        """
        """
        ...

    def setNamedColor(self, *args, **kwargs):
        """
        """
        ...

    def setRed(self, *args, **kwargs):
        """
        """
        ...

    def setRedF(self, *args, **kwargs):
        """
        """
        ...

    def setRgb(self, *args, **kwargs):
        """
        """
        ...

    def setRgbF(self, *args, **kwargs):
        """
        """
        ...

    def setRgba(self, *args, **kwargs):
        """
        """
        ...

    def spec(self, *args, **kwargs):
        """
        """
        ...

    def toCmyk(self, *args, **kwargs):
        """
        """
        ...

    def toHsl(self, *args, **kwargs):
        """
        """
        ...

    def toHsv(self, *args, **kwargs):
        """
        """
        ...

    def toRgb(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    def valueF(self, *args, **kwargs):
        """
        """
        ...

    def yellow(self, *args, **kwargs):
        """
        """
        ...

    def yellowF(self, *args, **kwargs):
        """
        """
        ...

    ...

class QColorDialog(QDialog):
    ColorDialogOption: ...
    """
    """

    ColorDialogOptions: ...
    """
    """

    DontUseNativeDialog: ...
    """
    """

    NoButtons: ... = PySide.QtGui.QColorDialog.ColorDialogOption.NoButtons
    """
    """

    ShowAlphaChannel: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    colorSelected: ...
    """
    Signal
    """

    currentColorChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def customColor(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def customCount(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getColor(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCustomColor(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setStandardColor(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def currentColor(self, *args, **kwargs):
        """
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def options(self, *args, **kwargs):
        """
        """
        ...

    def selectedColor(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentColor(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setOptions(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    ...

class QColumnView(QAbstractItemView):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    updatePreviewWidget: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def columnWidths(self, *args, **kwargs):
        """
        """
        ...

    def createColumn(self, *args, **kwargs):
        """
        """
        ...

    def currentChanged(self, *args, **kwargs):
        """
        """
        ...

    def horizontalOffset(self, *args, **kwargs):
        """
        """
        ...

    def indexAt(self, *args, **kwargs):
        """
        """
        ...

    def initializeColumn(self, *args, **kwargs):
        """
        """
        ...

    def isIndexHidden(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def previewWidget(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeGripsVisible(self, *args, **kwargs):
        """
        """
        ...

    def rowsInserted(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def scrollTo(self, *args, **kwargs):
        """
        """
        ...

    def selectAll(self, *args, **kwargs):
        """
        """
        ...

    def setColumnWidths(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setPreviewWidget(self, *args, **kwargs):
        """
        """
        ...

    def setResizeGripsVisible(self, *args, **kwargs):
        """
        """
        ...

    def setRootIndex(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionModel(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def verticalOffset(self, *args, **kwargs):
        """
        """
        ...

    def visualRect(self, *args, **kwargs):
        """
        """
        ...

    def visualRegionForSelection(self, *args, **kwargs):
        """
        """
        ...

    ...

class QComboBox(QWidget):
    AdjustToContents: ...
    """
    """

    AdjustToContentsOnFirstShow: ...
    """
    """

    AdjustToMinimumContentsLength: ...
    """
    """

    AdjustToMinimumContentsLengthWithIcon: ...
    """
    """

    InsertAfterCurrent: ...
    """
    """

    InsertAlphabetically: ...
    """
    """

    InsertAtBottom: ... = PySide.QtGui.QComboBox.InsertPolicy.InsertAtBottom
    """
    """

    InsertAtCurrent: ... = PySide.QtGui.QComboBox.InsertPolicy.InsertAtCurrent
    """
    """

    InsertAtTop: ... = PySide.QtGui.QComboBox.InsertPolicy.InsertAtTop
    """
    """

    InsertBeforeCurrent: ...
    """
    """

    InsertPolicy: ...
    """
    """

    NoInsert: ... = PySide.QtGui.QComboBox.InsertPolicy.NoInsert
    """
    """

    SizeAdjustPolicy: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    currentIndexChanged: ...
    """
    Signal
    """

    editTextChanged: ...
    """
    Signal
    """

    highlighted: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    textChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addItems(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def clearEditText(self, *args, **kwargs):
        """
        """
        ...

    def completer(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def currentText(self, *args, **kwargs):
        """
        """
        ...

    def duplicatesEnabled(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def findData(self, *args, **kwargs):
        """
        """
        ...

    def findText(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def hasFrame(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def hidePopup(self, *args, **kwargs):
        """
        """
        ...

    def iconSize(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def insertItem(self, *args, **kwargs):
        """
        """
        ...

    def insertItems(self, *args, **kwargs):
        """
        """
        ...

    def insertPolicy(self, *args, **kwargs):
        """
        """
        ...

    def insertSeparator(self, *args, **kwargs):
        """
        """
        ...

    def isEditable(self, *args, **kwargs):
        """
        """
        ...

    def itemData(self, *args, **kwargs):
        """
        """
        ...

    def itemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def itemIcon(self, *args, **kwargs):
        """
        """
        ...

    def itemText(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def lineEdit(self, *args, **kwargs):
        """
        """
        ...

    def maxCount(self, *args, **kwargs):
        """
        """
        ...

    def maxVisibleItems(self, *args, **kwargs):
        """
        """
        ...

    def minimumContentsLength(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def modelColumn(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def removeItem(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def rootModelIndex(self, *args, **kwargs):
        """
        """
        ...

    def setCompleter(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setDuplicatesEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setEditText(self, *args, **kwargs):
        """
        """
        ...

    def setEditable(self, *args, **kwargs):
        """
        """
        ...

    def setFrame(self, *args, **kwargs):
        """
        """
        ...

    def setIconSize(self, *args, **kwargs):
        """
        """
        ...

    def setInsertPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setItemData(self, *args, **kwargs):
        """
        """
        ...

    def setItemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def setItemIcon(self, *args, **kwargs):
        """
        """
        ...

    def setItemText(self, *args, **kwargs):
        """
        """
        ...

    def setLineEdit(self, *args, **kwargs):
        """
        """
        ...

    def setMaxCount(self, *args, **kwargs):
        """
        """
        ...

    def setMaxVisibleItems(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumContentsLength(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setModelColumn(self, *args, **kwargs):
        """
        """
        ...

    def setRootModelIndex(self, *args, **kwargs):
        """
        """
        ...

    def setSizeAdjustPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setValidator(self, *args, **kwargs):
        """
        """
        ...

    def setView(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def showPopup(self, *args, **kwargs):
        """
        """
        ...

    def sizeAdjustPolicy(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def validator(self, *args, **kwargs):
        """
        """
        ...

    def view(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCommandLinkButton(QPushButton):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def description(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setDescription(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCommonStyle(QStyle):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def generatedIconPixmap(self, *args, **kwargs):
        """
        """
        ...

    def hitTestComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def pixelMetric(self, *args, **kwargs):
        """
        """
        ...

    def polish(self, *args, **kwargs):
        """
        """
        ...

    def sizeFromContents(self, *args, **kwargs):
        """
        """
        ...

    def standardIconImplementation(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def subControlRect(self, *args, **kwargs):
        """
        """
        ...

    def subElementRect(self, *args, **kwargs):
        """
        """
        ...

    def unpolish(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCompleter(PySide.QtCore.QObject):
    CaseInsensitivelySortedModel: ...
    """
    """

    CaseSensitivelySortedModel: ...
    """
    """

    CompletionMode: ...
    """
    """

    InlineCompletion: ...
    """
    """

    ModelSorting: ...
    """
    """

    PopupCompletion: ...
    """
    """

    UnfilteredPopupCompletion: ...
    """
    """

    UnsortedModel: ... = PySide.QtGui.QCompleter.ModelSorting.UnsortedModel
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    highlighted: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def caseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def complete(self, *args, **kwargs):
        """
        """
        ...

    def completionColumn(self, *args, **kwargs):
        """
        """
        ...

    def completionCount(self, *args, **kwargs):
        """
        """
        ...

    def completionMode(self, *args, **kwargs):
        """
        """
        ...

    def completionModel(self, *args, **kwargs):
        """
        """
        ...

    def completionPrefix(self, *args, **kwargs):
        """
        """
        ...

    def completionRole(self, *args, **kwargs):
        """
        """
        ...

    def currentCompletion(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def currentRow(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def maxVisibleItems(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def modelSorting(self, *args, **kwargs):
        """
        """
        ...

    def pathFromIndex(self, *args, **kwargs):
        """
        """
        ...

    def popup(self, *args, **kwargs):
        """
        """
        ...

    def setCaseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def setCompletionColumn(self, *args, **kwargs):
        """
        """
        ...

    def setCompletionMode(self, *args, **kwargs):
        """
        """
        ...

    def setCompletionPrefix(self, *args, **kwargs):
        """
        """
        ...

    def setCompletionRole(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentRow(self, *args, **kwargs):
        """
        """
        ...

    def setMaxVisibleItems(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setModelSorting(self, *args, **kwargs):
        """
        """
        ...

    def setPopup(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def setWrapAround(self, *args, **kwargs):
        """
        """
        ...

    def splitPath(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    def wrapAround(self, *args, **kwargs):
        """
        """
        ...

    ...

class QConicalGradient(QGradient):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def angle(self, *args, **kwargs):
        """
        """
        ...

    def center(self, *args, **kwargs):
        """
        """
        ...

    def setAngle(self, *args, **kwargs):
        """
        """
        ...

    def setCenter(self, *args, **kwargs):
        """
        """
        ...

    ...

class QContextMenuEvent(QInputEvent):
    Keyboard: ... = PySide.QtGui.QContextMenuEvent.Reason.Keyboard
    """
    """

    Mouse: ... = PySide.QtGui.QContextMenuEvent.Reason.Mouse
    """
    """

    Other: ... = PySide.QtGui.QContextMenuEvent.Reason.Other
    """
    """

    Reason: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def globalPos(self, *args, **kwargs):
        """
        """
        ...

    def globalX(self, *args, **kwargs):
        """
        """
        ...

    def globalY(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def reason(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QCursor(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def pos(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setPos(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def bitmap(self, *args, **kwargs):
        """
        """
        ...

    def hotSpot(self, *args, **kwargs):
        """
        """
        ...

    def mask(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def setShape(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDataWidgetMapper(PySide.QtCore.QObject):
    AutoSubmit: ... = PySide.QtGui.QDataWidgetMapper.SubmitPolicy.AutoSubmit
    """
    """

    ManualSubmit: ...
    """
    """

    SubmitPolicy: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentIndexChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addMapping(self, *args, **kwargs):
        """
        """
        ...

    def clearMapping(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def itemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def mappedPropertyName(self, *args, **kwargs):
        """
        """
        ...

    def mappedSection(self, *args, **kwargs):
        """
        """
        ...

    def mappedWidgetAt(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def removeMapping(self, *args, **kwargs):
        """
        """
        ...

    def revert(self, *args, **kwargs):
        """
        """
        ...

    def rootIndex(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentModelIndex(self, *args, **kwargs):
        """
        """
        ...

    def setItemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setRootIndex(self, *args, **kwargs):
        """
        """
        ...

    def setSubmitPolicy(self, *args, **kwargs):
        """
        """
        ...

    def submit(self, *args, **kwargs):
        """
        """
        ...

    def submitPolicy(self, *args, **kwargs):
        """
        """
        ...

    def toFirst(self, *args, **kwargs):
        """
        """
        ...

    def toLast(self, *args, **kwargs):
        """
        """
        ...

    def toNext(self, *args, **kwargs):
        """
        """
        ...

    def toPrevious(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDateEdit(QDateTimeEdit):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QDateTimeEdit(QAbstractSpinBox):
    AmPmSection: ... = PySide.QtGui.QDateTimeEdit.Section.AmPmSection
    """
    """

    DateSections_Mask: ...
    """
    """

    DaySection: ... = PySide.QtGui.QDateTimeEdit.Section.DaySection
    """
    """

    HourSection: ... = PySide.QtGui.QDateTimeEdit.Section.HourSection
    """
    """

    MSecSection: ... = PySide.QtGui.QDateTimeEdit.Section.MSecSection
    """
    """

    MinuteSection: ... = PySide.QtGui.QDateTimeEdit.Section.MinuteSection
    """
    """

    MonthSection: ... = PySide.QtGui.QDateTimeEdit.Section.MonthSection
    """
    """

    NoSection: ... = PySide.QtGui.QDateTimeEdit.Section.NoSection
    """
    """

    SecondSection: ... = PySide.QtGui.QDateTimeEdit.Section.SecondSection
    """
    """

    Section: ...
    """
    """

    Sections: ...
    """
    """

    TimeSections_Mask: ...
    """
    """

    YearSection: ... = PySide.QtGui.QDateTimeEdit.Section.YearSection
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    dateChanged: ...
    """
    Signal
    """

    dateTimeChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    timeChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def calendarPopup(self, *args, **kwargs):
        """
        """
        ...

    def calendarWidget(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def clearMaximumDate(self, *args, **kwargs):
        """
        """
        ...

    def clearMaximumDateTime(self, *args, **kwargs):
        """
        """
        ...

    def clearMaximumTime(self, *args, **kwargs):
        """
        """
        ...

    def clearMinimumDate(self, *args, **kwargs):
        """
        """
        ...

    def clearMinimumDateTime(self, *args, **kwargs):
        """
        """
        ...

    def clearMinimumTime(self, *args, **kwargs):
        """
        """
        ...

    def currentSection(self, *args, **kwargs):
        """
        """
        ...

    def currentSectionIndex(self, *args, **kwargs):
        """
        """
        ...

    def date(self, *args, **kwargs):
        """
        """
        ...

    def dateTime(self, *args, **kwargs):
        """
        """
        ...

    def dateTimeFromText(self, *args, **kwargs):
        """
        """
        ...

    def displayFormat(self, *args, **kwargs):
        """
        """
        ...

    def displayedSections(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def fixup(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def maximumDate(self, *args, **kwargs):
        """
        """
        ...

    def maximumDateTime(self, *args, **kwargs):
        """
        """
        ...

    def maximumTime(self, *args, **kwargs):
        """
        """
        ...

    def minimumDate(self, *args, **kwargs):
        """
        """
        ...

    def minimumDateTime(self, *args, **kwargs):
        """
        """
        ...

    def minimumTime(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def sectionAt(self, *args, **kwargs):
        """
        """
        ...

    def sectionCount(self, *args, **kwargs):
        """
        """
        ...

    def sectionText(self, *args, **kwargs):
        """
        """
        ...

    def setCalendarPopup(self, *args, **kwargs):
        """
        """
        ...

    def setCalendarWidget(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentSection(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentSectionIndex(self, *args, **kwargs):
        """
        """
        ...

    def setDate(self, *args, **kwargs):
        """
        """
        ...

    def setDateRange(self, *args, **kwargs):
        """
        """
        ...

    def setDateTime(self, *args, **kwargs):
        """
        """
        ...

    def setDateTimeRange(self, *args, **kwargs):
        """
        """
        ...

    def setDisplayFormat(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumDate(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumDateTime(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumTime(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumDate(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumDateTime(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumTime(self, *args, **kwargs):
        """
        """
        ...

    def setSelectedSection(self, *args, **kwargs):
        """
        """
        ...

    def setTime(self, *args, **kwargs):
        """
        """
        ...

    def setTimeRange(self, *args, **kwargs):
        """
        """
        ...

    def setTimeSpec(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def stepBy(self, *args, **kwargs):
        """
        """
        ...

    def stepEnabled(self, *args, **kwargs):
        """
        """
        ...

    def textFromDateTime(self, *args, **kwargs):
        """
        """
        ...

    def time(self, *args, **kwargs):
        """
        """
        ...

    def timeSpec(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDesktopServices(Shiboken.Object):
    ApplicationsLocation: ...
    """
    """

    CacheLocation: ...
    """
    """

    DataLocation: ...
    """
    """

    DesktopLocation: ...
    """
    """

    DocumentsLocation: ...
    """
    """

    FontsLocation: ...
    """
    """

    HomeLocation: ...
    """
    """

    MoviesLocation: ...
    """
    """

    MusicLocation: ...
    """
    """

    PicturesLocation: ...
    """
    """

    StandardLocation: ...
    """
    """

    TempLocation: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def displayName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def openUrl(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setUrlHandler(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def storageLocation(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def unsetUrlHandler(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QDesktopWidget(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    resized: ...
    """
    Signal
    """

    screenCountChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    workAreaResized: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def availableGeometry(self, *args, **kwargs):
        """
        """
        ...

    def isVirtualDesktop(self, *args, **kwargs):
        """
        """
        ...

    def numScreens(self, *args, **kwargs):
        """
        """
        ...

    def primaryScreen(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def screen(self, *args, **kwargs):
        """
        """
        ...

    def screenCount(self, *args, **kwargs):
        """
        """
        ...

    def screenGeometry(self, *args, **kwargs):
        """
        """
        ...

    def screenNumber(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDial(QAbstractSlider):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    dialMoved: ...
    """
    Signal
    """

    dialPressed: ...
    """
    Signal
    """

    dialReleased: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def notchSize(self, *args, **kwargs):
        """
        """
        ...

    def notchTarget(self, *args, **kwargs):
        """
        """
        ...

    def notchesVisible(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setNotchTarget(self, *args, **kwargs):
        """
        """
        ...

    def setNotchesVisible(self, *args, **kwargs):
        """
        """
        ...

    def setWrapping(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sliderChange(self, *args, **kwargs):
        """
        """
        ...

    def wrapping(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDialog(QWidget):
    Accepted: ... = PySide.QtGui.QDialog.DialogCode.Accepted
    """
    """

    DialogCode: ...
    """
    """

    Rejected: ... = PySide.QtGui.QDialog.DialogCode.Rejected
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    accepted: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    rejected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def accept(self, *args, **kwargs):
        """
        """
        ...

    def adjustPosition(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def isSizeGripEnabled(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def reject(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def result(self, *args, **kwargs):
        """
        """
        ...

    def setModal(self, *args, **kwargs):
        """
        """
        ...

    def setResult(self, *args, **kwargs):
        """
        """
        ...

    def setSizeGripEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDialogButtonBox(QWidget):
    Abort: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Abort
    """
    """

    AcceptRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.AcceptRole
    """
    """

    ActionRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.ActionRole
    """
    """

    Apply: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Apply
    """
    """

    ApplyRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.ApplyRole
    """
    """

    ButtonLayout: ...
    """
    """

    ButtonRole: ...
    """
    """

    Cancel: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Cancel
    """
    """

    Close: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Close
    """
    """

    DestructiveRole: ...
    """
    """

    Discard: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Discard
    """
    """

    FirstButton: ... = PySide.QtGui.QDialogButtonBox.StandardButton.FirstButton
    """
    """

    GnomeLayout: ... = PySide.QtGui.QDialogButtonBox.ButtonLayout.GnomeLayout
    """
    """

    Help: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Help
    """
    """

    HelpRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.HelpRole
    """
    """

    Ignore: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Ignore
    """
    """

    InvalidRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.InvalidRole
    """
    """

    KdeLayout: ... = PySide.QtGui.QDialogButtonBox.ButtonLayout.KdeLayout
    """
    """

    LastButton: ... = PySide.QtGui.QDialogButtonBox.StandardButton.LastButton
    """
    """

    MacLayout: ... = PySide.QtGui.QDialogButtonBox.ButtonLayout.MacLayout
    """
    """

    NRoles: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.NRoles
    """
    """

    No: ... = PySide.QtGui.QDialogButtonBox.StandardButton.No
    """
    """

    NoButton: ... = PySide.QtGui.QDialogButtonBox.StandardButton.NoButton
    """
    """

    NoRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.NoRole
    """
    """

    NoToAll: ... = PySide.QtGui.QDialogButtonBox.StandardButton.NoToAll
    """
    """

    Ok: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Ok
    """
    """

    Open: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Open
    """
    """

    RejectRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.RejectRole
    """
    """

    Reset: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Reset
    """
    """

    ResetRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.ResetRole
    """
    """

    RestoreDefaults: ...
    """
    """

    Retry: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Retry
    """
    """

    Save: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Save
    """
    """

    SaveAll: ... = PySide.QtGui.QDialogButtonBox.StandardButton.SaveAll
    """
    """

    StandardButton: ...
    """
    """

    StandardButtons: ...
    """
    """

    WinLayout: ... = PySide.QtGui.QDialogButtonBox.ButtonLayout.WinLayout
    """
    """

    Yes: ... = PySide.QtGui.QDialogButtonBox.StandardButton.Yes
    """
    """

    YesRole: ... = PySide.QtGui.QDialogButtonBox.ButtonRole.YesRole
    """
    """

    YesToAll: ... = PySide.QtGui.QDialogButtonBox.StandardButton.YesToAll
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    accepted: ...
    """
    Signal
    """

    clicked: ...
    """
    Signal
    """

    helpRequested: ...
    """
    Signal
    """

    rejected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addButton(self, *args, **kwargs):
        """
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def buttonRole(self, *args, **kwargs):
        """
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def centerButtons(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def removeButton(self, *args, **kwargs):
        """
        """
        ...

    def setCenterButtons(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setStandardButtons(self, *args, **kwargs):
        """
        """
        ...

    def standardButton(self, *args, **kwargs):
        """
        """
        ...

    def standardButtons(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDirModel(PySide.QtCore.QAbstractItemModel):
    FileIconRole: ... = PySide.QtGui.QDirModel.Roles.FileIconRole
    """
    """

    FileNameRole: ... = PySide.QtGui.QDirModel.Roles.FileNameRole
    """
    """

    FilePathRole: ... = PySide.QtGui.QDirModel.Roles.FilePathRole
    """
    """

    Roles: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def fileIcon(self, *args, **kwargs):
        """
        """
        ...

    def fileInfo(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def filePath(self, *args, **kwargs):
        """
        """
        ...

    def filter(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def headerData(self, *args, **kwargs):
        """
        """
        ...

    def iconProvider(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def isDir(self, *args, **kwargs):
        """
        """
        ...

    def isReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def lazyChildCount(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def mkdir(self, *args, **kwargs):
        """
        """
        ...

    def nameFilters(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def refresh(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def resolveSymlinks(self, *args, **kwargs):
        """
        """
        ...

    def rmdir(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setFilter(self, *args, **kwargs):
        """
        """
        ...

    def setIconProvider(self, *args, **kwargs):
        """
        """
        ...

    def setLazyChildCount(self, *args, **kwargs):
        """
        """
        ...

    def setNameFilters(self, *args, **kwargs):
        """
        """
        ...

    def setReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def setResolveSymlinks(self, *args, **kwargs):
        """
        """
        ...

    def setSorting(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def sorting(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDockWidget(QWidget):
    AllDockWidgetFeatures: ...
    """
    """

    DockWidgetClosable: ...
    """
    """

    DockWidgetFeature: ...
    """
    """

    DockWidgetFeatureMask: ...
    """
    """

    DockWidgetFeatures: ...
    """
    """

    DockWidgetFloatable: ...
    """
    """

    DockWidgetMovable: ...
    """
    """

    DockWidgetVerticalTitleBar: ...
    """
    """

    NoDockWidgetFeatures: ...
    """
    """

    Reserved: ... = PySide.QtGui.QDockWidget.DockWidgetFeature.Reserved
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    allowedAreasChanged: ...
    """
    Signal
    """

    dockLocationChanged: ...
    """
    Signal
    """

    featuresChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    topLevelChanged: ...
    """
    Signal
    """

    visibilityChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def allowedAreas(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def features(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def isAreaAllowed(self, *args, **kwargs):
        """
        """
        ...

    def isFloating(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setAllowedAreas(self, *args, **kwargs):
        """
        """
        ...

    def setFeatures(self, *args, **kwargs):
        """
        """
        ...

    def setFloating(self, *args, **kwargs):
        """
        """
        ...

    def setTitleBarWidget(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def titleBarWidget(self, *args, **kwargs):
        """
        """
        ...

    def toggleViewAction(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDoubleSpinBox(QAbstractSpinBox):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    valueChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def cleanText(self, *args, **kwargs):
        """
        """
        ...

    def decimals(self, *args, **kwargs):
        """
        """
        ...

    def fixup(self, *args, **kwargs):
        """
        """
        ...

    def maximum(self, *args, **kwargs):
        """
        """
        ...

    def minimum(self, *args, **kwargs):
        """
        """
        ...

    def prefix(self, *args, **kwargs):
        """
        """
        ...

    def setDecimals(self, *args, **kwargs):
        """
        """
        ...

    def setMaximum(self, *args, **kwargs):
        """
        """
        ...

    def setMinimum(self, *args, **kwargs):
        """
        """
        ...

    def setPrefix(self, *args, **kwargs):
        """
        """
        ...

    def setRange(self, *args, **kwargs):
        """
        """
        ...

    def setSingleStep(self, *args, **kwargs):
        """
        """
        ...

    def setSuffix(self, *args, **kwargs):
        """
        """
        ...

    def setValue(self, *args, **kwargs):
        """
        """
        ...

    def singleStep(self, *args, **kwargs):
        """
        """
        ...

    def suffix(self, *args, **kwargs):
        """
        """
        ...

    def textFromValue(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    def valueFromText(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDoubleValidator(QValidator):
    Notation: ...
    """
    """

    ScientificNotation: ...
    """
    """

    StandardNotation: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def bottom(self, *args, **kwargs):
        """
        """
        ...

    def decimals(self, *args, **kwargs):
        """
        """
        ...

    def notation(self, *args, **kwargs):
        """
        """
        ...

    def setBottom(self, *args, **kwargs):
        """
        """
        ...

    def setDecimals(self, *args, **kwargs):
        """
        """
        ...

    def setNotation(self, *args, **kwargs):
        """
        """
        ...

    def setRange(self, *args, **kwargs):
        """
        """
        ...

    def setTop(self, *args, **kwargs):
        """
        """
        ...

    def top(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDrag(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    actionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    targetChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def hotSpot(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def setDragCursor(self, *args, **kwargs):
        """
        """
        ...

    def setHotSpot(self, *args, **kwargs):
        """
        """
        ...

    def setMimeData(self, *args, **kwargs):
        """
        """
        ...

    def setPixmap(self, *args, **kwargs):
        """
        """
        ...

    def source(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def target(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDragEnterEvent(QDragMoveEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QDragLeaveEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QDragMoveEvent(QDropEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def accept(self, *args, **kwargs):
        """
        """
        ...

    def answerRect(self, *args, **kwargs):
        """
        """
        ...

    def ignore(self, *args, **kwargs):
        """
        """
        ...

    ...

class QDropEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def acceptProposedAction(self, *args, **kwargs):
        """
        """
        ...

    def dropAction(self, *args, **kwargs):
        """
        """
        ...

    def keyboardModifiers(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mouseButtons(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def possibleActions(self, *args, **kwargs):
        """
        """
        ...

    def proposedAction(self, *args, **kwargs):
        """
        """
        ...

    def setDropAction(self, *args, **kwargs):
        """
        """
        ...

    def source(self, *args, **kwargs):
        """
        """
        ...

    ...

class QErrorMessage(QDialog):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def qtHandler(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def showMessage(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFileDialog(QDialog):
    Accept: ... = PySide.QtGui.QFileDialog.DialogLabel.Accept
    """
    """

    AcceptMode: ...
    """
    """

    AcceptOpen: ... = PySide.QtGui.QFileDialog.AcceptMode.AcceptOpen
    """
    """

    AcceptSave: ... = PySide.QtGui.QFileDialog.AcceptMode.AcceptSave
    """
    """

    AnyFile: ... = PySide.QtGui.QFileDialog.FileMode.AnyFile
    """
    """

    Detail: ... = PySide.QtGui.QFileDialog.ViewMode.Detail
    """
    """

    DialogLabel: ...
    """
    """

    Directory: ... = PySide.QtGui.QFileDialog.FileMode.Directory
    """
    """

    DirectoryOnly: ... = PySide.QtGui.QFileDialog.FileMode.DirectoryOnly
    """
    """

    DontConfirmOverwrite: ...
    """
    """

    DontResolveSymlinks: ...
    """
    """

    DontUseNativeDialog: ...
    """
    """

    DontUseSheet: ... = PySide.QtGui.QFileDialog.Option.DontUseSheet
    """
    """

    ExistingFile: ... = PySide.QtGui.QFileDialog.FileMode.ExistingFile
    """
    """

    ExistingFiles: ... = PySide.QtGui.QFileDialog.FileMode.ExistingFiles
    """
    """

    FileMode: ...
    """
    """

    FileName: ... = PySide.QtGui.QFileDialog.DialogLabel.FileName
    """
    """

    FileType: ... = PySide.QtGui.QFileDialog.DialogLabel.FileType
    """
    """

    HideNameFilterDetails: ...
    """
    """

    List: ... = PySide.QtGui.QFileDialog.ViewMode.List
    """
    """

    LookIn: ... = PySide.QtGui.QFileDialog.DialogLabel.LookIn
    """
    """

    Option: ...
    """
    """

    Options: ...
    """
    """

    ReadOnly: ... = PySide.QtGui.QFileDialog.Option.ReadOnly
    """
    """

    Reject: ... = PySide.QtGui.QFileDialog.DialogLabel.Reject
    """
    """

    ShowDirsOnly: ... = PySide.QtGui.QFileDialog.Option.ShowDirsOnly
    """
    """

    ViewMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    directoryEntered: ...
    """
    Signal
    """

    fileSelected: ...
    """
    Signal
    """

    filesSelected: ...
    """
    Signal
    """

    filterSelected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def getExistingDirectory(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getOpenFileName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getOpenFileNames(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getSaveFileName(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def accept(self, *args, **kwargs):
        """
        """
        ...

    def acceptMode(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def confirmOverwrite(self, *args, **kwargs):
        """
        """
        ...

    def defaultSuffix(self, *args, **kwargs):
        """
        """
        ...

    def directory(self, *args, **kwargs):
        """
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def fileMode(self, *args, **kwargs):
        """
        """
        ...

    def filter(self, *args, **kwargs):
        """
        """
        ...

    def filters(self, *args, **kwargs):
        """
        """
        ...

    def history(self, *args, **kwargs):
        """
        """
        ...

    def iconProvider(self, *args, **kwargs):
        """
        """
        ...

    def isNameFilterDetailsVisible(self, *args, **kwargs):
        """
        """
        ...

    def isReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def itemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def labelText(self, *args, **kwargs):
        """
        """
        ...

    def nameFilters(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def options(self, *args, **kwargs):
        """
        """
        ...

    def proxyModel(self, *args, **kwargs):
        """
        """
        ...

    def resolveSymlinks(self, *args, **kwargs):
        """
        """
        ...

    def restoreState(self, *args, **kwargs):
        """
        """
        ...

    def saveState(self, *args, **kwargs):
        """
        """
        ...

    def selectFile(self, *args, **kwargs):
        """
        """
        ...

    def selectFilter(self, *args, **kwargs):
        """
        """
        ...

    def selectNameFilter(self, *args, **kwargs):
        """
        """
        ...

    def selectedFiles(self, *args, **kwargs):
        """
        """
        ...

    def selectedFilter(self, *args, **kwargs):
        """
        """
        ...

    def selectedNameFilter(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptMode(self, *args, **kwargs):
        """
        """
        ...

    def setConfirmOverwrite(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultSuffix(self, *args, **kwargs):
        """
        """
        ...

    def setDirectory(self, *args, **kwargs):
        """
        """
        ...

    def setFileMode(self, *args, **kwargs):
        """
        """
        ...

    def setFilter(self, *args, **kwargs):
        """
        """
        ...

    def setFilters(self, *args, **kwargs):
        """
        """
        ...

    def setHistory(self, *args, **kwargs):
        """
        """
        ...

    def setIconProvider(self, *args, **kwargs):
        """
        """
        ...

    def setItemDelegate(self, *args, **kwargs):
        """
        """
        ...

    def setLabelText(self, *args, **kwargs):
        """
        """
        ...

    def setNameFilter(self, *args, **kwargs):
        """
        """
        ...

    def setNameFilterDetailsVisible(self, *args, **kwargs):
        """
        """
        ...

    def setNameFilters(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setOptions(self, *args, **kwargs):
        """
        """
        ...

    def setProxyModel(self, *args, **kwargs):
        """
        """
        ...

    def setReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def setResolveSymlinks(self, *args, **kwargs):
        """
        """
        ...

    def setSidebarUrls(self, *args, **kwargs):
        """
        """
        ...

    def setViewMode(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def sidebarUrls(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    def viewMode(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFileIconProvider(Shiboken.Object):
    Computer: ... = PySide.QtGui.QFileIconProvider.IconType.Computer
    """
    """

    Desktop: ... = PySide.QtGui.QFileIconProvider.IconType.Desktop
    """
    """

    Drive: ... = PySide.QtGui.QFileIconProvider.IconType.Drive
    """
    """

    File: ... = PySide.QtGui.QFileIconProvider.IconType.File
    """
    """

    Folder: ... = PySide.QtGui.QFileIconProvider.IconType.Folder
    """
    """

    IconType: ...
    """
    """

    Network: ... = PySide.QtGui.QFileIconProvider.IconType.Network
    """
    """

    Trashcan: ... = PySide.QtGui.QFileIconProvider.IconType.Trashcan
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFileOpenEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def file(self, *args, **kwargs):
        """
        """
        ...

    def openFile(self, *args, **kwargs):
        """
        """
        ...

    def url(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFileSystemModel(PySide.QtCore.QAbstractItemModel):
    FileIconRole: ... = PySide.QtGui.QFileSystemModel.Roles.FileIconRole
    """
    """

    FileNameRole: ... = PySide.QtGui.QFileSystemModel.Roles.FileNameRole
    """
    """

    FilePathRole: ... = PySide.QtGui.QFileSystemModel.Roles.FilePathRole
    """
    """

    FilePermissions: ... = PySide.QtGui.QFileSystemModel.Roles.FilePermissions
    """
    """

    Roles: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    directoryLoaded: ...
    """
    Signal
    """

    fileRenamed: ...
    """
    Signal
    """

    rootPathChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def canFetchMore(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def fetchMore(self, *args, **kwargs):
        """
        """
        ...

    def fileIcon(self, *args, **kwargs):
        """
        """
        ...

    def fileInfo(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def filePath(self, *args, **kwargs):
        """
        """
        ...

    def filter(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def headerData(self, *args, **kwargs):
        """
        """
        ...

    def iconProvider(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def isDir(self, *args, **kwargs):
        """
        """
        ...

    def isReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def lastModified(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def mkdir(self, *args, **kwargs):
        """
        """
        ...

    def myComputer(self, *args, **kwargs):
        """
        """
        ...

    def nameFilterDisables(self, *args, **kwargs):
        """
        """
        ...

    def nameFilters(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def permissions(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def resolveSymlinks(self, *args, **kwargs):
        """
        """
        ...

    def rmdir(self, *args, **kwargs):
        """
        """
        ...

    def rootDirectory(self, *args, **kwargs):
        """
        """
        ...

    def rootPath(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setFilter(self, *args, **kwargs):
        """
        """
        ...

    def setIconProvider(self, *args, **kwargs):
        """
        """
        ...

    def setNameFilterDisables(self, *args, **kwargs):
        """
        """
        ...

    def setNameFilters(self, *args, **kwargs):
        """
        """
        ...

    def setReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def setResolveSymlinks(self, *args, **kwargs):
        """
        """
        ...

    def setRootPath(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFocusEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def gotFocus(self, *args, **kwargs):
        """
        """
        ...

    def lostFocus(self, *args, **kwargs):
        """
        """
        ...

    def reason(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFocusFrame(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFont(Shiboken.Object):
    AbsoluteSpacing: ... = PySide.QtGui.QFont.SpacingType.AbsoluteSpacing
    """
    """

    AllLowercase: ... = PySide.QtGui.QFont.Capitalization.AllLowercase
    """
    """

    AllUppercase: ... = PySide.QtGui.QFont.Capitalization.AllUppercase
    """
    """

    AnyStyle: ... = PySide.QtGui.QFont.StyleHint.AnyStyle
    """
    """

    Black: ... = PySide.QtGui.QFont.Weight.Black
    """
    """

    Bold: ... = PySide.QtGui.QFont.Weight.Bold
    """
    """

    Capitalization: ...
    """
    """

    Capitalize: ... = PySide.QtGui.QFont.Capitalization.Capitalize
    """
    """

    Condensed: ... = PySide.QtGui.QFont.Stretch.Condensed
    """
    """

    Courier: ... = PySide.QtGui.QFont.StyleHint.Courier
    """
    """

    Cursive: ... = PySide.QtGui.QFont.StyleHint.Cursive
    """
    """

    Decorative: ... = PySide.QtGui.QFont.StyleHint.Decorative
    """
    """

    DemiBold: ... = PySide.QtGui.QFont.Weight.DemiBold
    """
    """

    Expanded: ... = PySide.QtGui.QFont.Stretch.Expanded
    """
    """

    ExtraCondensed: ... = PySide.QtGui.QFont.Stretch.ExtraCondensed
    """
    """

    ExtraExpanded: ... = PySide.QtGui.QFont.Stretch.ExtraExpanded
    """
    """

    Fantasy: ... = PySide.QtGui.QFont.StyleHint.Fantasy
    """
    """

    ForceIntegerMetrics: ...
    """
    """

    ForceOutline: ... = PySide.QtGui.QFont.StyleStrategy.ForceOutline
    """
    """

    Helvetica: ... = PySide.QtGui.QFont.StyleHint.Helvetica
    """
    """

    HintingPreference: ...
    """
    """

    Light: ... = PySide.QtGui.QFont.Weight.Light
    """
    """

    MixedCase: ... = PySide.QtGui.QFont.Capitalization.MixedCase
    """
    """

    Monospace: ... = PySide.QtGui.QFont.StyleHint.Monospace
    """
    """

    NoAntialias: ... = PySide.QtGui.QFont.StyleStrategy.NoAntialias
    """
    """

    NoFontMerging: ... = PySide.QtGui.QFont.StyleStrategy.NoFontMerging
    """
    """

    Normal: ... = PySide.QtGui.QFont.Weight.Normal
    """
    """

    OldEnglish: ... = PySide.QtGui.QFont.StyleHint.OldEnglish
    """
    """

    OpenGLCompatible: ... = PySide.QtGui.QFont.StyleStrategy.OpenGLCompatible
    """
    """

    PercentageSpacing: ... = PySide.QtGui.QFont.SpacingType.PercentageSpacing
    """
    """

    PreferAntialias: ... = PySide.QtGui.QFont.StyleStrategy.PreferAntialias
    """
    """

    PreferBitmap: ... = PySide.QtGui.QFont.StyleStrategy.PreferBitmap
    """
    """

    PreferDefault: ... = PySide.QtGui.QFont.StyleStrategy.PreferDefault
    """
    """

    PreferDefaultHinting: ...
    """
    """

    PreferDevice: ... = PySide.QtGui.QFont.StyleStrategy.PreferDevice
    """
    """

    PreferFullHinting: ...
    """
    """

    PreferMatch: ... = PySide.QtGui.QFont.StyleStrategy.PreferMatch
    """
    """

    PreferNoHinting: ... = PySide.QtGui.QFont.HintingPreference.PreferNoHinting
    """
    """

    PreferOutline: ... = PySide.QtGui.QFont.StyleStrategy.PreferOutline
    """
    """

    PreferQuality: ... = PySide.QtGui.QFont.StyleStrategy.PreferQuality
    """
    """

    PreferVerticalHinting: ...
    """
    """

    SansSerif: ... = PySide.QtGui.QFont.StyleHint.SansSerif
    """
    """

    SemiCondensed: ... = PySide.QtGui.QFont.Stretch.SemiCondensed
    """
    """

    SemiExpanded: ... = PySide.QtGui.QFont.Stretch.SemiExpanded
    """
    """

    Serif: ... = PySide.QtGui.QFont.StyleHint.Serif
    """
    """

    SmallCaps: ... = PySide.QtGui.QFont.Capitalization.SmallCaps
    """
    """

    SpacingType: ...
    """
    """

    Stretch: ...
    """
    """

    Style: ...
    """
    """

    StyleHint: ...
    """
    """

    StyleItalic: ... = PySide.QtGui.QFont.Style.StyleItalic
    """
    """

    StyleNormal: ... = PySide.QtGui.QFont.Style.StyleNormal
    """
    """

    StyleOblique: ... = PySide.QtGui.QFont.Style.StyleOblique
    """
    """

    StyleStrategy: ...
    """
    """

    System: ... = PySide.QtGui.QFont.StyleHint.System
    """
    """

    Times: ... = PySide.QtGui.QFont.StyleHint.Times
    """
    """

    TypeWriter: ... = PySide.QtGui.QFont.StyleHint.TypeWriter
    """
    """

    UltraCondensed: ... = PySide.QtGui.QFont.Stretch.UltraCondensed
    """
    """

    UltraExpanded: ... = PySide.QtGui.QFont.Stretch.UltraExpanded
    """
    """

    Unstretched: ... = PySide.QtGui.QFont.Stretch.Unstretched
    """
    """

    Weight: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def cacheStatistics(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def cleanup(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def initialize(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def insertSubstitution(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def insertSubstitutions(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def removeSubstitution(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def substitute(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def substitutes(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def substitutions(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def bold(self, *args, **kwargs):
        """
        """
        ...

    def capitalization(self, *args, **kwargs):
        """
        """
        ...

    def defaultFamily(self, *args, **kwargs):
        """
        """
        ...

    def exactMatch(self, *args, **kwargs):
        """
        """
        ...

    def family(self, *args, **kwargs):
        """
        """
        ...

    def fixedPitch(self, *args, **kwargs):
        """
        """
        ...

    def fromString(self, *args, **kwargs):
        """
        """
        ...

    def hintingPreference(self, *args, **kwargs):
        """
        """
        ...

    def isCopyOf(self, *args, **kwargs):
        """
        """
        ...

    def italic(self, *args, **kwargs):
        """
        """
        ...

    def kerning(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def lastResortFamily(self, *args, **kwargs):
        """
        """
        ...

    def lastResortFont(self, *args, **kwargs):
        """
        """
        ...

    def letterSpacing(self, *args, **kwargs):
        """
        """
        ...

    def letterSpacingType(self, *args, **kwargs):
        """
        """
        ...

    def overline(self, *args, **kwargs):
        """
        """
        ...

    def pixelSize(self, *args, **kwargs):
        """
        """
        ...

    def pointSize(self, *args, **kwargs):
        """
        """
        ...

    def pointSizeF(self, *args, **kwargs):
        """
        """
        ...

    def rawMode(self, *args, **kwargs):
        """
        """
        ...

    def rawName(self, *args, **kwargs):
        """
        """
        ...

    def resolve(self, *args, **kwargs):
        """
        """
        ...

    def setBold(self, *args, **kwargs):
        """
        """
        ...

    def setCapitalization(self, *args, **kwargs):
        """
        """
        ...

    def setFamily(self, *args, **kwargs):
        """
        """
        ...

    def setFixedPitch(self, *args, **kwargs):
        """
        """
        ...

    def setHintingPreference(self, *args, **kwargs):
        """
        """
        ...

    def setItalic(self, *args, **kwargs):
        """
        """
        ...

    def setKerning(self, *args, **kwargs):
        """
        """
        ...

    def setLetterSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setOverline(self, *args, **kwargs):
        """
        """
        ...

    def setPixelSize(self, *args, **kwargs):
        """
        """
        ...

    def setPointSize(self, *args, **kwargs):
        """
        """
        ...

    def setPointSizeF(self, *args, **kwargs):
        """
        """
        ...

    def setRawMode(self, *args, **kwargs):
        """
        """
        ...

    def setRawName(self, *args, **kwargs):
        """
        """
        ...

    def setStretch(self, *args, **kwargs):
        """
        """
        ...

    def setStrikeOut(self, *args, **kwargs):
        """
        """
        ...

    def setStyle(self, *args, **kwargs):
        """
        """
        ...

    def setStyleHint(self, *args, **kwargs):
        """
        """
        ...

    def setStyleName(self, *args, **kwargs):
        """
        """
        ...

    def setStyleStrategy(self, *args, **kwargs):
        """
        """
        ...

    def setUnderline(self, *args, **kwargs):
        """
        """
        ...

    def setWeight(self, *args, **kwargs):
        """
        """
        ...

    def setWordSpacing(self, *args, **kwargs):
        """
        """
        ...

    def stretch(self, *args, **kwargs):
        """
        """
        ...

    def strikeOut(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def styleName(self, *args, **kwargs):
        """
        """
        ...

    def styleStrategy(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    def underline(self, *args, **kwargs):
        """
        """
        ...

    def weight(self, *args, **kwargs):
        """
        """
        ...

    def wordSpacing(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFontComboBox(QComboBox):
    AllFonts: ... = PySide.QtGui.QFontComboBox.FontFilter.AllFonts
    """
    """

    FontFilter: ...
    """
    """

    FontFilters: ...
    """
    """

    MonospacedFonts: ...
    """
    """

    NonScalableFonts: ...
    """
    """

    ProportionalFonts: ...
    """
    """

    ScalableFonts: ... = PySide.QtGui.QFontComboBox.FontFilter.ScalableFonts
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentFontChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def currentFont(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def fontFilters(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentFont(self, *args, **kwargs):
        """
        """
        ...

    def setFontFilters(self, *args, **kwargs):
        """
        """
        ...

    def setWritingSystem(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def writingSystem(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFontDatabase(Shiboken.Object):
    Any: ... = PySide.QtGui.QFontDatabase.WritingSystem.Any
    """
    """

    Arabic: ... = PySide.QtGui.QFontDatabase.WritingSystem.Arabic
    """
    """

    Armenian: ... = PySide.QtGui.QFontDatabase.WritingSystem.Armenian
    """
    """

    Bengali: ... = PySide.QtGui.QFontDatabase.WritingSystem.Bengali
    """
    """

    Cyrillic: ... = PySide.QtGui.QFontDatabase.WritingSystem.Cyrillic
    """
    """

    Devanagari: ... = PySide.QtGui.QFontDatabase.WritingSystem.Devanagari
    """
    """

    Georgian: ... = PySide.QtGui.QFontDatabase.WritingSystem.Georgian
    """
    """

    Greek: ... = PySide.QtGui.QFontDatabase.WritingSystem.Greek
    """
    """

    Gujarati: ... = PySide.QtGui.QFontDatabase.WritingSystem.Gujarati
    """
    """

    Gurmukhi: ... = PySide.QtGui.QFontDatabase.WritingSystem.Gurmukhi
    """
    """

    Hebrew: ... = PySide.QtGui.QFontDatabase.WritingSystem.Hebrew
    """
    """

    Japanese: ... = PySide.QtGui.QFontDatabase.WritingSystem.Japanese
    """
    """

    Kannada: ... = PySide.QtGui.QFontDatabase.WritingSystem.Kannada
    """
    """

    Khmer: ... = PySide.QtGui.QFontDatabase.WritingSystem.Khmer
    """
    """

    Korean: ... = PySide.QtGui.QFontDatabase.WritingSystem.Korean
    """
    """

    Lao: ... = PySide.QtGui.QFontDatabase.WritingSystem.Lao
    """
    """

    Latin: ... = PySide.QtGui.QFontDatabase.WritingSystem.Latin
    """
    """

    Malayalam: ... = PySide.QtGui.QFontDatabase.WritingSystem.Malayalam
    """
    """

    Myanmar: ... = PySide.QtGui.QFontDatabase.WritingSystem.Myanmar
    """
    """

    Nko: ... = PySide.QtGui.QFontDatabase.WritingSystem.Nko
    """
    """

    Ogham: ... = PySide.QtGui.QFontDatabase.WritingSystem.Ogham
    """
    """

    Oriya: ... = PySide.QtGui.QFontDatabase.WritingSystem.Oriya
    """
    """

    Other: ... = PySide.QtGui.QFontDatabase.WritingSystem.Other
    """
    """

    Runic: ... = PySide.QtGui.QFontDatabase.WritingSystem.Runic
    """
    """

    SimplifiedChinese: ...
    """
    """

    Sinhala: ... = PySide.QtGui.QFontDatabase.WritingSystem.Sinhala
    """
    """

    Symbol: ... = PySide.QtGui.QFontDatabase.WritingSystem.Symbol
    """
    """

    Syriac: ... = PySide.QtGui.QFontDatabase.WritingSystem.Syriac
    """
    """

    Tamil: ... = PySide.QtGui.QFontDatabase.WritingSystem.Tamil
    """
    """

    Telugu: ... = PySide.QtGui.QFontDatabase.WritingSystem.Telugu
    """
    """

    Thaana: ... = PySide.QtGui.QFontDatabase.WritingSystem.Thaana
    """
    """

    Thai: ... = PySide.QtGui.QFontDatabase.WritingSystem.Thai
    """
    """

    Tibetan: ... = PySide.QtGui.QFontDatabase.WritingSystem.Tibetan
    """
    """

    TraditionalChinese: ...
    """
    """

    Vietnamese: ... = PySide.QtGui.QFontDatabase.WritingSystem.Vietnamese
    """
    """

    WritingSystem: ...
    """
    """

    WritingSystemsCount: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def addApplicationFont(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def addApplicationFontFromData(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def applicationFontFamilies(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def removeAllApplicationFonts(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def removeApplicationFont(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def standardSizes(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def supportsThreadedFontRendering(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def writingSystemName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def writingSystemSample(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def bold(self, *args, **kwargs):
        """
        """
        ...

    def families(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def hasFamily(self, *args, **kwargs):
        """
        """
        ...

    def isBitmapScalable(self, *args, **kwargs):
        """
        """
        ...

    def isFixedPitch(self, *args, **kwargs):
        """
        """
        ...

    def isScalable(self, *args, **kwargs):
        """
        """
        ...

    def isSmoothlyScalable(self, *args, **kwargs):
        """
        """
        ...

    def italic(self, *args, **kwargs):
        """
        """
        ...

    def pointSizes(self, *args, **kwargs):
        """
        """
        ...

    def smoothSizes(self, *args, **kwargs):
        """
        """
        ...

    def styleString(self, *args, **kwargs):
        """
        """
        ...

    def styles(self, *args, **kwargs):
        """
        """
        ...

    def weight(self, *args, **kwargs):
        """
        """
        ...

    def writingSystems(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFontDialog(QDialog):
    DontUseNativeDialog: ...
    """
    """

    FontDialogOption: ...
    """
    """

    FontDialogOptions: ...
    """
    """

    NoButtons: ... = PySide.QtGui.QFontDialog.FontDialogOption.NoButtons
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentFontChanged: ...
    """
    Signal
    """

    fontSelected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def getFont(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def currentFont(self, *args, **kwargs):
        """
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def options(self, *args, **kwargs):
        """
        """
        ...

    def selectedFont(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentFont(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setOptions(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFontInfo(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def bold(self, *args, **kwargs):
        """
        """
        ...

    def exactMatch(self, *args, **kwargs):
        """
        """
        ...

    def family(self, *args, **kwargs):
        """
        """
        ...

    def fixedPitch(self, *args, **kwargs):
        """
        """
        ...

    def italic(self, *args, **kwargs):
        """
        """
        ...

    def overline(self, *args, **kwargs):
        """
        """
        ...

    def pixelSize(self, *args, **kwargs):
        """
        """
        ...

    def pointSize(self, *args, **kwargs):
        """
        """
        ...

    def pointSizeF(self, *args, **kwargs):
        """
        """
        ...

    def rawMode(self, *args, **kwargs):
        """
        """
        ...

    def strikeOut(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def styleName(self, *args, **kwargs):
        """
        """
        ...

    def underline(self, *args, **kwargs):
        """
        """
        ...

    def weight(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFontMetrics(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def ascent(self, *args, **kwargs):
        """
        """
        ...

    def averageCharWidth(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def boundingRectChar(self, *args, **kwargs):
        """
        """
        ...

    def charWidth(self, *args, **kwargs):
        """
        """
        ...

    def descent(self, *args, **kwargs):
        """
        """
        ...

    def elidedText(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def inFont(self, *args, **kwargs):
        """
        """
        ...

    def inFontUcs4(self, *args, **kwargs):
        """
        """
        ...

    def leading(self, *args, **kwargs):
        """
        """
        ...

    def leftBearing(self, *args, **kwargs):
        """
        """
        ...

    def lineSpacing(self, *args, **kwargs):
        """
        """
        ...

    def lineWidth(self, *args, **kwargs):
        """
        """
        ...

    def maxWidth(self, *args, **kwargs):
        """
        """
        ...

    def minLeftBearing(self, *args, **kwargs):
        """
        """
        ...

    def minRightBearing(self, *args, **kwargs):
        """
        """
        ...

    def overlinePos(self, *args, **kwargs):
        """
        """
        ...

    def rightBearing(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def strikeOutPos(self, *args, **kwargs):
        """
        """
        ...

    def tightBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def underlinePos(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def widthChar(self, *args, **kwargs):
        """
        """
        ...

    def xHeight(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFontMetricsF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def ascent(self, *args, **kwargs):
        """
        """
        ...

    def averageCharWidth(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def boundingRectChar(self, *args, **kwargs):
        """
        """
        ...

    def descent(self, *args, **kwargs):
        """
        """
        ...

    def elidedText(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def inFont(self, *args, **kwargs):
        """
        """
        ...

    def inFontUcs4(self, *args, **kwargs):
        """
        """
        ...

    def leading(self, *args, **kwargs):
        """
        """
        ...

    def leftBearing(self, *args, **kwargs):
        """
        """
        ...

    def lineSpacing(self, *args, **kwargs):
        """
        """
        ...

    def lineWidth(self, *args, **kwargs):
        """
        """
        ...

    def maxWidth(self, *args, **kwargs):
        """
        """
        ...

    def minLeftBearing(self, *args, **kwargs):
        """
        """
        ...

    def minRightBearing(self, *args, **kwargs):
        """
        """
        ...

    def overlinePos(self, *args, **kwargs):
        """
        """
        ...

    def rightBearing(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def strikeOutPos(self, *args, **kwargs):
        """
        """
        ...

    def tightBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def underlinePos(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def widthChar(self, *args, **kwargs):
        """
        """
        ...

    def xHeight(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFormLayout(QLayout):
    AllNonFixedFieldsGrow: ...
    """
    """

    DontWrapRows: ... = PySide.QtGui.QFormLayout.RowWrapPolicy.DontWrapRows
    """
    """

    ExpandingFieldsGrow: ...
    """
    """

    FieldGrowthPolicy: ...
    """
    """

    FieldRole: ... = PySide.QtGui.QFormLayout.ItemRole.FieldRole
    """
    """

    FieldsStayAtSizeHint: ...
    """
    """

    ItemRole: ...
    """
    """

    LabelRole: ... = PySide.QtGui.QFormLayout.ItemRole.LabelRole
    """
    """

    RowWrapPolicy: ...
    """
    """

    SpanningRole: ... = PySide.QtGui.QFormLayout.ItemRole.SpanningRole
    """
    """

    WrapAllRows: ... = PySide.QtGui.QFormLayout.RowWrapPolicy.WrapAllRows
    """
    """

    WrapLongRows: ... = PySide.QtGui.QFormLayout.RowWrapPolicy.WrapLongRows
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addRow(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def fieldGrowthPolicy(self, *args, **kwargs):
        """
        """
        ...

    def formAlignment(self, *args, **kwargs):
        """
        """
        ...

    def getItemPosition(self, *args, **kwargs):
        """
        """
        ...

    def getLayoutPosition(self, *args, **kwargs):
        """
        """
        ...

    def getWidgetPosition(self, *args, **kwargs):
        """
        """
        ...

    def hasHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def horizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def insertRow(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def labelAlignment(self, *args, **kwargs):
        """
        """
        ...

    def labelForField(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def rowWrapPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setFieldGrowthPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setFormAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setItem(self, *args, **kwargs):
        """
        """
        ...

    def setLabelAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setLayout(self, *args, **kwargs):
        """
        """
        ...

    def setRowWrapPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def spacing(self, *args, **kwargs):
        """
        """
        ...

    def takeAt(self, *args, **kwargs):
        """
        """
        ...

    def verticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    ...

class QFrame(QWidget):
    Box: ... = PySide.QtGui.QFrame.Shape.Box
    """
    """

    HLine: ... = PySide.QtGui.QFrame.Shape.HLine
    """
    """

    NoFrame: ... = PySide.QtGui.QFrame.Shape.NoFrame
    """
    """

    Panel: ... = PySide.QtGui.QFrame.Shape.Panel
    """
    """

    Plain: ... = PySide.QtGui.QFrame.Shadow.Plain
    """
    """

    Raised: ... = PySide.QtGui.QFrame.Shadow.Raised
    """
    """

    Shadow: ...
    """
    """

    Shadow_Mask: ... = PySide.QtGui.QFrame.StyleMask.Shadow_Mask
    """
    """

    Shape: ...
    """
    """

    Shape_Mask: ... = PySide.QtGui.QFrame.StyleMask.Shape_Mask
    """
    """

    StyleMask: ...
    """
    """

    StyledPanel: ... = PySide.QtGui.QFrame.Shape.StyledPanel
    """
    """

    Sunken: ... = PySide.QtGui.QFrame.Shadow.Sunken
    """
    """

    VLine: ... = PySide.QtGui.QFrame.Shape.VLine
    """
    """

    WinPanel: ... = PySide.QtGui.QFrame.Shape.WinPanel
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def drawFrame(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def frameRect(self, *args, **kwargs):
        """
        """
        ...

    def frameShadow(self, *args, **kwargs):
        """
        """
        ...

    def frameShape(self, *args, **kwargs):
        """
        """
        ...

    def frameStyle(self, *args, **kwargs):
        """
        """
        ...

    def frameWidth(self, *args, **kwargs):
        """
        """
        ...

    def lineWidth(self, *args, **kwargs):
        """
        """
        ...

    def midLineWidth(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setFrameRect(self, *args, **kwargs):
        """
        """
        ...

    def setFrameShadow(self, *args, **kwargs):
        """
        """
        ...

    def setFrameShape(self, *args, **kwargs):
        """
        """
        ...

    def setFrameStyle(self, *args, **kwargs):
        """
        """
        ...

    def setLineWidth(self, *args, **kwargs):
        """
        """
        ...

    def setMidLineWidth(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGesture(PySide.QtCore.QObject):
    CancelAllInContext: ...
    """
    """

    CancelNone: ... = PySide.QtGui.QGesture.GestureCancelPolicy.CancelNone
    """
    """

    GestureCancelPolicy: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def gestureCancelPolicy(self, *args, **kwargs):
        """
        """
        ...

    def gestureType(self, *args, **kwargs):
        """
        """
        ...

    def hasHotSpot(self, *args, **kwargs):
        """
        """
        ...

    def hotSpot(self, *args, **kwargs):
        """
        """
        ...

    def setGestureCancelPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setHotSpot(self, *args, **kwargs):
        """
        """
        ...

    def state(self, *args, **kwargs):
        """
        """
        ...

    def unsetHotSpot(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGestureEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def accept(self, *args, **kwargs):
        """
        """
        ...

    def activeGestures(self, *args, **kwargs):
        """
        """
        ...

    def canceledGestures(self, *args, **kwargs):
        """
        """
        ...

    def gesture(self, *args, **kwargs):
        """
        """
        ...

    def gestures(self, *args, **kwargs):
        """
        """
        ...

    def ignore(self, *args, **kwargs):
        """
        """
        ...

    def isAccepted(self, *args, **kwargs):
        """
        """
        ...

    def mapToGraphicsScene(self, *args, **kwargs):
        """
        """
        ...

    def setAccepted(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGestureRecognizer(Shiboken.Object):
    CancelGesture: ...
    """
    """

    ConsumeEventHint: ...
    """
    """

    FinishGesture: ...
    """
    """

    Ignore: ... = PySide.QtGui.QGestureRecognizer.ResultFlag.Ignore
    """
    """

    MayBeGesture: ... = PySide.QtGui.QGestureRecognizer.ResultFlag.MayBeGesture
    """
    """

    Result: ...
    """
    """

    ResultFlag: ...
    """
    """

    ResultHint_Mask: ...
    """
    """

    ResultState_Mask: ...
    """
    """

    TriggerGesture: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def registerRecognizer(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def unregisterRecognizer(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def create(self, *args, **kwargs):
        """
        """
        ...

    def recognize(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGradient(Shiboken.Object):
    ColorInterpolation: ...
    """
    """

    ComponentInterpolation: ...
    """
    """

    ConicalGradient: ... = PySide.QtGui.QGradient.Type.ConicalGradient
    """
    """

    CoordinateMode: ...
    """
    """

    InterpolationMode: ...
    """
    """

    LinearGradient: ... = PySide.QtGui.QGradient.Type.LinearGradient
    """
    """

    LogicalMode: ... = PySide.QtGui.QGradient.CoordinateMode.LogicalMode
    """
    """

    NoGradient: ... = PySide.QtGui.QGradient.Type.NoGradient
    """
    """

    ObjectBoundingMode: ...
    """
    """

    PadSpread: ... = PySide.QtGui.QGradient.Spread.PadSpread
    """
    """

    RadialGradient: ... = PySide.QtGui.QGradient.Type.RadialGradient
    """
    """

    ReflectSpread: ... = PySide.QtGui.QGradient.Spread.ReflectSpread
    """
    """

    RepeatSpread: ... = PySide.QtGui.QGradient.Spread.RepeatSpread
    """
    """

    Spread: ...
    """
    """

    StretchToDeviceMode: ...
    """
    """

    Type: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def coordinateMode(self, *args, **kwargs):
        """
        """
        ...

    def interpolationMode(self, *args, **kwargs):
        """
        """
        ...

    def setColorAt(self, *args, **kwargs):
        """
        """
        ...

    def setCoordinateMode(self, *args, **kwargs):
        """
        """
        ...

    def setInterpolationMode(self, *args, **kwargs):
        """
        """
        ...

    def setSpread(self, *args, **kwargs):
        """
        """
        ...

    def setStops(self, *args, **kwargs):
        """
        """
        ...

    def spread(self, *args, **kwargs):
        """
        """
        ...

    def stops(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsAnchor(PySide.QtCore.QObject):
    staticMetaObject: ...
    """
    """

    def setSizePolicy(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def sizePolicy(self, *args, **kwargs):
        """
        """
        ...

    def spacing(self, *args, **kwargs):
        """
        """
        ...

    def unsetSpacing(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsAnchorLayout(QGraphicsLayout):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addAnchor(self, *args, **kwargs):
        """
        """
        ...

    def addAnchors(self, *args, **kwargs):
        """
        """
        ...

    def addCornerAnchors(self, *args, **kwargs):
        """
        """
        ...

    def anchor(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def horizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def removeAt(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def verticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsBlurEffect(QGraphicsEffect):
    AnimationHint: ...
    """
    """

    BlurHint: ...
    """
    """

    BlurHints: ...
    """
    """

    PerformanceHint: ...
    """
    """

    QualityHint: ... = PySide.QtGui.QGraphicsBlurEffect.BlurHint.QualityHint
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    blurHintsChanged: ...
    """
    Signal
    """

    blurRadiusChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def blurHints(self, *args, **kwargs):
        """
        """
        ...

    def blurRadius(self, *args, **kwargs):
        """
        """
        ...

    def boundingRectFor(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def setBlurHints(self, *args, **kwargs):
        """
        """
        ...

    def setBlurRadius(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsColorizeEffect(QGraphicsEffect):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    colorChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    strengthChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def color(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def setColor(self, *args, **kwargs):
        """
        """
        ...

    def setStrength(self, *args, **kwargs):
        """
        """
        ...

    def strength(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsDropShadowEffect(QGraphicsEffect):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    blurRadiusChanged: ...
    """
    Signal
    """

    colorChanged: ...
    """
    Signal
    """

    offsetChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def blurRadius(self, *args, **kwargs):
        """
        """
        ...

    def boundingRectFor(self, *args, **kwargs):
        """
        """
        ...

    def color(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def offset(self, *args, **kwargs):
        """
        """
        ...

    def setBlurRadius(self, *args, **kwargs):
        """
        """
        ...

    def setColor(self, *args, **kwargs):
        """
        """
        ...

    def setOffset(self, *args, **kwargs):
        """
        """
        ...

    def setXOffset(self, *args, **kwargs):
        """
        """
        ...

    def setYOffset(self, *args, **kwargs):
        """
        """
        ...

    def xOffset(self, *args, **kwargs):
        """
        """
        ...

    def yOffset(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsEffect(PySide.QtCore.QObject):
    ChangeFlag: ...
    """
    """

    ChangeFlags: ...
    """
    """

    NoPad: ... = PySide.QtGui.QGraphicsEffect.PixmapPadMode.NoPad
    """
    """

    PadToEffectiveBoundingRect: ...
    """
    """

    PadToTransparentBorder: ...
    """
    """

    PixmapPadMode: ...
    """
    """

    SourceAttached: ...
    """
    """

    SourceBoundingRectChanged: ...
    """
    """

    SourceDetached: ...
    """
    """

    SourceInvalidated: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    enabledChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def boundingRectFor(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def drawSource(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def sourceBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def sourceChanged(self, *args, **kwargs):
        """
        """
        ...

    def sourceIsPixmap(self, *args, **kwargs):
        """
        """
        ...

    def sourcePixmap(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    def updateBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsEllipseItem(QAbstractGraphicsShapeItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def setRect(self, *args, **kwargs):
        """
        """
        ...

    def setSpanAngle(self, *args, **kwargs):
        """
        """
        ...

    def setStartAngle(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def spanAngle(self, *args, **kwargs):
        """
        """
        ...

    def startAngle(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsGridLayout(QGraphicsLayout):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def columnAlignment(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def columnMaximumWidth(self, *args, **kwargs):
        """
        """
        ...

    def columnMinimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def columnPreferredWidth(self, *args, **kwargs):
        """
        """
        ...

    def columnSpacing(self, *args, **kwargs):
        """
        """
        ...

    def columnStretchFactor(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def horizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def removeAt(self, *args, **kwargs):
        """
        """
        ...

    def removeItem(self, *args, **kwargs):
        """
        """
        ...

    def rowAlignment(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def rowMaximumHeight(self, *args, **kwargs):
        """
        """
        ...

    def rowMinimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def rowPreferredHeight(self, *args, **kwargs):
        """
        """
        ...

    def rowSpacing(self, *args, **kwargs):
        """
        """
        ...

    def rowStretchFactor(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setColumnAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setColumnFixedWidth(self, *args, **kwargs):
        """
        """
        ...

    def setColumnMaximumWidth(self, *args, **kwargs):
        """
        """
        ...

    def setColumnMinimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def setColumnPreferredWidth(self, *args, **kwargs):
        """
        """
        ...

    def setColumnSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setColumnStretchFactor(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setRowAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setRowFixedHeight(self, *args, **kwargs):
        """
        """
        ...

    def setRowMaximumHeight(self, *args, **kwargs):
        """
        """
        ...

    def setRowMinimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def setRowPreferredHeight(self, *args, **kwargs):
        """
        """
        ...

    def setRowSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setRowStretchFactor(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def verticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsItem(Shiboken.Object):
    CacheMode: ...
    """
    """

    DeviceCoordinateCache: ...
    """
    """

    Extension: ...
    """
    """

    GraphicsItemChange: ...
    """
    """

    GraphicsItemFlag: ...
    """
    """

    GraphicsItemFlags: ...
    """
    """

    ItemAcceptsInputMethod: ...
    """
    """

    ItemChildAddedChange: ...
    """
    """

    ItemChildRemovedChange: ...
    """
    """

    ItemClipsChildrenToShape: ...
    """
    """

    ItemClipsToShape: ...
    """
    """

    ItemCoordinateCache: ...
    """
    """

    ItemCursorChange: ...
    """
    """

    ItemCursorHasChanged: ...
    """
    """

    ItemDoesntPropagateOpacityToChildren: ...
    """
    """

    ItemEnabledChange: ...
    """
    """

    ItemEnabledHasChanged: ...
    """
    """

    ItemFlagsChange: ...
    """
    """

    ItemFlagsHaveChanged: ...
    """
    """

    ItemHasNoContents: ...
    """
    """

    ItemIgnoresParentOpacity: ...
    """
    """

    ItemIgnoresTransformations: ...
    """
    """

    ItemIsFocusScope: ...
    """
    """

    ItemIsFocusable: ...
    """
    """

    ItemIsMovable: ...
    """
    """

    ItemIsPanel: ... = PySide.QtGui.QGraphicsItem.GraphicsItemFlag.ItemIsPanel
    """
    """

    ItemIsSelectable: ...
    """
    """

    ItemMatrixChange: ...
    """
    """

    ItemNegativeZStacksBehindParent: ...
    """
    """

    ItemOpacityChange: ...
    """
    """

    ItemOpacityHasChanged: ...
    """
    """

    ItemParentChange: ...
    """
    """

    ItemParentHasChanged: ...
    """
    """

    ItemPositionChange: ...
    """
    """

    ItemPositionHasChanged: ...
    """
    """

    ItemRotationChange: ...
    """
    """

    ItemRotationHasChanged: ...
    """
    """

    ItemScaleChange: ...
    """
    """

    ItemScaleHasChanged: ...
    """
    """

    ItemSceneChange: ...
    """
    """

    ItemSceneHasChanged: ...
    """
    """

    ItemScenePositionHasChanged: ...
    """
    """

    ItemSelectedChange: ...
    """
    """

    ItemSelectedHasChanged: ...
    """
    """

    ItemSendsGeometryChanges: ...
    """
    """

    ItemSendsScenePositionChanges: ...
    """
    """

    ItemStacksBehindParent: ...
    """
    """

    ItemStopsClickFocusPropagation: ...
    """
    """

    ItemStopsFocusHandling: ...
    """
    """

    ItemToolTipChange: ...
    """
    """

    ItemToolTipHasChanged: ...
    """
    """

    ItemTransformChange: ...
    """
    """

    ItemTransformHasChanged: ...
    """
    """

    ItemTransformOriginPointChange: ...
    """
    """

    ItemTransformOriginPointHasChanged: ...
    """
    """

    ItemUsesExtendedStyleOption: ...
    """
    """

    ItemVisibleChange: ...
    """
    """

    ItemVisibleHasChanged: ...
    """
    """

    ItemZValueChange: ...
    """
    """

    ItemZValueHasChanged: ...
    """
    """

    NoCache: ... = PySide.QtGui.QGraphicsItem.CacheMode.NoCache
    """
    """

    NonModal: ... = PySide.QtGui.QGraphicsItem.PanelModality.NonModal
    """
    """

    PanelModal: ... = PySide.QtGui.QGraphicsItem.PanelModality.PanelModal
    """
    """

    PanelModality: ...
    """
    """

    SceneModal: ... = PySide.QtGui.QGraphicsItem.PanelModality.SceneModal
    """
    """

    UserExtension: ... = PySide.QtGui.QGraphicsItem.Extension.UserExtension
    """
    """

    UserType: ... = 65536
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def acceptDrops(self, *args, **kwargs):
        """
        """
        ...

    def acceptHoverEvents(self, *args, **kwargs):
        """
        """
        ...

    def acceptTouchEvents(self, *args, **kwargs):
        """
        """
        ...

    def acceptedMouseButtons(self, *args, **kwargs):
        """
        """
        ...

    def acceptsHoverEvents(self, *args, **kwargs):
        """
        """
        ...

    def addToIndex(self, *args, **kwargs):
        """
        """
        ...

    def advance(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def boundingRegion(self, *args, **kwargs):
        """
        """
        ...

    def boundingRegionGranularity(self, *args, **kwargs):
        """
        """
        ...

    def cacheMode(self, *args, **kwargs):
        """
        """
        ...

    def childItems(self, *args, **kwargs):
        """
        """
        ...

    def childrenBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def clearFocus(self, *args, **kwargs):
        """
        """
        ...

    def clipPath(self, *args, **kwargs):
        """
        """
        ...

    def collidesWithItem(self, *args, **kwargs):
        """
        """
        ...

    def collidesWithPath(self, *args, **kwargs):
        """
        """
        ...

    def collidingItems(self, *args, **kwargs):
        """
        """
        ...

    def commonAncestorItem(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def cursor(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def deviceTransform(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def effectiveOpacity(self, *args, **kwargs):
        """
        """
        ...

    def ensureVisible(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def filtersChildEvents(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusItem(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusProxy(self, *args, **kwargs):
        """
        """
        ...

    def focusScopeItem(self, *args, **kwargs):
        """
        """
        ...

    def grabKeyboard(self, *args, **kwargs):
        """
        """
        ...

    def grabMouse(self, *args, **kwargs):
        """
        """
        ...

    def graphicsEffect(self, *args, **kwargs):
        """
        """
        ...

    def group(self, *args, **kwargs):
        """
        """
        ...

    def handlesChildEvents(self, *args, **kwargs):
        """
        """
        ...

    def hasCursor(self, *args, **kwargs):
        """
        """
        ...

    def hasFocus(self, *args, **kwargs):
        """
        """
        ...

    def hide(self, *args, **kwargs):
        """
        """
        ...

    def hoverEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodHints(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def installSceneEventFilter(self, *args, **kwargs):
        """
        """
        ...

    def isActive(self, *args, **kwargs):
        """
        """
        ...

    def isAncestorOf(self, *args, **kwargs):
        """
        """
        ...

    def isBlockedByModalPanel(self, *args, **kwargs):
        """
        """
        ...

    def isClipped(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isObscured(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def isPanel(self, *args, **kwargs):
        """
        """
        ...

    def isSelected(self, *args, **kwargs):
        """
        """
        ...

    def isUnderMouse(self, *args, **kwargs):
        """
        """
        ...

    def isVisible(self, *args, **kwargs):
        """
        """
        ...

    def isVisibleTo(self, *args, **kwargs):
        """
        """
        ...

    def isWidget(self, *args, **kwargs):
        """
        """
        ...

    def isWindow(self, *args, **kwargs):
        """
        """
        ...

    def itemChange(self, *args, **kwargs):
        """
        """
        ...

    def itemTransform(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def mapFromItem(self, *args, **kwargs):
        """
        """
        ...

    def mapFromParent(self, *args, **kwargs):
        """
        """
        ...

    def mapFromScene(self, *args, **kwargs):
        """
        """
        ...

    def mapRectFromItem(self, *args, **kwargs):
        """
        """
        ...

    def mapRectFromParent(self, *args, **kwargs):
        """
        """
        ...

    def mapRectFromScene(self, *args, **kwargs):
        """
        """
        ...

    def mapRectToItem(self, *args, **kwargs):
        """
        """
        ...

    def mapRectToParent(self, *args, **kwargs):
        """
        """
        ...

    def mapRectToScene(self, *args, **kwargs):
        """
        """
        ...

    def mapToItem(self, *args, **kwargs):
        """
        """
        ...

    def mapToParent(self, *args, **kwargs):
        """
        """
        ...

    def mapToScene(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveBy(self, *args, **kwargs):
        """
        """
        ...

    def opacity(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def panel(self, *args, **kwargs):
        """
        """
        ...

    def panelModality(self, *args, **kwargs):
        """
        """
        ...

    def parentItem(self, *args, **kwargs):
        """
        """
        ...

    def parentObject(self, *args, **kwargs):
        """
        """
        ...

    def parentWidget(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def prepareGeometryChange(self, *args, **kwargs):
        """
        """
        ...

    def removeFromIndex(self, *args, **kwargs):
        """
        """
        ...

    def removeSceneEventFilter(self, *args, **kwargs):
        """
        """
        ...

    def resetTransform(self, *args, **kwargs):
        """
        """
        ...

    def rotate(self, *args, **kwargs):
        """
        """
        ...

    def rotation(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def scene(self, *args, **kwargs):
        """
        """
        ...

    def sceneBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def sceneEvent(self, *args, **kwargs):
        """
        """
        ...

    def sceneEventFilter(self, *args, **kwargs):
        """
        """
        ...

    def scenePos(self, *args, **kwargs):
        """
        """
        ...

    def sceneTransform(self, *args, **kwargs):
        """
        """
        ...

    def scroll(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptDrops(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptHoverEvents(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptTouchEvents(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptedMouseButtons(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptsHoverEvents(self, *args, **kwargs):
        """
        """
        ...

    def setActive(self, *args, **kwargs):
        """
        """
        ...

    def setBoundingRegionGranularity(self, *args, **kwargs):
        """
        """
        ...

    def setCacheMode(self, *args, **kwargs):
        """
        """
        ...

    def setCursor(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setFiltersChildEvents(self, *args, **kwargs):
        """
        """
        ...

    def setFlag(self, *args, **kwargs):
        """
        """
        ...

    def setFlags(self, *args, **kwargs):
        """
        """
        ...

    def setFocus(self, *args, **kwargs):
        """
        """
        ...

    def setFocusProxy(self, *args, **kwargs):
        """
        """
        ...

    def setGraphicsEffect(self, *args, **kwargs):
        """
        """
        ...

    def setGroup(self, *args, **kwargs):
        """
        """
        ...

    def setHandlesChildEvents(self, *args, **kwargs):
        """
        """
        ...

    def setInputMethodHints(self, *args, **kwargs):
        """
        """
        ...

    def setOpacity(self, *args, **kwargs):
        """
        """
        ...

    def setPanelModality(self, *args, **kwargs):
        """
        """
        ...

    def setParentItem(self, *args, **kwargs):
        """
        """
        ...

    def setPos(self, *args, **kwargs):
        """
        """
        ...

    def setRotation(self, *args, **kwargs):
        """
        """
        ...

    def setScale(self, *args, **kwargs):
        """
        """
        ...

    def setSelected(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setTransform(self, *args, **kwargs):
        """
        """
        ...

    def setTransformOriginPoint(self, *args, **kwargs):
        """
        """
        ...

    def setTransformations(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def setZValue(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def shear(self, *args, **kwargs):
        """
        """
        ...

    def show(self, *args, **kwargs):
        """
        """
        ...

    def stackBefore(self, *args, **kwargs):
        """
        """
        ...

    def toGraphicsObject(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def topLevelItem(self, *args, **kwargs):
        """
        """
        ...

    def topLevelWidget(self, *args, **kwargs):
        """
        """
        ...

    def transform(self, *args, **kwargs):
        """
        """
        ...

    def transformOriginPoint(self, *args, **kwargs):
        """
        """
        ...

    def transformations(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def ungrabKeyboard(self, *args, **kwargs):
        """
        """
        ...

    def ungrabMouse(self, *args, **kwargs):
        """
        """
        ...

    def unsetCursor(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    def updateMicroFocus(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def window(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    def zValue(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsItemAnimation(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def afterAnimationStep(self, *args, **kwargs):
        """
        """
        ...

    def beforeAnimationStep(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScaleAt(self, *args, **kwargs):
        """
        """
        ...

    def horizontalShearAt(self, *args, **kwargs):
        """
        """
        ...

    def item(self, *args, **kwargs):
        """
        """
        ...

    def matrixAt(self, *args, **kwargs):
        """
        """
        ...

    def posAt(self, *args, **kwargs):
        """
        """
        ...

    def posList(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def rotationAt(self, *args, **kwargs):
        """
        """
        ...

    def rotationList(self, *args, **kwargs):
        """
        """
        ...

    def scaleList(self, *args, **kwargs):
        """
        """
        ...

    def setItem(self, *args, **kwargs):
        """
        """
        ...

    def setPosAt(self, *args, **kwargs):
        """
        """
        ...

    def setRotationAt(self, *args, **kwargs):
        """
        """
        ...

    def setScaleAt(self, *args, **kwargs):
        """
        """
        ...

    def setShearAt(self, *args, **kwargs):
        """
        """
        ...

    def setStep(self, *args, **kwargs):
        """
        """
        ...

    def setTimeLine(self, *args, **kwargs):
        """
        """
        ...

    def setTranslationAt(self, *args, **kwargs):
        """
        """
        ...

    def shearList(self, *args, **kwargs):
        """
        """
        ...

    def timeLine(self, *args, **kwargs):
        """
        """
        ...

    def translationList(self, *args, **kwargs):
        """
        """
        ...

    def verticalScaleAt(self, *args, **kwargs):
        """
        """
        ...

    def verticalShearAt(self, *args, **kwargs):
        """
        """
        ...

    def xTranslationAt(self, *args, **kwargs):
        """
        """
        ...

    def yTranslationAt(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsItemGroup(QGraphicsItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addToGroup(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def removeFromGroup(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsLayout(QGraphicsLayoutItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def instantInvalidatePropagation(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setInstantInvalidatePropagation(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def activate(self, *args, **kwargs):
        """
        """
        ...

    def addChildLayoutItem(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def getContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def isActivated(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def removeAt(self, *args, **kwargs):
        """
        """
        ...

    def setContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometry(self, *args, **kwargs):
        """
        """
        ...

    def widgetEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsLayoutItem(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def contentsRect(self, *args, **kwargs):
        """
        """
        ...

    def effectiveSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def geometry(self, *args, **kwargs):
        """
        """
        ...

    def getContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def graphicsItem(self, *args, **kwargs):
        """
        """
        ...

    def isLayout(self, *args, **kwargs):
        """
        """
        ...

    def maximumHeight(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def maximumWidth(self, *args, **kwargs):
        """
        """
        ...

    def minimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def ownedByLayout(self, *args, **kwargs):
        """
        """
        ...

    def parentLayoutItem(self, *args, **kwargs):
        """
        """
        ...

    def preferredHeight(self, *args, **kwargs):
        """
        """
        ...

    def preferredSize(self, *args, **kwargs):
        """
        """
        ...

    def preferredWidth(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setGraphicsItem(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumHeight(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumSize(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumWidth(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumSize(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def setOwnedByLayout(self, *args, **kwargs):
        """
        """
        ...

    def setParentLayoutItem(self, *args, **kwargs):
        """
        """
        ...

    def setPreferredHeight(self, *args, **kwargs):
        """
        """
        ...

    def setPreferredSize(self, *args, **kwargs):
        """
        """
        ...

    def setPreferredWidth(self, *args, **kwargs):
        """
        """
        ...

    def setSizePolicy(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sizePolicy(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometry(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsLineItem(QGraphicsItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def line(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def pen(self, *args, **kwargs):
        """
        """
        ...

    def setLine(self, *args, **kwargs):
        """
        """
        ...

    def setPen(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsLinearLayout(QGraphicsLayout):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addStretch(self, *args, **kwargs):
        """
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def dump(self, *args, **kwargs):
        """
        """
        ...

    def insertItem(self, *args, **kwargs):
        """
        """
        ...

    def insertStretch(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def itemSpacing(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def removeAt(self, *args, **kwargs):
        """
        """
        ...

    def removeItem(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setItemSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setStretchFactor(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def spacing(self, *args, **kwargs):
        """
        """
        ...

    def stretchFactor(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsObject(PySide.QtCore.QObject, QGraphicsItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    childrenChanged: ...
    """
    Signal
    """

    enabledChanged: ...
    """
    Signal
    """

    heightChanged: ...
    """
    Signal
    """

    opacityChanged: ...
    """
    Signal
    """

    parentChanged: ...
    """
    Signal
    """

    rotationChanged: ...
    """
    Signal
    """

    scaleChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    visibleChanged: ...
    """
    Signal
    """

    widthChanged: ...
    """
    Signal
    """

    xChanged: ...
    """
    Signal
    """

    yChanged: ...
    """
    Signal
    """

    zChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def grabGesture(self, *args, **kwargs):
        """
        """
        ...

    def ungrabGesture(self, *args, **kwargs):
        """
        """
        ...

    def updateMicroFocus(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsOpacityEffect(QGraphicsEffect):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    opacityChanged: ...
    """
    Signal
    """

    opacityMaskChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def opacity(self, *args, **kwargs):
        """
        """
        ...

    def opacityMask(self, *args, **kwargs):
        """
        """
        ...

    def setOpacity(self, *args, **kwargs):
        """
        """
        ...

    def setOpacityMask(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsPathItem(QAbstractGraphicsShapeItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def path(self, *args, **kwargs):
        """
        """
        ...

    def setPath(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsPixmapItem(QGraphicsItem):
    BoundingRectShape: ...
    """
    """

    HeuristicMaskShape: ...
    """
    """

    MaskShape: ... = PySide.QtGui.QGraphicsPixmapItem.ShapeMode.MaskShape
    """
    """

    ShapeMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def offset(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def setOffset(self, *args, **kwargs):
        """
        """
        ...

    def setPixmap(self, *args, **kwargs):
        """
        """
        ...

    def setShapeMode(self, *args, **kwargs):
        """
        """
        ...

    def setTransformationMode(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def shapeMode(self, *args, **kwargs):
        """
        """
        ...

    def transformationMode(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsPolygonItem(QAbstractGraphicsShapeItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def fillRule(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def polygon(self, *args, **kwargs):
        """
        """
        ...

    def setFillRule(self, *args, **kwargs):
        """
        """
        ...

    def setPolygon(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsProxyWidget(QGraphicsWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def createProxyForChildWidget(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def grabMouseEvent(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def itemChange(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def newProxyWidget(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def subWidgetRect(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def ungrabMouseEvent(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsRectItem(QAbstractGraphicsShapeItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def setRect(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsRotation(QGraphicsTransform):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    angleChanged: ...
    """
    Signal
    """

    axisChanged: ...
    """
    Signal
    """

    originChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def angle(self, *args, **kwargs):
        """
        """
        ...

    def applyTo(self, *args, **kwargs):
        """
        """
        ...

    def axis(self, *args, **kwargs):
        """
        """
        ...

    def origin(self, *args, **kwargs):
        """
        """
        ...

    def setAngle(self, *args, **kwargs):
        """
        """
        ...

    def setAxis(self, *args, **kwargs):
        """
        """
        ...

    def setOrigin(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsScale(QGraphicsTransform):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    originChanged: ...
    """
    Signal
    """

    scaleChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    xScaleChanged: ...
    """
    Signal
    """

    yScaleChanged: ...
    """
    Signal
    """

    zScaleChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def applyTo(self, *args, **kwargs):
        """
        """
        ...

    def origin(self, *args, **kwargs):
        """
        """
        ...

    def setOrigin(self, *args, **kwargs):
        """
        """
        ...

    def setXScale(self, *args, **kwargs):
        """
        """
        ...

    def setYScale(self, *args, **kwargs):
        """
        """
        ...

    def setZScale(self, *args, **kwargs):
        """
        """
        ...

    def xScale(self, *args, **kwargs):
        """
        """
        ...

    def yScale(self, *args, **kwargs):
        """
        """
        ...

    def zScale(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsScene(PySide.QtCore.QObject):
    AllLayers: ... = PySide.QtGui.QGraphicsScene.SceneLayer.AllLayers
    """
    """

    BackgroundLayer: ...
    """
    """

    BspTreeIndex: ...
    """
    """

    ForegroundLayer: ...
    """
    """

    ItemIndexMethod: ...
    """
    """

    ItemLayer: ... = PySide.QtGui.QGraphicsScene.SceneLayer.ItemLayer
    """
    """

    NoIndex: ... = PySide.QtGui.QGraphicsScene.ItemIndexMethod.NoIndex
    """
    """

    SceneLayer: ...
    """
    """

    SceneLayers: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    changed: ...
    """
    Signal
    """

    sceneRectChanged: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def activePanel(self, *args, **kwargs):
        """
        """
        ...

    def activeWindow(self, *args, **kwargs):
        """
        """
        ...

    def addEllipse(self, *args, **kwargs):
        """
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addLine(self, *args, **kwargs):
        """
        """
        ...

    def addPath(self, *args, **kwargs):
        """
        """
        ...

    def addPixmap(self, *args, **kwargs):
        """
        """
        ...

    def addPolygon(self, *args, **kwargs):
        """
        """
        ...

    def addRect(self, *args, **kwargs):
        """
        """
        ...

    def addSimpleText(self, *args, **kwargs):
        """
        """
        ...

    def addText(self, *args, **kwargs):
        """
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def advance(self, *args, **kwargs):
        """
        """
        ...

    def backgroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def bspTreeDepth(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def clearFocus(self, *args, **kwargs):
        """
        """
        ...

    def clearSelection(self, *args, **kwargs):
        """
        """
        ...

    def collidingItems(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def createItemGroup(self, *args, **kwargs):
        """
        """
        ...

    def destroyItemGroup(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def drawBackground(self, *args, **kwargs):
        """
        """
        ...

    def drawForeground(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusItem(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def foregroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def hasFocus(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def helpEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def isActive(self, *args, **kwargs):
        """
        """
        ...

    def isSortCacheEnabled(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def itemIndexMethod(self, *args, **kwargs):
        """
        """
        ...

    def items(self, *args, **kwargs):
        """
        """
        ...

    def itemsBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseGrabberItem(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def palette(self, *args, **kwargs):
        """
        """
        ...

    def removeItem(self, *args, **kwargs):
        """
        """
        ...

    def render(self, *args, **kwargs):
        """
        """
        ...

    def sceneRect(self, *args, **kwargs):
        """
        """
        ...

    def selectedItems(self, *args, **kwargs):
        """
        """
        ...

    def selectionArea(self, *args, **kwargs):
        """
        """
        ...

    def sendEvent(self, *args, **kwargs):
        """
        """
        ...

    def setActivePanel(self, *args, **kwargs):
        """
        """
        ...

    def setActiveWindow(self, *args, **kwargs):
        """
        """
        ...

    def setBackgroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def setBspTreeDepth(self, *args, **kwargs):
        """
        """
        ...

    def setFocus(self, *args, **kwargs):
        """
        """
        ...

    def setFocusItem(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setForegroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def setItemIndexMethod(self, *args, **kwargs):
        """
        """
        ...

    def setPalette(self, *args, **kwargs):
        """
        """
        ...

    def setSceneRect(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionArea(self, *args, **kwargs):
        """
        """
        ...

    def setSortCacheEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setStickyFocus(self, *args, **kwargs):
        """
        """
        ...

    def setStyle(self, *args, **kwargs):
        """
        """
        ...

    def stickyFocus(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    def views(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneContextMenuEvent(QGraphicsSceneEvent):
    Keyboard: ... = PySide.QtGui.QGraphicsSceneContextMenuEvent.Reason.Keyboard
    """
    """

    Mouse: ... = PySide.QtGui.QGraphicsSceneContextMenuEvent.Reason.Mouse
    """
    """

    Other: ... = PySide.QtGui.QGraphicsSceneContextMenuEvent.Reason.Other
    """
    """

    Reason: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def modifiers(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def reason(self, *args, **kwargs):
        """
        """
        ...

    def scenePos(self, *args, **kwargs):
        """
        """
        ...

    def screenPos(self, *args, **kwargs):
        """
        """
        ...

    def setModifiers(self, *args, **kwargs):
        """
        """
        ...

    def setPos(self, *args, **kwargs):
        """
        """
        ...

    def setReason(self, *args, **kwargs):
        """
        """
        ...

    def setScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setScreenPos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneDragDropEvent(QGraphicsSceneEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def acceptProposedAction(self, *args, **kwargs):
        """
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def dropAction(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def modifiers(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def possibleActions(self, *args, **kwargs):
        """
        """
        ...

    def proposedAction(self, *args, **kwargs):
        """
        """
        ...

    def scenePos(self, *args, **kwargs):
        """
        """
        ...

    def screenPos(self, *args, **kwargs):
        """
        """
        ...

    def setButtons(self, *args, **kwargs):
        """
        """
        ...

    def setDropAction(self, *args, **kwargs):
        """
        """
        ...

    def setModifiers(self, *args, **kwargs):
        """
        """
        ...

    def setPos(self, *args, **kwargs):
        """
        """
        ...

    def setPossibleActions(self, *args, **kwargs):
        """
        """
        ...

    def setProposedAction(self, *args, **kwargs):
        """
        """
        ...

    def setScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setScreenPos(self, *args, **kwargs):
        """
        """
        ...

    def source(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneHelpEvent(QGraphicsSceneEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def scenePos(self, *args, **kwargs):
        """
        """
        ...

    def screenPos(self, *args, **kwargs):
        """
        """
        ...

    def setScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setScreenPos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneHoverEvent(QGraphicsSceneEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def lastPos(self, *args, **kwargs):
        """
        """
        ...

    def lastScenePos(self, *args, **kwargs):
        """
        """
        ...

    def lastScreenPos(self, *args, **kwargs):
        """
        """
        ...

    def modifiers(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def scenePos(self, *args, **kwargs):
        """
        """
        ...

    def screenPos(self, *args, **kwargs):
        """
        """
        ...

    def setLastPos(self, *args, **kwargs):
        """
        """
        ...

    def setLastScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setLastScreenPos(self, *args, **kwargs):
        """
        """
        ...

    def setModifiers(self, *args, **kwargs):
        """
        """
        ...

    def setPos(self, *args, **kwargs):
        """
        """
        ...

    def setScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setScreenPos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneMouseEvent(QGraphicsSceneEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def buttonDownPos(self, *args, **kwargs):
        """
        """
        ...

    def buttonDownScenePos(self, *args, **kwargs):
        """
        """
        ...

    def buttonDownScreenPos(self, *args, **kwargs):
        """
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def lastPos(self, *args, **kwargs):
        """
        """
        ...

    def lastScenePos(self, *args, **kwargs):
        """
        """
        ...

    def lastScreenPos(self, *args, **kwargs):
        """
        """
        ...

    def modifiers(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def scenePos(self, *args, **kwargs):
        """
        """
        ...

    def screenPos(self, *args, **kwargs):
        """
        """
        ...

    def setButton(self, *args, **kwargs):
        """
        """
        ...

    def setButtonDownPos(self, *args, **kwargs):
        """
        """
        ...

    def setButtonDownScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setButtonDownScreenPos(self, *args, **kwargs):
        """
        """
        ...

    def setButtons(self, *args, **kwargs):
        """
        """
        ...

    def setLastPos(self, *args, **kwargs):
        """
        """
        ...

    def setLastScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setLastScreenPos(self, *args, **kwargs):
        """
        """
        ...

    def setModifiers(self, *args, **kwargs):
        """
        """
        ...

    def setPos(self, *args, **kwargs):
        """
        """
        ...

    def setScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setScreenPos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneMoveEvent(QGraphicsSceneEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def newPos(self, *args, **kwargs):
        """
        """
        ...

    def oldPos(self, *args, **kwargs):
        """
        """
        ...

    def setNewPos(self, *args, **kwargs):
        """
        """
        ...

    def setOldPos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneResizeEvent(QGraphicsSceneEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def newSize(self, *args, **kwargs):
        """
        """
        ...

    def oldSize(self, *args, **kwargs):
        """
        """
        ...

    def setNewSize(self, *args, **kwargs):
        """
        """
        ...

    def setOldSize(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSceneWheelEvent(QGraphicsSceneEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def delta(self, *args, **kwargs):
        """
        """
        ...

    def modifiers(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def scenePos(self, *args, **kwargs):
        """
        """
        ...

    def screenPos(self, *args, **kwargs):
        """
        """
        ...

    def setButtons(self, *args, **kwargs):
        """
        """
        ...

    def setDelta(self, *args, **kwargs):
        """
        """
        ...

    def setModifiers(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setPos(self, *args, **kwargs):
        """
        """
        ...

    def setScenePos(self, *args, **kwargs):
        """
        """
        ...

    def setScreenPos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsSimpleTextItem(QAbstractGraphicsShapeItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsTextItem(QGraphicsObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    linkActivated: ...
    """
    Signal
    """

    linkHovered: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def adjustSize(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def defaultTextColor(self, *args, **kwargs):
        """
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def extension(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def hoverEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def isObscuredBy(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def opaqueArea(self, *args, **kwargs):
        """
        """
        ...

    def openExternalLinks(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def sceneEvent(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultTextColor(self, *args, **kwargs):
        """
        """
        ...

    def setDocument(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setHtml(self, *args, **kwargs):
        """
        """
        ...

    def setOpenExternalLinks(self, *args, **kwargs):
        """
        """
        ...

    def setPlainText(self, *args, **kwargs):
        """
        """
        ...

    def setTabChangesFocus(self, *args, **kwargs):
        """
        """
        ...

    def setTextCursor(self, *args, **kwargs):
        """
        """
        ...

    def setTextInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def setTextWidth(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def tabChangesFocus(self, *args, **kwargs):
        """
        """
        ...

    def textCursor(self, *args, **kwargs):
        """
        """
        ...

    def textInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def textWidth(self, *args, **kwargs):
        """
        """
        ...

    def toHtml(self, *args, **kwargs):
        """
        """
        ...

    def toPlainText(self ) -> Str:
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsTransform(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def applyTo(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsView(QAbstractScrollArea):
    AnchorUnderMouse: ...
    """
    """

    AnchorViewCenter: ...
    """
    """

    BoundingRectViewportUpdate: ...
    """
    """

    CacheBackground: ...
    """
    """

    CacheMode: ...
    """
    """

    CacheModeFlag: ...
    """
    """

    CacheNone: ... = PySide.QtGui.QGraphicsView.CacheModeFlag.CacheNone
    """
    """

    DontAdjustForAntialiasing: ...
    """
    """

    DontClipPainter: ...
    """
    """

    DontSavePainterState: ...
    """
    """

    DragMode: ...
    """
    """

    FullViewportUpdate: ...
    """
    """

    IndirectPainting: ...
    """
    """

    MinimalViewportUpdate: ...
    """
    """

    NoAnchor: ... = PySide.QtGui.QGraphicsView.ViewportAnchor.NoAnchor
    """
    """

    NoDrag: ... = PySide.QtGui.QGraphicsView.DragMode.NoDrag
    """
    """

    NoViewportUpdate: ...
    """
    """

    OptimizationFlag: ...
    """
    """

    OptimizationFlags: ...
    """
    """

    RubberBandDrag: ... = PySide.QtGui.QGraphicsView.DragMode.RubberBandDrag
    """
    """

    ScrollHandDrag: ... = PySide.QtGui.QGraphicsView.DragMode.ScrollHandDrag
    """
    """

    SmartViewportUpdate: ...
    """
    """

    ViewportAnchor: ...
    """
    """

    ViewportUpdateMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def backgroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def cacheMode(self, *args, **kwargs):
        """
        """
        ...

    def centerOn(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMode(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def drawBackground(self, *args, **kwargs):
        """
        """
        ...

    def drawForeground(self, *args, **kwargs):
        """
        """
        ...

    def drawItems(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def ensureVisible(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def fitInView(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def foregroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def invalidateScene(self, *args, **kwargs):
        """
        """
        ...

    def isInteractive(self, *args, **kwargs):
        """
        """
        ...

    def isTransformed(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def items(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def mapFromScene(self, *args, **kwargs):
        """
        """
        ...

    def mapToScene(self, *args, **kwargs):
        """
        """
        ...

    def matrix(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def optimizationFlags(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def render(self, *args, **kwargs):
        """
        """
        ...

    def renderHints(self, *args, **kwargs):
        """
        """
        ...

    def resetCachedContent(self, *args, **kwargs):
        """
        """
        ...

    def resetMatrix(self, *args, **kwargs):
        """
        """
        ...

    def resetTransform(self, *args, **kwargs):
        """
        """
        ...

    def resizeAnchor(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def rotate(self, *args, **kwargs):
        """
        """
        ...

    def rubberBandSelectionMode(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def scene(self, *args, **kwargs):
        """
        """
        ...

    def sceneRect(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setBackgroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def setCacheMode(self, *args, **kwargs):
        """
        """
        ...

    def setDragMode(self, *args, **kwargs):
        """
        """
        ...

    def setForegroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def setInteractive(self, *args, **kwargs):
        """
        """
        ...

    def setMatrix(self, *args, **kwargs):
        """
        """
        ...

    def setOptimizationFlag(self, *args, **kwargs):
        """
        """
        ...

    def setOptimizationFlags(self, *args, **kwargs):
        """
        """
        ...

    def setRenderHint(self, *args, **kwargs):
        """
        """
        ...

    def setRenderHints(self, *args, **kwargs):
        """
        """
        ...

    def setResizeAnchor(self, *args, **kwargs):
        """
        """
        ...

    def setRubberBandSelectionMode(self, *args, **kwargs):
        """
        """
        ...

    def setScene(self, *args, **kwargs):
        """
        """
        ...

    def setSceneRect(self, *args, **kwargs):
        """
        """
        ...

    def setTransform(self, *args, **kwargs):
        """
        """
        ...

    def setTransformationAnchor(self, *args, **kwargs):
        """
        """
        ...

    def setViewportUpdateMode(self, *args, **kwargs):
        """
        """
        ...

    def setupViewport(self, *args, **kwargs):
        """
        """
        ...

    def shear(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def transform(self, *args, **kwargs):
        """
        """
        ...

    def transformationAnchor(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def updateScene(self, *args, **kwargs):
        """
        """
        ...

    def updateSceneRect(self, *args, **kwargs):
        """
        """
        ...

    def viewportEvent(self, *args, **kwargs):
        """
        """
        ...

    def viewportTransform(self, *args, **kwargs):
        """
        """
        ...

    def viewportUpdateMode(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGraphicsWidget(QGraphicsObject, QGraphicsLayoutItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    geometryChanged: ...
    """
    Signal
    """

    layoutChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def setTabOrder(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actions(self, *args, **kwargs):
        """
        """
        ...

    def addAction(self, *args, **kwargs):
        """
        """
        ...

    def addActions(self, *args, **kwargs):
        """
        """
        ...

    def adjustSize(self, *args, **kwargs):
        """
        """
        ...

    def autoFillBackground(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusPolicy(self, *args, **kwargs):
        """
        """
        ...

    def focusWidget(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def getContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def getWindowFrameMargins(self, *args, **kwargs):
        """
        """
        ...

    def grabKeyboardEvent(self, *args, **kwargs):
        """
        """
        ...

    def grabMouseEvent(self, *args, **kwargs):
        """
        """
        ...

    def grabShortcut(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def hoverMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def insertAction(self, *args, **kwargs):
        """
        """
        ...

    def insertActions(self, *args, **kwargs):
        """
        """
        ...

    def isActiveWindow(self, *args, **kwargs):
        """
        """
        ...

    def itemChange(self, *args, **kwargs):
        """
        """
        ...

    def layout(self, *args, **kwargs):
        """
        """
        ...

    def layoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def moveEvent(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def paintWindowFrame(self, *args, **kwargs):
        """
        """
        ...

    def palette(self, *args, **kwargs):
        """
        """
        ...

    def polishEvent(self, *args, **kwargs):
        """
        """
        ...

    def propertyChange(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def releaseShortcut(self, *args, **kwargs):
        """
        """
        ...

    def removeAction(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def sceneEvent(self, *args, **kwargs):
        """
        """
        ...

    def setAttribute(self, *args, **kwargs):
        """
        """
        ...

    def setAutoFillBackground(self, *args, **kwargs):
        """
        """
        ...

    def setContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def setFocusPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setLayout(self, *args, **kwargs):
        """
        """
        ...

    def setLayoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def setPalette(self, *args, **kwargs):
        """
        """
        ...

    def setShortcutAutoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def setShortcutEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setStyle(self, *args, **kwargs):
        """
        """
        ...

    def setWindowFlags(self, *args, **kwargs):
        """
        """
        ...

    def setWindowFrameMargins(self, *args, **kwargs):
        """
        """
        ...

    def setWindowTitle(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    def testAttribute(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def ungrabKeyboardEvent(self, *args, **kwargs):
        """
        """
        ...

    def ungrabMouseEvent(self, *args, **kwargs):
        """
        """
        ...

    def unsetLayoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def unsetWindowFrameMargins(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometry(self, *args, **kwargs):
        """
        """
        ...

    def windowFlags(self, *args, **kwargs):
        """
        """
        ...

    def windowFrameEvent(self, *args, **kwargs):
        """
        """
        ...

    def windowFrameGeometry(self, *args, **kwargs):
        """
        """
        ...

    def windowFrameRect(self, *args, **kwargs):
        """
        """
        ...

    def windowFrameSectionAt(self, *args, **kwargs):
        """
        """
        ...

    def windowTitle(self, *args, **kwargs):
        """
        """
        ...

    def windowType(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGridLayout(QLayout):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addLayout(self, *args, **kwargs):
        """
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def cellRect(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def columnMinimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def columnStretch(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def getItemPosition(self, *args, **kwargs):
        """
        """
        ...

    def hasHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def horizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def itemAtPosition(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def originCorner(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def rowMinimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def rowStretch(self, *args, **kwargs):
        """
        """
        ...

    def setColumnMinimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def setColumnStretch(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultPositioning(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setOriginCorner(self, *args, **kwargs):
        """
        """
        ...

    def setRowMinimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def setRowStretch(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def spacing(self, *args, **kwargs):
        """
        """
        ...

    def takeAt(self, *args, **kwargs):
        """
        """
        ...

    def verticalSpacing(self, *args, **kwargs):
        """
        """
        ...

    ...

class QGroupBox(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    clicked: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    toggled: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def isCheckable(self, *args, **kwargs):
        """
        """
        ...

    def isChecked(self, *args, **kwargs):
        """
        """
        ...

    def isFlat(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setCheckable(self, *args, **kwargs):
        """
        """
        ...

    def setChecked(self, *args, **kwargs):
        """
        """
        ...

    def setFlat(self, *args, **kwargs):
        """
        """
        ...

    def setTitle(self, *args, **kwargs):
        """
        """
        ...

    def title(self, *args, **kwargs):
        """
        """
        ...

    ...

class QHBoxLayout(QBoxLayout):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QHeaderView(QAbstractItemView):
    Custom: ... = PySide.QtGui.QHeaderView.ResizeMode.Custom
    """
    """

    Fixed: ... = PySide.QtGui.QHeaderView.ResizeMode.Fixed
    """
    """

    Interactive: ... = PySide.QtGui.QHeaderView.ResizeMode.Interactive
    """
    """

    ResizeMode: ...
    """
    """

    ResizeToContents: ...
    """
    """

    Stretch: ... = PySide.QtGui.QHeaderView.ResizeMode.Stretch
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    geometriesChanged: ...
    """
    Signal
    """

    sectionAutoResize: ...
    """
    Signal
    """

    sectionClicked: ...
    """
    Signal
    """

    sectionCountChanged: ...
    """
    Signal
    """

    sectionDoubleClicked: ...
    """
    Signal
    """

    sectionEntered: ...
    """
    Signal
    """

    sectionHandleDoubleClicked: ...
    """
    Signal
    """

    sectionMoved: ...
    """
    Signal
    """

    sectionPressed: ...
    """
    Signal
    """

    sectionResized: ...
    """
    Signal
    """

    sortIndicatorChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def cascadingSectionResizes(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentChanged(self, *args, **kwargs):
        """
        """
        ...

    def dataChanged(self, *args, **kwargs):
        """
        """
        ...

    def defaultAlignment(self, *args, **kwargs):
        """
        """
        ...

    def defaultSectionSize(self, *args, **kwargs):
        """
        """
        ...

    def doItemsLayout(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def headerDataChanged(self, *args, **kwargs):
        """
        """
        ...

    def hiddenSectionCount(self, *args, **kwargs):
        """
        """
        ...

    def hideSection(self, *args, **kwargs):
        """
        """
        ...

    def highlightSections(self, *args, **kwargs):
        """
        """
        ...

    def horizontalOffset(self, *args, **kwargs):
        """
        """
        ...

    def indexAt(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def initialize(self, *args, **kwargs):
        """
        """
        ...

    def initializeSections(self, *args, **kwargs):
        """
        """
        ...

    def isClickable(self, *args, **kwargs):
        """
        """
        ...

    def isIndexHidden(self, *args, **kwargs):
        """
        """
        ...

    def isMovable(self, *args, **kwargs):
        """
        """
        ...

    def isSectionHidden(self, *args, **kwargs):
        """
        """
        ...

    def isSortIndicatorShown(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def logicalIndex(self, *args, **kwargs):
        """
        """
        ...

    def logicalIndexAt(self, *args, **kwargs):
        """
        """
        ...

    def minimumSectionSize(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def moveSection(self, *args, **kwargs):
        """
        """
        ...

    def offset(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintSection(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def resizeMode(self, *args, **kwargs):
        """
        """
        ...

    def resizeSection(self, *args, **kwargs):
        """
        """
        ...

    def resizeSections(self, *args, **kwargs):
        """
        """
        ...

    def restoreState(self, *args, **kwargs):
        """
        """
        ...

    def rowsInserted(self, *args, **kwargs):
        """
        """
        ...

    def saveState(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def scrollTo(self, *args, **kwargs):
        """
        """
        ...

    def sectionPosition(self, *args, **kwargs):
        """
        """
        ...

    def sectionSize(self, *args, **kwargs):
        """
        """
        ...

    def sectionSizeFromContents(self, *args, **kwargs):
        """
        """
        ...

    def sectionSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sectionViewportPosition(self, *args, **kwargs):
        """
        """
        ...

    def sectionsAboutToBeRemoved(self, *args, **kwargs):
        """
        """
        ...

    def sectionsHidden(self, *args, **kwargs):
        """
        """
        ...

    def sectionsInserted(self, *args, **kwargs):
        """
        """
        ...

    def sectionsMoved(self, *args, **kwargs):
        """
        """
        ...

    def setCascadingSectionResizes(self, *args, **kwargs):
        """
        """
        ...

    def setClickable(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultSectionSize(self, *args, **kwargs):
        """
        """
        ...

    def setHighlightSections(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumSectionSize(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setMovable(self, *args, **kwargs):
        """
        """
        ...

    def setOffset(self, *args, **kwargs):
        """
        """
        ...

    def setOffsetToLastSection(self, *args, **kwargs):
        """
        """
        ...

    def setOffsetToSectionPosition(self, *args, **kwargs):
        """
        """
        ...

    def setResizeMode(self, *args, **kwargs):
        """
        """
        ...

    def setSectionHidden(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setSortIndicator(self, *args, **kwargs):
        """
        """
        ...

    def setSortIndicatorShown(self, *args, **kwargs):
        """
        """
        ...

    def setStretchLastSection(self, *args, **kwargs):
        """
        """
        ...

    def showSection(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sortIndicatorOrder(self, *args, **kwargs):
        """
        """
        ...

    def sortIndicatorSection(self, *args, **kwargs):
        """
        """
        ...

    def stretchLastSection(self, *args, **kwargs):
        """
        """
        ...

    def stretchSectionCount(self, *args, **kwargs):
        """
        """
        ...

    def swapSections(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometries(self, *args, **kwargs):
        """
        """
        ...

    def updateSection(self, *args, **kwargs):
        """
        """
        ...

    def verticalOffset(self, *args, **kwargs):
        """
        """
        ...

    def viewportEvent(self, *args, **kwargs):
        """
        """
        ...

    def visualIndex(self, *args, **kwargs):
        """
        """
        ...

    def visualIndexAt(self, *args, **kwargs):
        """
        """
        ...

    def visualRect(self, *args, **kwargs):
        """
        """
        ...

    def visualRegionForSelection(self, *args, **kwargs):
        """
        """
        ...

    ...

class QHelpEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def globalPos(self, *args, **kwargs):
        """
        """
        ...

    def globalX(self, *args, **kwargs):
        """
        """
        ...

    def globalY(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QHideEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QHoverEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def oldPos(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QIcon(Shiboken.Object):
    Active: ... = PySide.QtGui.QIcon.Mode.Active
    """
    """

    Disabled: ... = PySide.QtGui.QIcon.Mode.Disabled
    """
    """

    Mode: ...
    """
    """

    Normal: ... = PySide.QtGui.QIcon.Mode.Normal
    """
    """

    Off: ... = PySide.QtGui.QIcon.State.Off
    """
    """

    On: ... = PySide.QtGui.QIcon.State.On
    """
    """

    Selected: ... = PySide.QtGui.QIcon.Mode.Selected
    """
    """

    State: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromTheme(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def hasThemeIcon(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setThemeName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setThemeSearchPaths(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def themeName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def themeSearchPaths(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def actualSize(self, *args, **kwargs):
        """
        """
        ...

    def addFile(self, *args, **kwargs):
        """
        """
        ...

    def addPixmap(self, *args, **kwargs):
        """
        """
        ...

    def availableSizes(self, *args, **kwargs):
        """
        """
        ...

    def cacheKey(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QIconDragEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QIconEngine(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actualSize(self, *args, **kwargs):
        """
        """
        ...

    def addFile(self, *args, **kwargs):
        """
        """
        ...

    def addPixmap(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QIconEngineV2(QIconEngine):
    AvailableSizesHook: ...
    """
    """

    IconEngineHook: ...
    """
    """

    IconNameHook: ... = PySide.QtGui.QIconEngineV2.IconEngineHook.IconNameHook
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def availableSizes(self, *args, **kwargs):
        """
        """
        ...

    def clone(self, *args, **kwargs):
        """
        """
        ...

    def iconName(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QImage(QPaintDevice):
    Format: ...
    """
    """

    Format_ARGB32: ... = PySide.QtGui.QImage.Format.Format_ARGB32
    """
    """

    Format_ARGB32_Premultiplied: ...
    """
    """

    Format_ARGB4444_Premultiplied: ...
    """
    """

    Format_ARGB6666_Premultiplied: ...
    """
    """

    Format_ARGB8555_Premultiplied: ...
    """
    """

    Format_ARGB8565_Premultiplied: ...
    """
    """

    Format_Indexed8: ... = PySide.QtGui.QImage.Format.Format_Indexed8
    """
    """

    Format_Invalid: ... = PySide.QtGui.QImage.Format.Format_Invalid
    """
    """

    Format_Mono: ... = PySide.QtGui.QImage.Format.Format_Mono
    """
    """

    Format_MonoLSB: ... = PySide.QtGui.QImage.Format.Format_MonoLSB
    """
    """

    Format_RGB16: ... = PySide.QtGui.QImage.Format.Format_RGB16
    """
    """

    Format_RGB32: ... = PySide.QtGui.QImage.Format.Format_RGB32
    """
    """

    Format_RGB444: ... = PySide.QtGui.QImage.Format.Format_RGB444
    """
    """

    Format_RGB555: ... = PySide.QtGui.QImage.Format.Format_RGB555
    """
    """

    Format_RGB666: ... = PySide.QtGui.QImage.Format.Format_RGB666
    """
    """

    Format_RGB888: ... = PySide.QtGui.QImage.Format.Format_RGB888
    """
    """

    InvertMode: ...
    """
    """

    InvertRgb: ... = PySide.QtGui.QImage.InvertMode.InvertRgb
    """
    """

    InvertRgba: ... = PySide.QtGui.QImage.InvertMode.InvertRgba
    """
    """

    NImageFormats: ... = PySide.QtGui.QImage.Format.NImageFormats
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromData(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def trueMatrix(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def allGray(self, *args, **kwargs):
        """
        """
        ...

    def alphaChannel(self, *args, **kwargs):
        """
        """
        ...

    def bitPlaneCount(self, *args, **kwargs):
        """
        """
        ...

    def bits(self, *args, **kwargs):
        """
        """
        ...

    def byteCount(self, *args, **kwargs):
        """
        """
        ...

    def bytesPerLine(self, *args, **kwargs):
        """
        """
        ...

    def cacheKey(self, *args, **kwargs):
        """
        """
        ...

    def color(self, *args, **kwargs):
        """
        """
        ...

    def colorCount(self, *args, **kwargs):
        """
        """
        ...

    def colorTable(self, *args, **kwargs):
        """
        """
        ...

    def constBits(self, *args, **kwargs):
        """
        """
        ...

    def constScanLine(self, *args, **kwargs):
        """
        """
        ...

    def convertToFormat(self, *args, **kwargs):
        """
        """
        ...

    def copy(self, *args, **kwargs):
        """
        """
        ...

    def createAlphaMask(self, *args, **kwargs):
        """
        """
        ...

    def createHeuristicMask(self, *args, **kwargs):
        """
        """
        ...

    def createMaskFromColor(self, *args, **kwargs):
        """
        """
        ...

    def depth(self, *args, **kwargs):
        """
        """
        ...

    def devType(self, *args, **kwargs):
        """
        """
        ...

    def dotsPerMeterX(self, *args, **kwargs):
        """
        """
        ...

    def dotsPerMeterY(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def hasAlphaChannel(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def invertPixels(self, *args, **kwargs):
        """
        """
        ...

    def isGrayscale(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def load(self, *args, **kwargs):
        """
        """
        ...

    def loadFromData(self, *args, **kwargs):
        """
        """
        ...

    def metric(self, *args, **kwargs):
        """
        """
        ...

    def mirrored(self, *args, **kwargs):
        """
        """
        ...

    def numBytes(self, *args, **kwargs):
        """
        """
        ...

    def numColors(self, *args, **kwargs):
        """
        """
        ...

    def offset(self, *args, **kwargs):
        """
        """
        ...

    def paintEngine(self, *args, **kwargs):
        """
        """
        ...

    def pixel(self, *args, **kwargs):
        """
        """
        ...

    def pixelIndex(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def rgbSwapped(self, *args, **kwargs):
        """
        """
        ...

    def save(self, *args, **kwargs):
        """
        """
        ...

    def scaled(self, *args, **kwargs):
        """
        """
        ...

    def scaledToHeight(self, *args, **kwargs):
        """
        """
        ...

    def scaledToWidth(self, *args, **kwargs):
        """
        """
        ...

    def scanLine(self, *args, **kwargs):
        """
        """
        ...

    def setAlphaChannel(self, *args, **kwargs):
        """
        """
        ...

    def setColor(self, *args, **kwargs):
        """
        """
        ...

    def setColorCount(self, *args, **kwargs):
        """
        """
        ...

    def setColorTable(self, *args, **kwargs):
        """
        """
        ...

    def setDotsPerMeterX(self, *args, **kwargs):
        """
        """
        ...

    def setDotsPerMeterY(self, *args, **kwargs):
        """
        """
        ...

    def setNumColors(self, *args, **kwargs):
        """
        """
        ...

    def setOffset(self, *args, **kwargs):
        """
        """
        ...

    def setPixel(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textKeys(self, *args, **kwargs):
        """
        """
        ...

    def transformed(self, *args, **kwargs):
        """
        """
        ...

    def valid(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QImageIOHandler(Shiboken.Object):
    Animation: ... = PySide.QtGui.QImageIOHandler.ImageOption.Animation
    """
    """

    BackgroundColor: ...
    """
    """

    ClipRect: ... = PySide.QtGui.QImageIOHandler.ImageOption.ClipRect
    """
    """

    CompressionRatio: ...
    """
    """

    Description: ... = PySide.QtGui.QImageIOHandler.ImageOption.Description
    """
    """

    Endianness: ... = PySide.QtGui.QImageIOHandler.ImageOption.Endianness
    """
    """

    Gamma: ... = PySide.QtGui.QImageIOHandler.ImageOption.Gamma
    """
    """

    ImageFormat: ... = PySide.QtGui.QImageIOHandler.ImageOption.ImageFormat
    """
    """

    ImageOption: ...
    """
    """

    IncrementalReading: ...
    """
    """

    Name: ... = PySide.QtGui.QImageIOHandler.ImageOption.Name
    """
    """

    Quality: ... = PySide.QtGui.QImageIOHandler.ImageOption.Quality
    """
    """

    ScaledClipRect: ...
    """
    """

    ScaledSize: ... = PySide.QtGui.QImageIOHandler.ImageOption.ScaledSize
    """
    """

    Size: ... = PySide.QtGui.QImageIOHandler.ImageOption.Size
    """
    """

    SubType: ... = PySide.QtGui.QImageIOHandler.ImageOption.SubType
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def canRead(self, *args, **kwargs):
        """
        """
        ...

    def currentImageNumber(self, *args, **kwargs):
        """
        """
        ...

    def currentImageRect(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def imageCount(self, *args, **kwargs):
        """
        """
        ...

    def jumpToImage(self, *args, **kwargs):
        """
        """
        ...

    def jumpToNextImage(self, *args, **kwargs):
        """
        """
        ...

    def loopCount(self, *args, **kwargs):
        """
        """
        ...

    def nextImageDelay(self, *args, **kwargs):
        """
        """
        ...

    def option(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def supportsOption(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QImageReader(Shiboken.Object):
    DeviceError: ... = PySide.QtGui.QImageReader.ImageReaderError.DeviceError
    """
    """

    FileNotFoundError: ...
    """
    """

    ImageReaderError: ...
    """
    """

    InvalidDataError: ...
    """
    """

    UnknownError: ... = PySide.QtGui.QImageReader.ImageReaderError.UnknownError
    """
    """

    UnsupportedFormatError: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def imageFormat(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def supportedImageFormats(*args, **kwargs):
        """
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoDetectImageFormat(self, *args, **kwargs):
        """
        """
        ...

    def backgroundColor(self, *args, **kwargs):
        """
        """
        ...

    def canRead(self, *args, **kwargs):
        """
        """
        ...

    def clipRect(self, *args, **kwargs):
        """
        """
        ...

    def currentImageNumber(self, *args, **kwargs):
        """
        """
        ...

    def currentImageRect(self, *args, **kwargs):
        """
        """
        ...

    def decideFormatFromContent(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def error(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def imageCount(self, *args, **kwargs):
        """
        """
        ...

    def jumpToImage(self, *args, **kwargs):
        """
        """
        ...

    def jumpToNextImage(self, *args, **kwargs):
        """
        """
        ...

    def loopCount(self, *args, **kwargs):
        """
        """
        ...

    def nextImageDelay(self, *args, **kwargs):
        """
        """
        ...

    def quality(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def scaledClipRect(self, *args, **kwargs):
        """
        """
        ...

    def scaledSize(self, *args, **kwargs):
        """
        """
        ...

    def setAutoDetectImageFormat(self, *args, **kwargs):
        """
        """
        ...

    def setBackgroundColor(self, *args, **kwargs):
        """
        """
        ...

    def setClipRect(self, *args, **kwargs):
        """
        """
        ...

    def setDecideFormatFromContent(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def setQuality(self, *args, **kwargs):
        """
        """
        ...

    def setScaledClipRect(self, *args, **kwargs):
        """
        """
        ...

    def setScaledSize(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def supportsAnimation(self, *args, **kwargs):
        """
        """
        ...

    def supportsOption(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textKeys(self, *args, **kwargs):
        """
        """
        ...

    ...

class QImageWriter(Shiboken.Object):
    DeviceError: ... = PySide.QtGui.QImageWriter.ImageWriterError.DeviceError
    """
    """

    ImageWriterError: ...
    """
    """

    UnknownError: ... = PySide.QtGui.QImageWriter.ImageWriterError.UnknownError
    """
    """

    UnsupportedFormatError: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def supportedImageFormats(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def canWrite(self, *args, **kwargs):
        """
        """
        ...

    def compression(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def error(self, *args, **kwargs):
        """
        """
        ...

    def errorString(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def gamma(self, *args, **kwargs):
        """
        """
        ...

    def quality(self, *args, **kwargs):
        """
        """
        ...

    def setCompression(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def setGamma(self, *args, **kwargs):
        """
        """
        ...

    def setQuality(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def supportsOption(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QInputContext(PySide.QtCore.QObject):
    PreeditFormat: ...
    """
    """

    SelectionFormat: ...
    """
    """

    StandardFormat: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actions(self, *args, **kwargs):
        """
        """
        ...

    def filterEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusWidget(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def identifierName(self, *args, **kwargs):
        """
        """
        ...

    def isComposing(self, *args, **kwargs):
        """
        """
        ...

    def language(self, *args, **kwargs):
        """
        """
        ...

    def mouseHandler(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def sendEvent(self, *args, **kwargs):
        """
        """
        ...

    def setFocusWidget(self, *args, **kwargs):
        """
        """
        ...

    def standardFormat(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    def widgetDestroyed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QInputContextFactory(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def create(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def description(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def displayName(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def keys(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def languages(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QInputDialog(QDialog):
    DoubleInput: ... = PySide.QtGui.QInputDialog.InputMode.DoubleInput
    """
    """

    InputDialogOption: ...
    """
    """

    InputMode: ...
    """
    """

    IntInput: ... = PySide.QtGui.QInputDialog.InputMode.IntInput
    """
    """

    NoButtons: ... = PySide.QtGui.QInputDialog.InputDialogOption.NoButtons
    """
    """

    TextInput: ... = PySide.QtGui.QInputDialog.InputMode.TextInput
    """
    """

    UseListViewForComboBoxItems: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    doubleValueChanged: ...
    """
    Signal
    """

    doubleValueSelected: ...
    """
    Signal
    """

    intValueChanged: ...
    """
    Signal
    """

    intValueSelected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    textValueChanged: ...
    """
    Signal
    """

    textValueSelected: ...
    """
    Signal
    """

    @staticmethod
    def getDouble(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getInt(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getInteger(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getItem(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def getText(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def cancelButtonText(self, *args, **kwargs):
        """
        """
        ...

    def comboBoxItems(self, *args, **kwargs):
        """
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def doubleDecimals(self, *args, **kwargs):
        """
        """
        ...

    def doubleMaximum(self, *args, **kwargs):
        """
        """
        ...

    def doubleMinimum(self, *args, **kwargs):
        """
        """
        ...

    def doubleValue(self, *args, **kwargs):
        """
        """
        ...

    def inputMode(self, *args, **kwargs):
        """
        """
        ...

    def intMaximum(self, *args, **kwargs):
        """
        """
        ...

    def intMinimum(self, *args, **kwargs):
        """
        """
        ...

    def intStep(self, *args, **kwargs):
        """
        """
        ...

    def intValue(self, *args, **kwargs):
        """
        """
        ...

    def isComboBoxEditable(self, *args, **kwargs):
        """
        """
        ...

    def labelText(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def okButtonText(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def setCancelButtonText(self, *args, **kwargs):
        """
        """
        ...

    def setComboBoxEditable(self, *args, **kwargs):
        """
        """
        ...

    def setComboBoxItems(self, *args, **kwargs):
        """
        """
        ...

    def setDoubleDecimals(self, *args, **kwargs):
        """
        """
        ...

    def setDoubleMaximum(self, *args, **kwargs):
        """
        """
        ...

    def setDoubleMinimum(self, *args, **kwargs):
        """
        """
        ...

    def setDoubleRange(self, *args, **kwargs):
        """
        """
        ...

    def setDoubleValue(self, *args, **kwargs):
        """
        """
        ...

    def setInputMode(self, *args, **kwargs):
        """
        """
        ...

    def setIntMaximum(self, *args, **kwargs):
        """
        """
        ...

    def setIntMinimum(self, *args, **kwargs):
        """
        """
        ...

    def setIntRange(self, *args, **kwargs):
        """
        """
        ...

    def setIntStep(self, *args, **kwargs):
        """
        """
        ...

    def setIntValue(self, *args, **kwargs):
        """
        """
        ...

    def setLabelText(self, *args, **kwargs):
        """
        """
        ...

    def setOkButtonText(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setTextEchoMode(self, *args, **kwargs):
        """
        """
        ...

    def setTextValue(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    def textEchoMode(self, *args, **kwargs):
        """
        """
        ...

    def textValue(self, *args, **kwargs):
        """
        """
        ...

    ...

class QInputEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def modifiers(self, *args, **kwargs):
        """
        """
        ...

    def setModifiers(self, *args, **kwargs):
        """
        """
        ...

    ...

class QInputMethodEvent(PySide.QtCore.QEvent):
    Attribute: ...
    """
    """

    AttributeType: ...
    """
    """

    Cursor: ... = PySide.QtGui.QInputMethodEvent.AttributeType.Cursor
    """
    """

    Language: ... = PySide.QtGui.QInputMethodEvent.AttributeType.Language
    """
    """

    Ruby: ... = PySide.QtGui.QInputMethodEvent.AttributeType.Ruby
    """
    """

    Selection: ... = PySide.QtGui.QInputMethodEvent.AttributeType.Selection
    """
    """

    TextFormat: ... = PySide.QtGui.QInputMethodEvent.AttributeType.TextFormat
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def attributes(self, *args, **kwargs):
        """
        """
        ...

    def commitString(self, *args, **kwargs):
        """
        """
        ...

    def preeditString(self, *args, **kwargs):
        """
        """
        ...

    def replacementLength(self, *args, **kwargs):
        """
        """
        ...

    def replacementStart(self, *args, **kwargs):
        """
        """
        ...

    def setCommitString(self, *args, **kwargs):
        """
        """
        ...

    ...

class QIntValidator(QValidator):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def bottom(self, *args, **kwargs):
        """
        """
        ...

    def fixup(self, *args, **kwargs):
        """
        """
        ...

    def setBottom(self, *args, **kwargs):
        """
        """
        ...

    def setRange(self, *args, **kwargs):
        """
        """
        ...

    def setTop(self, *args, **kwargs):
        """
        """
        ...

    def top(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QItemDelegate(QAbstractItemDelegate):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def check(self, *args, **kwargs):
        """
        """
        ...

    def createEditor(self, *args, **kwargs):
        """
        """
        ...

    def decoration(self, *args, **kwargs):
        """
        """
        ...

    def drawBackground(self, *args, **kwargs):
        """
        """
        ...

    def drawCheck(self, *args, **kwargs):
        """
        """
        ...

    def drawDecoration(self, *args, **kwargs):
        """
        """
        ...

    def drawDisplay(self, *args, **kwargs):
        """
        """
        ...

    def drawFocus(self, *args, **kwargs):
        """
        """
        ...

    def editorEvent(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def hasClipping(self, *args, **kwargs):
        """
        """
        ...

    def itemEditorFactory(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def setClipping(self, *args, **kwargs):
        """
        """
        ...

    def setEditorData(self, *args, **kwargs):
        """
        """
        ...

    def setItemEditorFactory(self, *args, **kwargs):
        """
        """
        ...

    def setModelData(self, *args, **kwargs):
        """
        """
        ...

    def setOptions(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def textRectangle(self, *args, **kwargs):
        """
        """
        ...

    def updateEditorGeometry(self, *args, **kwargs):
        """
        """
        ...

    ...

class QItemEditorCreatorBase(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def createWidget(self, *args, **kwargs):
        """
        """
        ...

    def valuePropertyName(self, *args, **kwargs):
        """
        """
        ...

    ...

class QItemEditorFactory(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def defaultFactory(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setDefaultFactory(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def createEditor(self, *args, **kwargs):
        """
        """
        ...

    def registerEditor(self, *args, **kwargs):
        """
        """
        ...

    def valuePropertyName(self, *args, **kwargs):
        """
        """
        ...

    ...

class QItemSelection(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromSet(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromVector(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def split(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...

    def append(self, *args, **kwargs):
        """
        """
        ...

    def at(self, *args, **kwargs):
        """
        """
        ...

    def back(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def detachShared(self, *args, **kwargs):
        """
        """
        ...

    def empty(self, *args, **kwargs):
        """
        """
        ...

    def endsWith(self, *args, **kwargs):
        """
        """
        ...

    def first(self, *args, **kwargs):
        """
        """
        ...

    def front(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def indexes(self, *args, **kwargs):
        """
        """
        ...

    def insert(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isSharedWith(self, *args, **kwargs):
        """
        """
        ...

    def last(self, *args, **kwargs):
        """
        """
        ...

    def lastIndexOf(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def merge(self, *args, **kwargs):
        """
        """
        ...

    def mid(self, *args, **kwargs):
        """
        """
        ...

    def move(self, *args, **kwargs):
        """
        """
        ...

    def pop_back(self, *args, **kwargs):
        """
        """
        ...

    def pop_front(self, *args, **kwargs):
        """
        """
        ...

    def prepend(self, *args, **kwargs):
        """
        """
        ...

    def push_back(self, *args, **kwargs):
        """
        """
        ...

    def push_front(self, *args, **kwargs):
        """
        """
        ...

    def removeAll(self, *args, **kwargs):
        """
        """
        ...

    def removeAt(self, *args, **kwargs):
        """
        """
        ...

    def removeFirst(self, *args, **kwargs):
        """
        """
        ...

    def removeLast(self, *args, **kwargs):
        """
        """
        ...

    def removeOne(self, *args, **kwargs):
        """
        """
        ...

    def replace(self, *args, **kwargs):
        """
        """
        ...

    def reserve(self, *args, **kwargs):
        """
        """
        ...

    def select(self, *args, **kwargs):
        """
        """
        ...

    def setSharable(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def startsWith(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def takeAt(self, *args, **kwargs):
        """
        """
        ...

    def takeFirst(self, *args, **kwargs):
        """
        """
        ...

    def takeLast(self, *args, **kwargs):
        """
        """
        ...

    def toSet(self, *args, **kwargs):
        """
        """
        ...

    def toVector(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QItemSelectionModel(PySide.QtCore.QObject):
    Clear: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Clear
    """
    """

    ClearAndSelect: ...
    """
    """

    Columns: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Columns
    """
    """

    Current: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Current
    """
    """

    Deselect: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Deselect
    """
    """

    NoUpdate: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.NoUpdate
    """
    """

    Rows: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Rows
    """
    """

    Select: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Select
    """
    """

    SelectCurrent: ...
    """
    """

    SelectionFlag: ...
    """
    """

    SelectionFlags: ...
    """
    """

    Toggle: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Toggle
    """
    """

    ToggleCurrent: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    currentColumnChanged: ...
    """
    Signal
    """

    currentRowChanged: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def clearSelection(self, *args, **kwargs):
        """
        """
        ...

    def columnIntersectsSelection(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def emitSelectionChanged(self, *args, **kwargs):
        """
        """
        ...

    def hasSelection(self, *args, **kwargs):
        """
        """
        ...

    def isColumnSelected(self, *args, **kwargs):
        """
        """
        ...

    def isRowSelected(self, *args, **kwargs):
        """
        """
        ...

    def isSelected(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def rowIntersectsSelection(self, *args, **kwargs):
        """
        """
        ...

    def select(self, *args, **kwargs):
        """
        """
        ...

    def selectedColumns(self, *args, **kwargs):
        """
        """
        ...

    def selectedIndexes(self, *args, **kwargs):
        """
        """
        ...

    def selectedRows(self, *args, **kwargs):
        """
        """
        ...

    def selection(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    ...

class QItemSelectionRange(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def bottom(self, *args, **kwargs):
        """
        """
        ...

    def bottomRight(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def indexes(self, *args, **kwargs):
        """
        """
        ...

    def intersected(self, *args, **kwargs):
        """
        """
        ...

    def intersects(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def left(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def right(self, *args, **kwargs):
        """
        """
        ...

    def top(self, *args, **kwargs):
        """
        """
        ...

    def topLeft(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QKeyEvent(QInputEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def createExtendedKeyEvent(*args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def hasExtendedInfo(self, *args, **kwargs):
        """
        """
        ...

    def isAutoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def matches(self, *args, **kwargs):
        """
        """
        ...

    def modifiers(self, *args, **kwargs):
        """
        """
        ...

    def nativeModifiers(self, *args, **kwargs):
        """
        """
        ...

    def nativeScanCode(self, *args, **kwargs):
        """
        """
        ...

    def nativeVirtualKey(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    ...

class QKeyEventTransition(PySide.QtCore.QEventTransition):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def eventTest(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def modifierMask(self, *args, **kwargs):
        """
        """
        ...

    def onTransition(self, *args, **kwargs):
        """
        """
        ...

    def setKey(self, *args, **kwargs):
        """
        """
        ...

    def setModifierMask(self, *args, **kwargs):
        """
        """
        ...

    ...

class QKeySequence(Shiboken.Object):
    AddTab: ... = PySide.QtGui.QKeySequence.StandardKey.AddTab
    """
    """

    Back: ... = PySide.QtGui.QKeySequence.StandardKey.Back
    """
    """

    Bold: ... = PySide.QtGui.QKeySequence.StandardKey.Bold
    """
    """

    Close: ... = PySide.QtGui.QKeySequence.StandardKey.Close
    """
    """

    Copy: ... = PySide.QtGui.QKeySequence.StandardKey.Copy
    """
    """

    Cut: ... = PySide.QtGui.QKeySequence.StandardKey.Cut
    """
    """

    Delete: ... = PySide.QtGui.QKeySequence.StandardKey.Delete
    """
    """

    DeleteEndOfLine: ...
    """
    """

    DeleteEndOfWord: ...
    """
    """

    DeleteStartOfWord: ...
    """
    """

    ExactMatch: ... = PySide.QtGui.QKeySequence.SequenceMatch.ExactMatch
    """
    """

    Find: ... = PySide.QtGui.QKeySequence.StandardKey.Find
    """
    """

    FindNext: ... = PySide.QtGui.QKeySequence.StandardKey.FindNext
    """
    """

    FindPrevious: ... = PySide.QtGui.QKeySequence.StandardKey.FindPrevious
    """
    """

    Forward: ... = PySide.QtGui.QKeySequence.StandardKey.Forward
    """
    """

    HelpContents: ... = PySide.QtGui.QKeySequence.StandardKey.HelpContents
    """
    """

    InsertLineSeparator: ...
    """
    """

    InsertParagraphSeparator: ...
    """
    """

    Italic: ... = PySide.QtGui.QKeySequence.StandardKey.Italic
    """
    """

    MoveToEndOfBlock: ...
    """
    """

    MoveToEndOfDocument: ...
    """
    """

    MoveToEndOfLine: ...
    """
    """

    MoveToNextChar: ... = PySide.QtGui.QKeySequence.StandardKey.MoveToNextChar
    """
    """

    MoveToNextLine: ... = PySide.QtGui.QKeySequence.StandardKey.MoveToNextLine
    """
    """

    MoveToNextPage: ... = PySide.QtGui.QKeySequence.StandardKey.MoveToNextPage
    """
    """

    MoveToNextWord: ... = PySide.QtGui.QKeySequence.StandardKey.MoveToNextWord
    """
    """

    MoveToPreviousChar: ...
    """
    """

    MoveToPreviousLine: ...
    """
    """

    MoveToPreviousPage: ...
    """
    """

    MoveToPreviousWord: ...
    """
    """

    MoveToStartOfBlock: ...
    """
    """

    MoveToStartOfDocument: ...
    """
    """

    MoveToStartOfLine: ...
    """
    """

    NativeText: ... = PySide.QtGui.QKeySequence.SequenceFormat.NativeText
    """
    """

    New: ... = PySide.QtGui.QKeySequence.StandardKey.New
    """
    """

    NextChild: ... = PySide.QtGui.QKeySequence.StandardKey.NextChild
    """
    """

    NoMatch: ... = PySide.QtGui.QKeySequence.SequenceMatch.NoMatch
    """
    """

    Open: ... = PySide.QtGui.QKeySequence.StandardKey.Open
    """
    """

    PartialMatch: ... = PySide.QtGui.QKeySequence.SequenceMatch.PartialMatch
    """
    """

    Paste: ... = PySide.QtGui.QKeySequence.StandardKey.Paste
    """
    """

    PortableText: ... = PySide.QtGui.QKeySequence.SequenceFormat.PortableText
    """
    """

    Preferences: ... = PySide.QtGui.QKeySequence.StandardKey.Preferences
    """
    """

    PreviousChild: ... = PySide.QtGui.QKeySequence.StandardKey.PreviousChild
    """
    """

    Print: ... = PySide.QtGui.QKeySequence.StandardKey.Print
    """
    """

    Quit: ... = PySide.QtGui.QKeySequence.StandardKey.Quit
    """
    """

    Redo: ... = PySide.QtGui.QKeySequence.StandardKey.Redo
    """
    """

    Refresh: ... = PySide.QtGui.QKeySequence.StandardKey.Refresh
    """
    """

    Replace: ... = PySide.QtGui.QKeySequence.StandardKey.Replace
    """
    """

    Save: ... = PySide.QtGui.QKeySequence.StandardKey.Save
    """
    """

    SaveAs: ... = PySide.QtGui.QKeySequence.StandardKey.SaveAs
    """
    """

    SelectAll: ... = PySide.QtGui.QKeySequence.StandardKey.SelectAll
    """
    """

    SelectEndOfBlock: ...
    """
    """

    SelectEndOfDocument: ...
    """
    """

    SelectEndOfLine: ...
    """
    """

    SelectNextChar: ... = PySide.QtGui.QKeySequence.StandardKey.SelectNextChar
    """
    """

    SelectNextLine: ... = PySide.QtGui.QKeySequence.StandardKey.SelectNextLine
    """
    """

    SelectNextPage: ... = PySide.QtGui.QKeySequence.StandardKey.SelectNextPage
    """
    """

    SelectNextWord: ... = PySide.QtGui.QKeySequence.StandardKey.SelectNextWord
    """
    """

    SelectPreviousChar: ...
    """
    """

    SelectPreviousLine: ...
    """
    """

    SelectPreviousPage: ...
    """
    """

    SelectPreviousWord: ...
    """
    """

    SelectStartOfBlock: ...
    """
    """

    SelectStartOfDocument: ...
    """
    """

    SelectStartOfLine: ...
    """
    """

    SequenceFormat: ...
    """
    """

    SequenceMatch: ...
    """
    """

    StandardKey: ...
    """
    """

    Underline: ... = PySide.QtGui.QKeySequence.StandardKey.Underline
    """
    """

    Undo: ... = PySide.QtGui.QKeySequence.StandardKey.Undo
    """
    """

    UnknownKey: ... = PySide.QtGui.QKeySequence.StandardKey.UnknownKey
    """
    """

    WhatsThis: ... = PySide.QtGui.QKeySequence.StandardKey.WhatsThis
    """
    """

    ZoomIn: ... = PySide.QtGui.QKeySequence.StandardKey.ZoomIn
    """
    """

    ZoomOut: ... = PySide.QtGui.QKeySequence.StandardKey.ZoomOut
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromString(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def keyBindings(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def mnemonic(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def matches(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def toString(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLCDNumber(QFrame):
    Bin: ... = PySide.QtGui.QLCDNumber.Mode.Bin
    """
    """

    Dec: ... = PySide.QtGui.QLCDNumber.Mode.Dec
    """
    """

    Filled: ... = PySide.QtGui.QLCDNumber.SegmentStyle.Filled
    """
    """

    Flat: ... = PySide.QtGui.QLCDNumber.SegmentStyle.Flat
    """
    """

    Hex: ... = PySide.QtGui.QLCDNumber.Mode.Hex
    """
    """

    Mode: ...
    """
    """

    Oct: ... = PySide.QtGui.QLCDNumber.Mode.Oct
    """
    """

    Outline: ... = PySide.QtGui.QLCDNumber.SegmentStyle.Outline
    """
    """

    SegmentStyle: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    overflow: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def checkOverflow(self, *args, **kwargs):
        """
        """
        ...

    def digitCount(self, *args, **kwargs):
        """
        """
        ...

    def display(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def intValue(self, *args, **kwargs):
        """
        """
        ...

    def mode(self, *args, **kwargs):
        """
        """
        ...

    def numDigits(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def segmentStyle(self, *args, **kwargs):
        """
        """
        ...

    def setBinMode(self, *args, **kwargs):
        """
        """
        ...

    def setDecMode(self, *args, **kwargs):
        """
        """
        ...

    def setDigitCount(self, *args, **kwargs):
        """
        """
        ...

    def setHexMode(self, *args, **kwargs):
        """
        """
        ...

    def setMode(self, *args, **kwargs):
        """
        """
        ...

    def setNumDigits(self, *args, **kwargs):
        """
        """
        ...

    def setOctMode(self, *args, **kwargs):
        """
        """
        ...

    def setSegmentStyle(self, *args, **kwargs):
        """
        """
        ...

    def setSmallDecimalPoint(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def smallDecimalPoint(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLabel(QFrame):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    linkActivated: ...
    """
    Signal
    """

    linkHovered: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def buddy(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def hasScaledContents(self, *args, **kwargs):
        """
        """
        ...

    def hasSelectedText(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def indent(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def margin(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def movie(self, *args, **kwargs):
        """
        """
        ...

    def openExternalLinks(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def picture(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def selectedText(self, *args, **kwargs):
        """
        """
        ...

    def selectionStart(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setBuddy(self, *args, **kwargs):
        """
        """
        ...

    def setIndent(self, *args, **kwargs):
        """
        """
        ...

    def setMargin(self, *args, **kwargs):
        """
        """
        ...

    def setMovie(self, *args, **kwargs):
        """
        """
        ...

    def setNum(self, *args, **kwargs):
        """
        """
        ...

    def setOpenExternalLinks(self, *args, **kwargs):
        """
        """
        ...

    def setPicture(self, *args, **kwargs):
        """
        """
        ...

    def setPixmap(self, *args, **kwargs):
        """
        """
        ...

    def setScaledContents(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def setTextInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def setWordWrap(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textFormat(self, *args, **kwargs):
        """
        """
        ...

    def textInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def wordWrap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLayout(PySide.QtCore.QObject, QLayoutItem):
    SetDefaultConstraint: ...
    """
    """

    SetFixedSize: ... = PySide.QtGui.QLayout.SizeConstraint.SetFixedSize
    """
    """

    SetMaximumSize: ... = PySide.QtGui.QLayout.SizeConstraint.SetMaximumSize
    """
    """

    SetMinAndMaxSize: ...
    """
    """

    SetMinimumSize: ... = PySide.QtGui.QLayout.SizeConstraint.SetMinimumSize
    """
    """

    SetNoConstraint: ... = PySide.QtGui.QLayout.SizeConstraint.SetNoConstraint
    """
    """

    SizeConstraint: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def closestAcceptableSize(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def activate(self, *args, **kwargs):
        """
        """
        ...

    def addChildLayout(self, *args, **kwargs):
        """
        """
        ...

    def addChildWidget(self, *args, **kwargs):
        """
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def adoptLayout(self, *args, **kwargs):
        """
        """
        ...

    def alignmentRect(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def contentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def contentsRect(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def geometry(self, *args, **kwargs):
        """
        """
        ...

    def getContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def layout(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def menuBar(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def parentWidget(self, *args, **kwargs):
        """
        """
        ...

    def removeItem(self, *args, **kwargs):
        """
        """
        ...

    def removeWidget(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setMenuBar(self, *args, **kwargs):
        """
        """
        ...

    def setSizeConstraint(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def sizeConstraint(self, *args, **kwargs):
        """
        """
        ...

    def spacing(self, *args, **kwargs):
        """
        """
        ...

    def takeAt(self, *args, **kwargs):
        """
        """
        ...

    def totalHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def totalMaximumSize(self, *args, **kwargs):
        """
        """
        ...

    def totalMinimumSize(self, *args, **kwargs):
        """
        """
        ...

    def totalSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    def widgetEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLayoutItem(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def controlTypes(self, *args, **kwargs):
        """
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def geometry(self, *args, **kwargs):
        """
        """
        ...

    def hasHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def layout(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def spacerItem(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLineEdit(QWidget):
    EchoMode: ...
    """
    """

    NoEcho: ... = PySide.QtGui.QLineEdit.EchoMode.NoEcho
    """
    """

    Normal: ... = PySide.QtGui.QLineEdit.EchoMode.Normal
    """
    """

    Password: ... = PySide.QtGui.QLineEdit.EchoMode.Password
    """
    """

    PasswordEchoOnEdit: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    cursorPositionChanged: ...
    """
    Signal
    """

    editingFinished: ...
    """
    Signal
    """

    lostFocus: ...
    """
    Signal
    """

    returnPressed: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    textChanged: ...
    """
    Signal
    """

    textEdited: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def backspace(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def completer(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def copy(self, *args, **kwargs):
        """
        """
        ...

    def createStandardContextMenu(self, *args, **kwargs):
        """
        """
        ...

    def cursorBackward(self, *args, **kwargs):
        """
        """
        ...

    def cursorForward(self, *args, **kwargs):
        """
        """
        ...

    def cursorMoveStyle(self, *args, **kwargs):
        """
        """
        ...

    def cursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def cursorPositionAt(self, *args, **kwargs):
        """
        """
        ...

    def cursorRect(self, *args, **kwargs):
        """
        """
        ...

    def cursorWordBackward(self, *args, **kwargs):
        """
        """
        ...

    def cursorWordForward(self, *args, **kwargs):
        """
        """
        ...

    def cut(self, *args, **kwargs):
        """
        """
        ...

    def del_(self, *args, **kwargs):
        """
        """
        ...

    def deselect(self, *args, **kwargs):
        """
        """
        ...

    def displayText(self, *args, **kwargs):
        """
        """
        ...

    def dragEnabled(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def echoMode(self, *args, **kwargs):
        """
        """
        ...

    def end(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def getTextMargins(self, *args, **kwargs):
        """
        """
        ...

    def hasAcceptableInput(self, *args, **kwargs):
        """
        """
        ...

    def hasFrame(self, *args, **kwargs):
        """
        """
        ...

    def hasSelectedText(self, *args, **kwargs):
        """
        """
        ...

    def home(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def inputMask(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def insert(self, *args, **kwargs):
        """
        """
        ...

    def isModified(self, *args, **kwargs):
        """
        """
        ...

    def isReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def isRedoAvailable(self, *args, **kwargs):
        """
        """
        ...

    def isUndoAvailable(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def maxLength(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def paste(self, *args, **kwargs):
        """
        """
        ...

    def placeholderText(self, *args, **kwargs):
        """
        """
        ...

    def redo(self, *args, **kwargs):
        """
        """
        ...

    def selectAll(self, *args, **kwargs):
        """
        """
        ...

    def selectedText(self, *args, **kwargs):
        """
        """
        ...

    def selectionStart(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setCompleter(self, *args, **kwargs):
        """
        """
        ...

    def setCursorMoveStyle(self, *args, **kwargs):
        """
        """
        ...

    def setCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def setDragEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setEchoMode(self, *args, **kwargs):
        """
        """
        ...

    def setFrame(self, *args, **kwargs):
        """
        """
        ...

    def setInputMask(self, *args, **kwargs):
        """
        """
        ...

    def setMaxLength(self, *args, **kwargs):
        """
        """
        ...

    def setModified(self, *args, **kwargs):
        """
        """
        ...

    def setPlaceholderText(self, *args, **kwargs):
        """
        """
        ...

    def setReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextMargins(self, *args, **kwargs):
        """
        """
        ...

    def setValidator(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textMargins(self, *args, **kwargs):
        """
        """
        ...

    def undo(self, *args, **kwargs):
        """
        """
        ...

    def validator(self, *args, **kwargs):
        """
        """
        ...

    ...

class QLinearGradient(QGradient):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def finalStop(self, *args, **kwargs):
        """
        """
        ...

    def setFinalStop(self, *args, **kwargs):
        """
        """
        ...

    def setStart(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    ...

class QListView(QAbstractItemView):
    Adjust: ... = PySide.QtGui.QListView.ResizeMode.Adjust
    """
    """

    Batched: ... = PySide.QtGui.QListView.LayoutMode.Batched
    """
    """

    Fixed: ... = PySide.QtGui.QListView.ResizeMode.Fixed
    """
    """

    Flow: ...
    """
    """

    Free: ... = PySide.QtGui.QListView.Movement.Free
    """
    """

    IconMode: ... = PySide.QtGui.QListView.ViewMode.IconMode
    """
    """

    LayoutMode: ...
    """
    """

    LeftToRight: ... = PySide.QtGui.QListView.Flow.LeftToRight
    """
    """

    ListMode: ... = PySide.QtGui.QListView.ViewMode.ListMode
    """
    """

    Movement: ...
    """
    """

    ResizeMode: ...
    """
    """

    SinglePass: ... = PySide.QtGui.QListView.LayoutMode.SinglePass
    """
    """

    Snap: ... = PySide.QtGui.QListView.Movement.Snap
    """
    """

    Static: ... = PySide.QtGui.QListView.Movement.Static
    """
    """

    TopToBottom: ... = PySide.QtGui.QListView.Flow.TopToBottom
    """
    """

    ViewMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    indexesMoved: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def batchSize(self, *args, **kwargs):
        """
        """
        ...

    def clearPropertyFlags(self, *args, **kwargs):
        """
        """
        ...

    def contentsSize(self, *args, **kwargs):
        """
        """
        ...

    def currentChanged(self, *args, **kwargs):
        """
        """
        ...

    def dataChanged(self, *args, **kwargs):
        """
        """
        ...

    def doItemsLayout(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def flow(self, *args, **kwargs):
        """
        """
        ...

    def gridSize(self, *args, **kwargs):
        """
        """
        ...

    def horizontalOffset(self, *args, **kwargs):
        """
        """
        ...

    def indexAt(self, *args, **kwargs):
        """
        """
        ...

    def internalDrag(self, *args, **kwargs):
        """
        """
        ...

    def internalDrop(self, *args, **kwargs):
        """
        """
        ...

    def isIndexHidden(self, *args, **kwargs):
        """
        """
        ...

    def isRowHidden(self, *args, **kwargs):
        """
        """
        ...

    def isSelectionRectVisible(self, *args, **kwargs):
        """
        """
        ...

    def isWrapping(self, *args, **kwargs):
        """
        """
        ...

    def layoutMode(self, *args, **kwargs):
        """
        """
        ...

    def modelColumn(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def movement(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def rectForIndex(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def resizeContents(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeMode(self, *args, **kwargs):
        """
        """
        ...

    def rowsAboutToBeRemoved(self, *args, **kwargs):
        """
        """
        ...

    def rowsInserted(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def scrollTo(self, *args, **kwargs):
        """
        """
        ...

    def selectedIndexes(self, *args, **kwargs):
        """
        """
        ...

    def selectionChanged(self, *args, **kwargs):
        """
        """
        ...

    def setBatchSize(self, *args, **kwargs):
        """
        """
        ...

    def setFlow(self, *args, **kwargs):
        """
        """
        ...

    def setGridSize(self, *args, **kwargs):
        """
        """
        ...

    def setLayoutMode(self, *args, **kwargs):
        """
        """
        ...

    def setModelColumn(self, *args, **kwargs):
        """
        """
        ...

    def setMovement(self, *args, **kwargs):
        """
        """
        ...

    def setPositionForIndex(self, *args, **kwargs):
        """
        """
        ...

    def setResizeMode(self, *args, **kwargs):
        """
        """
        ...

    def setRootIndex(self, *args, **kwargs):
        """
        """
        ...

    def setRowHidden(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionRectVisible(self, *args, **kwargs):
        """
        """
        ...

    def setSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setUniformItemSizes(self, *args, **kwargs):
        """
        """
        ...

    def setViewMode(self, *args, **kwargs):
        """
        """
        ...

    def setWordWrap(self, *args, **kwargs):
        """
        """
        ...

    def setWrapping(self, *args, **kwargs):
        """
        """
        ...

    def spacing(self, *args, **kwargs):
        """
        """
        ...

    def startDrag(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def uniformItemSizes(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometries(self, *args, **kwargs):
        """
        """
        ...

    def verticalOffset(self, *args, **kwargs):
        """
        """
        ...

    def viewMode(self, *args, **kwargs):
        """
        """
        ...

    def viewOptions(self, *args, **kwargs):
        """
        """
        ...

    def visualRect(self, *args, **kwargs):
        """
        """
        ...

    def visualRegionForSelection(self, *args, **kwargs):
        """
        """
        ...

    def wordWrap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QListWidget(QListView):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentItemChanged: ...
    """
    Signal
    """

    currentRowChanged: ...
    """
    Signal
    """

    currentTextChanged: ...
    """
    Signal
    """

    itemActivated: ...
    """
    Signal
    """

    itemChanged: ...
    """
    Signal
    """

    itemClicked: ...
    """
    Signal
    """

    itemDoubleClicked: ...
    """
    Signal
    """

    itemEntered: ...
    """
    Signal
    """

    itemPressed: ...
    """
    Signal
    """

    itemSelectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addItems(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def closePersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentItem(self, *args, **kwargs):
        """
        """
        ...

    def currentRow(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def editItem(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def findItems(self, *args, **kwargs):
        """
        """
        ...

    def indexFromItem(self, *args, **kwargs):
        """
        """
        ...

    def insertItem(self, *args, **kwargs):
        """
        """
        ...

    def insertItems(self, *args, **kwargs):
        """
        """
        ...

    def isSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def item(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def itemFromIndex(self, *args, **kwargs):
        """
        """
        ...

    def itemWidget(self, *args, **kwargs):
        """
        """
        ...

    def items(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def openPersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def removeItemWidget(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def scrollToItem(self, *args, **kwargs):
        """
        """
        ...

    def selectedItems(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentItem(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentRow(self, *args, **kwargs):
        """
        """
        ...

    def setItemWidget(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def sortItems(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    def takeItem(self, *args, **kwargs):
        """
        """
        ...

    def visualItemRect(self, *args, **kwargs):
        """
        """
        ...

    ...

class QListWidgetItem(Shiboken.Object):
    ItemType: ...
    """
    """

    Type: ... = PySide.QtGui.QListWidgetItem.ItemType.Type
    """
    """

    UserType: ... = PySide.QtGui.QListWidgetItem.ItemType.UserType
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def checkState(self, *args, **kwargs):
        """
        """
        ...

    def clone(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def foreground(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def isHidden(self, *args, **kwargs):
        """
        """
        ...

    def isSelected(self, *args, **kwargs):
        """
        """
        ...

    def listWidget(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setCheckState(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setFlags(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setForeground(self, *args, **kwargs):
        """
        """
        ...

    def setHidden(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setSelected(self, *args, **kwargs):
        """
        """
        ...

    def setSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def setStatusTip(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def statusTip(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textAlignment(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def whatsThis(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMainWindow(QWidget):
    AllowNestedDocks: ...
    """
    """

    AllowTabbedDocks: ...
    """
    """

    AnimatedDocks: ... = PySide.QtGui.QMainWindow.DockOption.AnimatedDocks
    """
    """

    DockOption: ...
    """
    """

    DockOptions: ...
    """
    """

    ForceTabbedDocks: ...
    """
    """

    VerticalTabs: ... = PySide.QtGui.QMainWindow.DockOption.VerticalTabs
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    iconSizeChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    toolButtonStyleChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addDockWidget(self, *args, **kwargs):
        """
        """
        ...

    def addToolBar(self, *args, **kwargs):
        """
        """
        ...

    def addToolBarBreak(self, *args, **kwargs):
        """
        """
        ...

    def centralWidget(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def corner(self, *args, **kwargs):
        """
        """
        ...

    def createPopupMenu(self, *args, **kwargs):
        """
        """
        ...

    def dockOptions(self, *args, **kwargs):
        """
        """
        ...

    def dockWidgetArea(self, *args, **kwargs):
        """
        """
        ...

    def documentMode(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def iconSize(self, *args, **kwargs):
        """
        """
        ...

    def insertToolBar(self, *args, **kwargs):
        """
        """
        ...

    def insertToolBarBreak(self, *args, **kwargs):
        """
        """
        ...

    def isAnimated(self, *args, **kwargs):
        """
        """
        ...

    def isDockNestingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isSeparator(self, *args, **kwargs):
        """
        """
        ...

    def menuBar(self, *args, **kwargs):
        """
        """
        ...

    def menuWidget(self, *args, **kwargs):
        """
        """
        ...

    def removeDockWidget(self, *args, **kwargs):
        """
        """
        ...

    def removeToolBar(self, *args, **kwargs):
        """
        """
        ...

    def removeToolBarBreak(self, *args, **kwargs):
        """
        """
        ...

    def restoreDockWidget(self, *args, **kwargs):
        """
        """
        ...

    def restoreState(self, *args, **kwargs):
        """
        """
        ...

    def saveState(self, *args, **kwargs):
        """
        """
        ...

    def setAnimated(self, *args, **kwargs):
        """
        """
        ...

    def setCentralWidget(self, *args, **kwargs):
        """
        """
        ...

    def setCorner(self, *args, **kwargs):
        """
        """
        ...

    def setDockNestingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setDockOptions(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentMode(self, *args, **kwargs):
        """
        """
        ...

    def setIconSize(self, *args, **kwargs):
        """
        """
        ...

    def setMenuBar(self, *args, **kwargs):
        """
        """
        ...

    def setMenuWidget(self, *args, **kwargs):
        """
        """
        ...

    def setStatusBar(self, *args, **kwargs):
        """
        """
        ...

    def setTabPosition(self, *args, **kwargs):
        """
        """
        ...

    def setTabShape(self, *args, **kwargs):
        """
        """
        ...

    def setToolButtonStyle(self, *args, **kwargs):
        """
        """
        ...

    def setUnifiedTitleAndToolBarOnMac(self, *args, **kwargs):
        """
        """
        ...

    def splitDockWidget(self, *args, **kwargs):
        """
        """
        ...

    def statusBar(self, *args, **kwargs):
        """
        """
        ...

    def tabPosition(self, *args, **kwargs):
        """
        """
        ...

    def tabShape(self, *args, **kwargs):
        """
        """
        ...

    def tabifiedDockWidgets(self, *args, **kwargs):
        """
        """
        ...

    def tabifyDockWidget(self, *args, **kwargs):
        """
        """
        ...

    def toolBarArea(self, *args, **kwargs):
        """
        """
        ...

    def toolBarBreak(self, *args, **kwargs):
        """
        """
        ...

    def toolButtonStyle(self, *args, **kwargs):
        """
        """
        ...

    def unifiedTitleAndToolBarOnMac(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def det(self, *args, **kwargs):
        """
        """
        ...

    def determinant(self, *args, **kwargs):
        """
        """
        ...

    def dx(self, *args, **kwargs):
        """
        """
        ...

    def dy(self, *args, **kwargs):
        """
        """
        ...

    def inverted(self, *args, **kwargs):
        """
        """
        ...

    def isIdentity(self, *args, **kwargs):
        """
        """
        ...

    def isInvertible(self, *args, **kwargs):
        """
        """
        ...

    def m11(self, *args, **kwargs):
        """
        """
        ...

    def m12(self, *args, **kwargs):
        """
        """
        ...

    def m21(self, *args, **kwargs):
        """
        """
        ...

    def m22(self, *args, **kwargs):
        """
        """
        ...

    def map(self, *args, **kwargs):
        """
        """
        ...

    def mapRect(self, *args, **kwargs):
        """
        """
        ...

    def mapToPolygon(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def rotate(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def setMatrix(self, *args, **kwargs):
        """
        """
        ...

    def shear(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix2x2(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix2x3(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix2x4(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix3x2(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix3x3(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix3x4(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix4x2(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix4x3(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMatrix4x4(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def column(self, *args, **kwargs):
        """
        """
        ...

    def copyDataTo(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def determinant(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def flipCoordinates(self, *args, **kwargs):
        """
        """
        ...

    def frustum(self, *args, **kwargs):
        """
        """
        ...

    def inverted(self, *args, **kwargs):
        """
        """
        ...

    def isIdentity(self, *args, **kwargs):
        """
        """
        ...

    def lookAt(self, *args, **kwargs):
        """
        """
        ...

    def map(self, *args, **kwargs):
        """
        """
        ...

    def mapRect(self, *args, **kwargs):
        """
        """
        ...

    def mapVector(self, *args, **kwargs):
        """
        """
        ...

    def normalMatrix(self, *args, **kwargs):
        """
        """
        ...

    def optimize(self, *args, **kwargs):
        """
        """
        ...

    def ortho(self, *args, **kwargs):
        """
        """
        ...

    def perspective(self, *args, **kwargs):
        """
        """
        ...

    def rotate(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def setColumn(self, *args, **kwargs):
        """
        """
        ...

    def setRow(self, *args, **kwargs):
        """
        """
        ...

    def setToIdentity(self, *args, **kwargs):
        """
        """
        ...

    def toAffine(self, *args, **kwargs):
        """
        """
        ...

    def toTransform(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMdiArea(QAbstractScrollArea):
    ActivationHistoryOrder: ...
    """
    """

    AreaOption: ...
    """
    """

    AreaOptions: ...
    """
    """

    CreationOrder: ... = PySide.QtGui.QMdiArea.WindowOrder.CreationOrder
    """
    """

    DontMaximizeSubWindowOnActivation: ...
    """
    """

    StackingOrder: ... = PySide.QtGui.QMdiArea.WindowOrder.StackingOrder
    """
    """

    SubWindowView: ... = PySide.QtGui.QMdiArea.ViewMode.SubWindowView
    """
    """

    TabbedView: ... = PySide.QtGui.QMdiArea.ViewMode.TabbedView
    """
    """

    ViewMode: ...
    """
    """

    WindowOrder: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    subWindowActivated: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def activateNextSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def activatePreviousSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def activationOrder(self, *args, **kwargs):
        """
        """
        ...

    def activeSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def addSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def cascadeSubWindows(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def closeActiveSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def closeAllSubWindows(self, *args, **kwargs):
        """
        """
        ...

    def currentSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def documentMode(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def removeSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def setActivationOrder(self, *args, **kwargs):
        """
        """
        ...

    def setActiveSubWindow(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentMode(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setTabPosition(self, *args, **kwargs):
        """
        """
        ...

    def setTabShape(self, *args, **kwargs):
        """
        """
        ...

    def setTabsClosable(self, *args, **kwargs):
        """
        """
        ...

    def setTabsMovable(self, *args, **kwargs):
        """
        """
        ...

    def setViewMode(self, *args, **kwargs):
        """
        """
        ...

    def setupViewport(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def subWindowList(self, *args, **kwargs):
        """
        """
        ...

    def tabPosition(self, *args, **kwargs):
        """
        """
        ...

    def tabShape(self, *args, **kwargs):
        """
        """
        ...

    def tabsClosable(self, *args, **kwargs):
        """
        """
        ...

    def tabsMovable(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    def tileSubWindows(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def viewMode(self, *args, **kwargs):
        """
        """
        ...

    def viewportEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMdiSubWindow(QWidget):
    AllowOutsideAreaHorizontally: ...
    """
    """

    AllowOutsideAreaVertically: ...
    """
    """

    RubberBandMove: ...
    """
    """

    RubberBandResize: ...
    """
    """

    SubWindowOption: ...
    """
    """

    SubWindowOptions: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToActivate: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    windowStateChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def isShaded(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyboardPageStep(self, *args, **kwargs):
        """
        """
        ...

    def keyboardSingleStep(self, *args, **kwargs):
        """
        """
        ...

    def leaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def maximizedButtonsWidget(self, *args, **kwargs):
        """
        """
        ...

    def maximizedSystemMenuIconWidget(self, *args, **kwargs):
        """
        """
        ...

    def mdiArea(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setKeyboardPageStep(self, *args, **kwargs):
        """
        """
        ...

    def setKeyboardSingleStep(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setSystemMenu(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def showShaded(self, *args, **kwargs):
        """
        """
        ...

    def showSystemMenu(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def systemMenu(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMenu(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToHide: ...
    """
    Signal
    """

    aboutToShow: ...
    """
    Signal
    """

    activated: ...
    """
    Signal
    """

    highlighted: ...
    """
    Signal
    """

    hovered: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    triggered: ...
    """
    Signal
    """

    @staticmethod
    def exec_(*args, **kwargs):
        """
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actionAt(self, *args, **kwargs):
        """
        """
        ...

    def actionEvent(self, *args, **kwargs):
        """
        """
        ...

    def actionGeometry(self, *args, **kwargs):
        """
        """
        ...

    def activeAction(self, *args, **kwargs):
        """
        """
        ...

    def addAction(self, action: QAction) -> None:
        """
        """
        ...

    def addMenu(self, *args, **kwargs):
        """
        """
        ...

    def addSeparator(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self) -> None:
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def defaultAction(self, *args, **kwargs):
        """
        """
        ...

    def enterEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def hideTearOffMenu(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def insertMenu(self, *args, **kwargs):
        """
        """
        ...

    def insertSeparator(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isTearOffEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isTearOffMenuVisible(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def leaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def menuAction(self) -> QAction:
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def popup(self, *args, **kwargs):
        """
        """
        ...

    def separatorsCollapsible(self, *args, **kwargs):
        """
        """
        ...

    def setActiveAction(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultAction(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setSeparatorsCollapsible(self, *args, **kwargs):
        """
        """
        ...

    def setTearOffEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setTitle(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def title(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMenuBar(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    highlighted: ...
    """
    Signal
    """

    hovered: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    triggered: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actionAt(self, *args, **kwargs):
        """
        """
        ...

    def actionEvent(self, *args, **kwargs):
        """
        """
        ...

    def actionGeometry(self, *args, **kwargs):
        """
        """
        ...

    def activeAction(self, *args, **kwargs):
        """
        """
        ...

    def addAction(self, *args, **kwargs):
        """
        """
        ...

    @typing.overload
    def addMenu(self, title: typing.Text) -> QMenu:
        ...
    @typing.overload
    def addMenu(self, menu: QMenu) -> QMenu:
        ...
    @typing.overload
    def addMenu(self, icon: QIcon, title: typing.Text) -> QMenu:
        """
        """
        ...

    def addSeparator(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def cornerWidget(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def insertMenu(self, *args, **kwargs):
        """
        """
        ...

    def insertSeparator(self, *args, **kwargs):
        """
        """
        ...

    def isDefaultUp(self, *args, **kwargs):
        """
        """
        ...

    def isNativeMenuBar(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def leaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setActiveAction(self, *args, **kwargs):
        """
        """
        ...

    def setCornerWidget(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultUp(self, *args, **kwargs):
        """
        """
        ...

    def setNativeMenuBar(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMessageBox(QDialog):
    Abort: ... = PySide.QtGui.QMessageBox.StandardButton.Abort
    """
    """

    AcceptRole: ... = PySide.QtGui.QMessageBox.ButtonRole.AcceptRole
    """
    """

    ActionRole: ... = PySide.QtGui.QMessageBox.ButtonRole.ActionRole
    """
    """

    Apply: ... = PySide.QtGui.QMessageBox.StandardButton.Apply
    """
    """

    ApplyRole: ... = PySide.QtGui.QMessageBox.ButtonRole.ApplyRole
    """
    """

    ButtonMask: ... = PySide.QtGui.QMessageBox.StandardButton.ButtonMask
    """
    """

    ButtonRole: ...
    """
    """

    Cancel: ... = PySide.QtGui.QMessageBox.StandardButton.Cancel
    """
    """

    Close: ... = PySide.QtGui.QMessageBox.StandardButton.Close
    """
    """

    Critical: ... = PySide.QtGui.QMessageBox.Icon.Critical
    """
    """

    Default: ... = PySide.QtGui.QMessageBox.StandardButton.Default
    """
    """

    DestructiveRole: ... = PySide.QtGui.QMessageBox.ButtonRole.DestructiveRole
    """
    """

    Discard: ... = PySide.QtGui.QMessageBox.StandardButton.Discard
    """
    """

    Escape: ... = PySide.QtGui.QMessageBox.StandardButton.Escape
    """
    """

    FirstButton: ... = PySide.QtGui.QMessageBox.StandardButton.FirstButton
    """
    """

    FlagMask: ... = PySide.QtGui.QMessageBox.StandardButton.FlagMask
    """
    """

    Help: ... = PySide.QtGui.QMessageBox.StandardButton.Help
    """
    """

    HelpRole: ... = PySide.QtGui.QMessageBox.ButtonRole.HelpRole
    """
    """

    Icon: ...
    """
    """

    Ignore: ... = PySide.QtGui.QMessageBox.StandardButton.Ignore
    """
    """

    Information: ... = PySide.QtGui.QMessageBox.Icon.Information
    """
    """

    InvalidRole: ... = PySide.QtGui.QMessageBox.ButtonRole.InvalidRole
    """
    """

    LastButton: ... = PySide.QtGui.QMessageBox.StandardButton.LastButton
    """
    """

    NRoles: ... = PySide.QtGui.QMessageBox.ButtonRole.NRoles
    """
    """

    No: ... = PySide.QtGui.QMessageBox.StandardButton.No
    """
    """

    NoAll: ... = PySide.QtGui.QMessageBox.StandardButton.NoAll
    """
    """

    NoButton: ... = PySide.QtGui.QMessageBox.StandardButton.NoButton
    """
    """

    NoIcon: ... = PySide.QtGui.QMessageBox.Icon.NoIcon
    """
    """

    NoRole: ... = PySide.QtGui.QMessageBox.ButtonRole.NoRole
    """
    """

    NoToAll: ... = PySide.QtGui.QMessageBox.StandardButton.NoToAll
    """
    """

    Ok: ... = PySide.QtGui.QMessageBox.StandardButton.Ok
    """
    """

    Open: ... = PySide.QtGui.QMessageBox.StandardButton.Open
    """
    """

    Question: ... = PySide.QtGui.QMessageBox.Icon.Question
    """
    """

    RejectRole: ... = PySide.QtGui.QMessageBox.ButtonRole.RejectRole
    """
    """

    Reset: ... = PySide.QtGui.QMessageBox.StandardButton.Reset
    """
    """

    ResetRole: ... = PySide.QtGui.QMessageBox.ButtonRole.ResetRole
    """
    """

    RestoreDefaults: ...
    """
    """

    Retry: ... = PySide.QtGui.QMessageBox.StandardButton.Retry
    """
    """

    Save: ... = PySide.QtGui.QMessageBox.StandardButton.Save
    """
    """

    SaveAll: ... = PySide.QtGui.QMessageBox.StandardButton.SaveAll
    """
    """

    StandardButton: ...
    """
    """

    StandardButtons: ...
    """
    """

    Warning: ... = PySide.QtGui.QMessageBox.Icon.Warning
    """
    """

    Yes: ... = PySide.QtGui.QMessageBox.StandardButton.Yes
    """
    """

    YesAll: ... = PySide.QtGui.QMessageBox.StandardButton.YesAll
    """
    """

    YesRole: ... = PySide.QtGui.QMessageBox.ButtonRole.YesRole
    """
    """

    YesToAll: ... = PySide.QtGui.QMessageBox.StandardButton.YesToAll
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    buttonClicked: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def about(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def aboutQt(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def critical(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def information(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def question(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def warning(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addButton(self, *args, **kwargs):
        """
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def buttonRole(self, *args, **kwargs):
        """
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clickedButton(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def defaultButton(self, *args, **kwargs):
        """
        """
        ...

    def detailedText(self, *args, **kwargs):
        """
        """
        ...

    def escapeButton(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def iconPixmap(self, *args, **kwargs):
        """
        """
        ...

    def informativeText(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def removeButton(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultButton(self, *args, **kwargs):
        """
        """
        ...

    def setDetailedText(self, *args, **kwargs):
        """
        """
        ...

    def setEscapeButton(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setIconPixmap(self, *args, **kwargs):
        """
        """
        ...

    def setInformativeText(self, *args, **kwargs):
        """
        """
        ...

    def setStandardButtons(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextFormat(self, *args, **kwargs):
        """
        """
        ...

    def setWindowModality(self, *args, **kwargs):
        """
        """
        ...

    def setWindowTitle(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def standardButton(self, *args, **kwargs):
        """
        """
        ...

    def standardButtons(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textFormat(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMotifStyle(QCommonStyle):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def pixelMetric(self, *args, **kwargs):
        """
        """
        ...

    def polish(self, *args, **kwargs):
        """
        """
        ...

    def setUseHighlightColors(self, *args, **kwargs):
        """
        """
        ...

    def sizeFromContents(self, *args, **kwargs):
        """
        """
        ...

    def standardIconImplementation(self, *args, **kwargs):
        """
        """
        ...

    def standardPalette(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def subControlRect(self, *args, **kwargs):
        """
        """
        ...

    def subElementRect(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def unpolish(self, *args, **kwargs):
        """
        """
        ...

    def useHighlightColors(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMouseEvent(QInputEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def createExtendedMouseEvent(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def globalPos(self, *args, **kwargs):
        """
        """
        ...

    def globalX(self, *args, **kwargs):
        """
        """
        ...

    def globalY(self, *args, **kwargs):
        """
        """
        ...

    def hasExtendedInfo(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def posF(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMouseEventTransition(PySide.QtCore.QEventTransition):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def eventTest(self, *args, **kwargs):
        """
        """
        ...

    def hitTestPath(self, *args, **kwargs):
        """
        """
        ...

    def modifierMask(self, *args, **kwargs):
        """
        """
        ...

    def onTransition(self, *args, **kwargs):
        """
        """
        ...

    def setButton(self, *args, **kwargs):
        """
        """
        ...

    def setHitTestPath(self, *args, **kwargs):
        """
        """
        ...

    def setModifierMask(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMoveEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def oldPos(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    ...

class QMovie(PySide.QtCore.QObject):
    CacheAll: ... = PySide.QtGui.QMovie.CacheMode.CacheAll
    """
    """

    CacheMode: ...
    """
    """

    CacheNone: ... = PySide.QtGui.QMovie.CacheMode.CacheNone
    """
    """

    MovieState: ...
    """
    """

    NotRunning: ... = PySide.QtGui.QMovie.MovieState.NotRunning
    """
    """

    Paused: ... = PySide.QtGui.QMovie.MovieState.Paused
    """
    """

    Running: ... = PySide.QtGui.QMovie.MovieState.Running
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    error: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    frameChanged: ...
    """
    Signal
    """

    resized: ...
    """
    Signal
    """

    started: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    updated: ...
    """
    Signal
    """

    @staticmethod
    def supportedFormats(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def backgroundColor(self, *args, **kwargs):
        """
        """
        ...

    def cacheMode(self, *args, **kwargs):
        """
        """
        ...

    def currentFrameNumber(self, *args, **kwargs):
        """
        """
        ...

    def currentImage(self, *args, **kwargs):
        """
        """
        ...

    def currentPixmap(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def frameCount(self, *args, **kwargs):
        """
        """
        ...

    def frameRect(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def jumpToFrame(self, *args, **kwargs):
        """
        """
        ...

    def jumpToNextFrame(self, *args, **kwargs):
        """
        """
        ...

    def loopCount(self, *args, **kwargs):
        """
        """
        ...

    def nextFrameDelay(self, *args, **kwargs):
        """
        """
        ...

    def scaledSize(self, *args, **kwargs):
        """
        """
        ...

    def setBackgroundColor(self, *args, **kwargs):
        """
        """
        ...

    def setCacheMode(self, *args, **kwargs):
        """
        """
        ...

    def setDevice(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def setPaused(self, *args, **kwargs):
        """
        """
        ...

    def setScaledSize(self, *args, **kwargs):
        """
        """
        ...

    def setSpeed(self, *args, **kwargs):
        """
        """
        ...

    def speed(self, *args, **kwargs):
        """
        """
        ...

    def start(self, *args, **kwargs):
        """
        """
        ...

    def state(self, *args, **kwargs):
        """
        """
        ...

    def stop(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPageSetupDialog(QAbstractPageSetupDialog):
    DontUseSheet: ...
    """
    """

    None: ... = PySide.QtGui.QPageSetupDialog.PageSetupDialogOption.None
    """
    """

    OwnsPrinter: ...
    """
    """

    PageSetupDialogOption: ...
    """
    """

    PageSetupDialogOptions: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addEnabledOption(self, *args, **kwargs):
        """
        """
        ...

    def enabledOptions(self, *args, **kwargs):
        """
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def isOptionEnabled(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def options(self, *args, **kwargs):
        """
        """
        ...

    def setEnabledOptions(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setOptions(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPaintDevice(Shiboken.Object):
    PaintDeviceMetric: ...
    """
    """

    PdmDepth: ... = PySide.QtGui.QPaintDevice.PaintDeviceMetric.PdmDepth
    """
    """

    PdmDpiX: ... = PySide.QtGui.QPaintDevice.PaintDeviceMetric.PdmDpiX
    """
    """

    PdmDpiY: ... = PySide.QtGui.QPaintDevice.PaintDeviceMetric.PdmDpiY
    """
    """

    PdmHeight: ... = PySide.QtGui.QPaintDevice.PaintDeviceMetric.PdmHeight
    """
    """

    PdmHeightMM: ... = PySide.QtGui.QPaintDevice.PaintDeviceMetric.PdmHeightMM
    """
    """

    PdmNumColors: ...
    """
    """

    PdmPhysicalDpiX: ...
    """
    """

    PdmPhysicalDpiY: ...
    """
    """

    PdmWidth: ... = PySide.QtGui.QPaintDevice.PaintDeviceMetric.PdmWidth
    """
    """

    PdmWidthMM: ... = PySide.QtGui.QPaintDevice.PaintDeviceMetric.PdmWidthMM
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def colorCount(self, *args, **kwargs):
        """
        """
        ...

    def depth(self, *args, **kwargs):
        """
        """
        ...

    def devType(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def heightMM(self, *args, **kwargs):
        """
        """
        ...

    def logicalDpiX(self, *args, **kwargs):
        """
        """
        ...

    def logicalDpiY(self, *args, **kwargs):
        """
        """
        ...

    def metric(self, *args, **kwargs):
        """
        """
        ...

    def numColors(self, *args, **kwargs):
        """
        """
        ...

    def paintEngine(self, *args, **kwargs):
        """
        """
        ...

    def paintingActive(self, *args, **kwargs):
        """
        """
        ...

    def physicalDpiX(self, *args, **kwargs):
        """
        """
        ...

    def physicalDpiY(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def widthMM(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPaintEngine(Shiboken.Object):
    AllDirty: ... = PySide.QtGui.QPaintEngine.DirtyFlag.AllDirty
    """
    """

    AllFeatures: ... = PySide.QtGui.QPaintEngine.PaintEngineFeature.AllFeatures
    """
    """

    AlphaBlend: ... = PySide.QtGui.QPaintEngine.PaintEngineFeature.AlphaBlend
    """
    """

    Antialiasing: ...
    """
    """

    BlendModes: ... = PySide.QtGui.QPaintEngine.PaintEngineFeature.BlendModes
    """
    """

    Blitter: ... = PySide.QtGui.QPaintEngine.Type.Blitter
    """
    """

    BrushStroke: ... = PySide.QtGui.QPaintEngine.PaintEngineFeature.BrushStroke
    """
    """

    ConicalGradientFill: ...
    """
    """

    ConstantOpacity: ...
    """
    """

    ConvexMode: ... = PySide.QtGui.QPaintEngine.PolygonDrawMode.ConvexMode
    """
    """

    CoreGraphics: ... = PySide.QtGui.QPaintEngine.Type.CoreGraphics
    """
    """

    Direct3D: ... = PySide.QtGui.QPaintEngine.Type.Direct3D
    """
    """

    DirtyBackground: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyBackground
    """
    """

    DirtyBackgroundMode: ...
    """
    """

    DirtyBrush: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyBrush
    """
    """

    DirtyBrushOrigin: ...
    """
    """

    DirtyClipEnabled: ...
    """
    """

    DirtyClipPath: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyClipPath
    """
    """

    DirtyClipRegion: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyClipRegion
    """
    """

    DirtyCompositionMode: ...
    """
    """

    DirtyFlag: ...
    """
    """

    DirtyFlags: ...
    """
    """

    DirtyFont: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyFont
    """
    """

    DirtyHints: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyHints
    """
    """

    DirtyOpacity: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyOpacity
    """
    """

    DirtyPen: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyPen
    """
    """

    DirtyTransform: ... = PySide.QtGui.QPaintEngine.DirtyFlag.DirtyTransform
    """
    """

    LinearGradientFill: ...
    """
    """

    MacPrinter: ... = PySide.QtGui.QPaintEngine.Type.MacPrinter
    """
    """

    MaskedBrush: ... = PySide.QtGui.QPaintEngine.PaintEngineFeature.MaskedBrush
    """
    """

    MaxUser: ... = PySide.QtGui.QPaintEngine.Type.MaxUser
    """
    """

    ObjectBoundingModeGradients: ...
    """
    """

    OddEvenMode: ... = PySide.QtGui.QPaintEngine.PolygonDrawMode.OddEvenMode
    """
    """

    OpenGL: ... = PySide.QtGui.QPaintEngine.Type.OpenGL
    """
    """

    OpenGL2: ... = PySide.QtGui.QPaintEngine.Type.OpenGL2
    """
    """

    OpenVG: ... = PySide.QtGui.QPaintEngine.Type.OpenVG
    """
    """

    PaintBuffer: ... = PySide.QtGui.QPaintEngine.Type.PaintBuffer
    """
    """

    PaintEngineFeature: ...
    """
    """

    PaintEngineFeatures: ...
    """
    """

    PaintOutsidePaintEvent: ...
    """
    """

    PainterPaths: ...
    """
    """

    PatternBrush: ...
    """
    """

    PatternTransform: ...
    """
    """

    Pdf: ... = PySide.QtGui.QPaintEngine.Type.Pdf
    """
    """

    PerspectiveTransform: ...
    """
    """

    Picture: ... = PySide.QtGui.QPaintEngine.Type.Picture
    """
    """

    PixmapTransform: ...
    """
    """

    PolygonDrawMode: ...
    """
    """

    PolylineMode: ... = PySide.QtGui.QPaintEngine.PolygonDrawMode.PolylineMode
    """
    """

    PorterDuff: ... = PySide.QtGui.QPaintEngine.PaintEngineFeature.PorterDuff
    """
    """

    PostScript: ... = PySide.QtGui.QPaintEngine.Type.PostScript
    """
    """

    PrimitiveTransform: ...
    """
    """

    QWindowSystem: ... = PySide.QtGui.QPaintEngine.Type.QWindowSystem
    """
    """

    QuickDraw: ... = PySide.QtGui.QPaintEngine.Type.QuickDraw
    """
    """

    RadialGradientFill: ...
    """
    """

    Raster: ... = PySide.QtGui.QPaintEngine.Type.Raster
    """
    """

    RasterOpModes: ...
    """
    """

    SVG: ... = PySide.QtGui.QPaintEngine.Type.SVG
    """
    """

    Type: ...
    """
    """

    User: ... = PySide.QtGui.QPaintEngine.Type.User
    """
    """

    WindingMode: ... = PySide.QtGui.QPaintEngine.PolygonDrawMode.WindingMode
    """
    """

    Windows: ... = PySide.QtGui.QPaintEngine.Type.Windows
    """
    """

    X11: ... = PySide.QtGui.QPaintEngine.Type.X11
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def begin(self, *args, **kwargs):
        """
        """
        ...

    def clearDirty(self, *args, **kwargs):
        """
        """
        ...

    def coordinateOffset(self, *args, **kwargs):
        """
        """
        ...

    def drawEllipse(self, *args, **kwargs):
        """
        """
        ...

    def drawImage(self, *args, **kwargs):
        """
        """
        ...

    def drawLines(self, *args, **kwargs):
        """
        """
        ...

    def drawPath(self, *args, **kwargs):
        """
        """
        ...

    def drawPixmap(self, *args, **kwargs):
        """
        """
        ...

    def drawPoints(self, *args, **kwargs):
        """
        """
        ...

    def drawPolygon(self, *args, **kwargs):
        """
        """
        ...

    def drawRects(self, *args, **kwargs):
        """
        """
        ...

    def drawTextItem(self, *args, **kwargs):
        """
        """
        ...

    def drawTiledPixmap(self, *args, **kwargs):
        """
        """
        ...

    def end(self, *args, **kwargs):
        """
        """
        ...

    def hasFeature(self, *args, **kwargs):
        """
        """
        ...

    def isActive(self, *args, **kwargs):
        """
        """
        ...

    def isExtended(self, *args, **kwargs):
        """
        """
        ...

    def paintDevice(self, *args, **kwargs):
        """
        """
        ...

    def painter(self, *args, **kwargs):
        """
        """
        ...

    def setActive(self, *args, **kwargs):
        """
        """
        ...

    def setDirty(self, *args, **kwargs):
        """
        """
        ...

    def setSystemClip(self, *args, **kwargs):
        """
        """
        ...

    def setSystemRect(self, *args, **kwargs):
        """
        """
        ...

    def syncState(self, *args, **kwargs):
        """
        """
        ...

    def systemClip(self, *args, **kwargs):
        """
        """
        ...

    def systemRect(self, *args, **kwargs):
        """
        """
        ...

    def testDirty(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def updateState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPaintEngineState(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def backgroundBrush(self, *args, **kwargs):
        """
        """
        ...

    def backgroundMode(self, *args, **kwargs):
        """
        """
        ...

    def brush(self, *args, **kwargs):
        """
        """
        ...

    def brushNeedsResolving(self, *args, **kwargs):
        """
        """
        ...

    def brushOrigin(self, *args, **kwargs):
        """
        """
        ...

    def clipOperation(self, *args, **kwargs):
        """
        """
        ...

    def clipPath(self, *args, **kwargs):
        """
        """
        ...

    def clipRegion(self, *args, **kwargs):
        """
        """
        ...

    def compositionMode(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def isClipEnabled(self, *args, **kwargs):
        """
        """
        ...

    def matrix(self, *args, **kwargs):
        """
        """
        ...

    def opacity(self, *args, **kwargs):
        """
        """
        ...

    def painter(self, *args, **kwargs):
        """
        """
        ...

    def pen(self, *args, **kwargs):
        """
        """
        ...

    def penNeedsResolving(self, *args, **kwargs):
        """
        """
        ...

    def renderHints(self, *args, **kwargs):
        """
        """
        ...

    def state(self, *args, **kwargs):
        """
        """
        ...

    def transform(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPaintEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def region(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPainter(Shiboken.Object):
    Antialiasing: ... = PySide.QtGui.QPainter.RenderHint.Antialiasing
    """
    """

    CompositionMode: ...
    """
    """

    CompositionMode_Clear: ...
    """
    """

    CompositionMode_ColorBurn: ...
    """
    """

    CompositionMode_ColorDodge: ...
    """
    """

    CompositionMode_Darken: ...
    """
    """

    CompositionMode_Destination: ...
    """
    """

    CompositionMode_DestinationAtop: ...
    """
    """

    CompositionMode_DestinationIn: ...
    """
    """

    CompositionMode_DestinationOut: ...
    """
    """

    CompositionMode_DestinationOver: ...
    """
    """

    CompositionMode_Difference: ...
    """
    """

    CompositionMode_Exclusion: ...
    """
    """

    CompositionMode_HardLight: ...
    """
    """

    CompositionMode_Lighten: ...
    """
    """

    CompositionMode_Multiply: ...
    """
    """

    CompositionMode_Overlay: ...
    """
    """

    CompositionMode_Plus: ...
    """
    """

    CompositionMode_Screen: ...
    """
    """

    CompositionMode_SoftLight: ...
    """
    """

    CompositionMode_Source: ...
    """
    """

    CompositionMode_SourceAtop: ...
    """
    """

    CompositionMode_SourceIn: ...
    """
    """

    CompositionMode_SourceOut: ...
    """
    """

    CompositionMode_SourceOver: ...
    """
    """

    CompositionMode_Xor: ...
    """
    """

    HighQualityAntialiasing: ...
    """
    """

    NonCosmeticDefaultPen: ...
    """
    """

    OpaqueHint: ... = PySide.QtGui.QPainter.PixmapFragmentHint.OpaqueHint
    """
    """

    PixmapFragment: ...
    """
    """

    PixmapFragmentHint: ...
    """
    """

    PixmapFragmentHints: ...
    """
    """

    RasterOp_NotSource: ...
    """
    """

    RasterOp_NotSourceAndDestination: ...
    """
    """

    RasterOp_NotSourceAndNotDestination: ...
    """
    """

    RasterOp_NotSourceOrNotDestination: ...
    """
    """

    RasterOp_NotSourceXorDestination: ...
    """
    """

    RasterOp_SourceAndDestination: ...
    """
    """

    RasterOp_SourceAndNotDestination: ...
    """
    """

    RasterOp_SourceOrDestination: ...
    """
    """

    RasterOp_SourceXorDestination: ...
    """
    """

    RenderHint: ...
    """
    """

    RenderHints: ...
    """
    """

    SmoothPixmapTransform: ...
    """
    """

    TextAntialiasing: ... = PySide.QtGui.QPainter.RenderHint.TextAntialiasing
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def restoreRedirected(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setRedirected(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def backgroundMode(self, *args, **kwargs):
        """
        """
        ...

    def begin(self, *args, **kwargs):
        """
        """
        ...

    def beginNativePainting(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def brush(self, *args, **kwargs):
        """
        """
        ...

    def brushOrigin(self, *args, **kwargs):
        """
        """
        ...

    def clipBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def clipPath(self, *args, **kwargs):
        """
        """
        ...

    def clipRegion(self, *args, **kwargs):
        """
        """
        ...

    def combinedMatrix(self, *args, **kwargs):
        """
        """
        ...

    def combinedTransform(self, *args, **kwargs):
        """
        """
        ...

    def compositionMode(self, *args, **kwargs):
        """
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def deviceMatrix(self, *args, **kwargs):
        """
        """
        ...

    def deviceTransform(self, *args, **kwargs):
        """
        """
        ...

    def drawArc(self, *args, **kwargs):
        """
        """
        ...

    def drawChord(self, *args, **kwargs):
        """
        """
        ...

    def drawConvexPolygon(self, *args, **kwargs):
        """
        """
        ...

    def drawEllipse(self, *args, **kwargs):
        """
        """
        ...

    def drawImage(self, *args, **kwargs):
        """
        """
        ...

    def drawLine(self, *args, **kwargs):
        """
        """
        ...

    def drawLines(self, *args, **kwargs):
        """
        """
        ...

    def drawPath(self, *args, **kwargs):
        """
        """
        ...

    def drawPicture(self, *args, **kwargs):
        """
        """
        ...

    def drawPie(self, *args, **kwargs):
        """
        """
        ...

    def drawPixmap(self, *args, **kwargs):
        """
        """
        ...

    def drawPixmapFragments(self, *args, **kwargs):
        """
        """
        ...

    def drawPoint(self, *args, **kwargs):
        """
        """
        ...

    def drawPoints(self, *args, **kwargs):
        """
        """
        ...

    def drawPolygon(self, *args, **kwargs):
        """
        """
        ...

    def drawPolyline(self, *args, **kwargs):
        """
        """
        ...

    def drawRect(self, *args, **kwargs):
        """
        """
        ...

    def drawRects(self, *args, **kwargs):
        """
        """
        ...

    def drawRoundRect(self, *args, **kwargs):
        """
        """
        ...

    def drawRoundedRect(self, *args, **kwargs):
        """
        """
        ...

    def drawText(self, *args, **kwargs):
        """
        """
        ...

    def drawTextItem(self, *args, **kwargs):
        """
        """
        ...

    def drawTiledPixmap(self, *args, **kwargs):
        """
        """
        ...

    def end(self, *args, **kwargs):
        """
        """
        ...

    def endNativePainting(self, *args, **kwargs):
        """
        """
        ...

    def eraseRect(self, *args, **kwargs):
        """
        """
        ...

    def fillPath(self, *args, **kwargs):
        """
        """
        ...

    def fillRect(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def fontInfo(self, *args, **kwargs):
        """
        """
        ...

    def fontMetrics(self, *args, **kwargs):
        """
        """
        ...

    def hasClipping(self, *args, **kwargs):
        """
        """
        ...

    def initFrom(self, *args, **kwargs):
        """
        """
        ...

    def isActive(self, *args, **kwargs):
        """
        """
        ...

    def layoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def opacity(self, *args, **kwargs):
        """
        """
        ...

    def paintEngine(self, *args, **kwargs):
        """
        """
        ...

    def pen(self, *args, **kwargs):
        """
        """
        ...

    def renderHints(self, *args, **kwargs):
        """
        """
        ...

    def resetMatrix(self, *args, **kwargs):
        """
        """
        ...

    def resetTransform(self, *args, **kwargs):
        """
        """
        ...

    def restore(self, *args, **kwargs):
        """
        """
        ...

    def rotate(self, *args, **kwargs):
        """
        """
        ...

    def save(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setBackgroundMode(self, *args, **kwargs):
        """
        """
        ...

    def setBrush(self, *args, **kwargs):
        """
        """
        ...

    def setBrushOrigin(self, *args, **kwargs):
        """
        """
        ...

    def setClipPath(self, *args, **kwargs):
        """
        """
        ...

    def setClipRect(self, *args, **kwargs):
        """
        """
        ...

    def setClipRegion(self, *args, **kwargs):
        """
        """
        ...

    def setClipping(self, *args, **kwargs):
        """
        """
        ...

    def setCompositionMode(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setLayoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def setOpacity(self, *args, **kwargs):
        """
        """
        ...

    def setPen(self, *args, **kwargs):
        """
        """
        ...

    def setRenderHint(self, *args, **kwargs):
        """
        """
        ...

    def setRenderHints(self, *args, **kwargs):
        """
        """
        ...

    def setTransform(self, *args, **kwargs):
        """
        """
        ...

    def setViewTransformEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setViewport(self, *args, **kwargs):
        """
        """
        ...

    def setWindow(self, *args, **kwargs):
        """
        """
        ...

    def setWorldMatrix(self, *args, **kwargs):
        """
        """
        ...

    def setWorldMatrixEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setWorldTransform(self, *args, **kwargs):
        """
        """
        ...

    def shear(self, *args, **kwargs):
        """
        """
        ...

    def strokePath(self, *args, **kwargs):
        """
        """
        ...

    def testRenderHint(self, *args, **kwargs):
        """
        """
        ...

    def transform(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def viewTransformEnabled(self, *args, **kwargs):
        """
        """
        ...

    def viewport(self, *args, **kwargs):
        """
        """
        ...

    def window(self, *args, **kwargs):
        """
        """
        ...

    def worldMatrix(self, *args, **kwargs):
        """
        """
        ...

    def worldMatrixEnabled(self, *args, **kwargs):
        """
        """
        ...

    def worldTransform(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPainterPath(Shiboken.Object):
    CurveToDataElement: ...
    """
    """

    CurveToElement: ... = PySide.QtGui.QPainterPath.ElementType.CurveToElement
    """
    """

    Element: ...
    """
    """

    ElementType: ...
    """
    """

    LineToElement: ... = PySide.QtGui.QPainterPath.ElementType.LineToElement
    """
    """

    MoveToElement: ... = PySide.QtGui.QPainterPath.ElementType.MoveToElement
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __iand__(self, *args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def addEllipse(self, *args, **kwargs):
        """
        """
        ...

    def addPath(self, *args, **kwargs):
        """
        """
        ...

    def addPolygon(self, *args, **kwargs):
        """
        """
        ...

    def addRect(self, *args, **kwargs):
        """
        """
        ...

    def addRegion(self, *args, **kwargs):
        """
        """
        ...

    def addRoundRect(self, *args, **kwargs):
        """
        """
        ...

    def addRoundedRect(self, *args, **kwargs):
        """
        """
        ...

    def addText(self, *args, **kwargs):
        """
        """
        ...

    def angleAtPercent(self, *args, **kwargs):
        """
        """
        ...

    def arcMoveTo(self, *args, **kwargs):
        """
        """
        ...

    def arcTo(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def closeSubpath(self, *args, **kwargs):
        """
        """
        ...

    def connectPath(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def controlPointRect(self, *args, **kwargs):
        """
        """
        ...

    def cubicTo(self, *args, **kwargs):
        """
        """
        ...

    def currentPosition(self, *args, **kwargs):
        """
        """
        ...

    def elementAt(self, *args, **kwargs):
        """
        """
        ...

    def elementCount(self, *args, **kwargs):
        """
        """
        ...

    def fillRule(self, *args, **kwargs):
        """
        """
        ...

    def intersected(self, *args, **kwargs):
        """
        """
        ...

    def intersects(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def lineTo(self, *args, **kwargs):
        """
        """
        ...

    def moveTo(self, *args, **kwargs):
        """
        """
        ...

    def percentAtLength(self, *args, **kwargs):
        """
        """
        ...

    def pointAtPercent(self, *args, **kwargs):
        """
        """
        ...

    def quadTo(self, *args, **kwargs):
        """
        """
        ...

    def setElementPositionAt(self, *args, **kwargs):
        """
        """
        ...

    def setFillRule(self, *args, **kwargs):
        """
        """
        ...

    def simplified(self, *args, **kwargs):
        """
        """
        ...

    def slopeAtPercent(self, *args, **kwargs):
        """
        """
        ...

    def subtracted(self, *args, **kwargs):
        """
        """
        ...

    def subtractedInverted(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def toFillPolygon(self, *args, **kwargs):
        """
        """
        ...

    def toFillPolygons(self, *args, **kwargs):
        """
        """
        ...

    def toReversed(self, *args, **kwargs):
        """
        """
        ...

    def toSubpathPolygons(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def united(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPainterPathStroker(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def capStyle(self, *args, **kwargs):
        """
        """
        ...

    def createStroke(self, *args, **kwargs):
        """
        """
        ...

    def curveThreshold(self, *args, **kwargs):
        """
        """
        ...

    def dashOffset(self, *args, **kwargs):
        """
        """
        ...

    def dashPattern(self, *args, **kwargs):
        """
        """
        ...

    def joinStyle(self, *args, **kwargs):
        """
        """
        ...

    def miterLimit(self, *args, **kwargs):
        """
        """
        ...

    def setCapStyle(self, *args, **kwargs):
        """
        """
        ...

    def setCurveThreshold(self, *args, **kwargs):
        """
        """
        ...

    def setDashOffset(self, *args, **kwargs):
        """
        """
        ...

    def setDashPattern(self, *args, **kwargs):
        """
        """
        ...

    def setJoinStyle(self, *args, **kwargs):
        """
        """
        ...

    def setMiterLimit(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPalette(Shiboken.Object):
    Active: ... = PySide.QtGui.QPalette.ColorGroup.Active
    """
    """

    All: ... = PySide.QtGui.QPalette.ColorGroup.All
    """
    """

    AlternateBase: ... = PySide.QtGui.QPalette.ColorRole.AlternateBase
    """
    """

    Background: ... = PySide.QtGui.QPalette.ColorRole.Background
    """
    """

    Base: ... = PySide.QtGui.QPalette.ColorRole.Base
    """
    """

    BrightText: ... = PySide.QtGui.QPalette.ColorRole.BrightText
    """
    """

    Button: ... = PySide.QtGui.QPalette.ColorRole.Button
    """
    """

    ButtonText: ... = PySide.QtGui.QPalette.ColorRole.ButtonText
    """
    """

    ColorGroup: ...
    """
    """

    ColorRole: ...
    """
    """

    Current: ... = PySide.QtGui.QPalette.ColorGroup.Current
    """
    """

    Dark: ... = PySide.QtGui.QPalette.ColorRole.Dark
    """
    """

    Disabled: ... = PySide.QtGui.QPalette.ColorGroup.Disabled
    """
    """

    Foreground: ... = PySide.QtGui.QPalette.ColorRole.Foreground
    """
    """

    Highlight: ... = PySide.QtGui.QPalette.ColorRole.Highlight
    """
    """

    HighlightedText: ... = PySide.QtGui.QPalette.ColorRole.HighlightedText
    """
    """

    Inactive: ... = PySide.QtGui.QPalette.ColorGroup.Inactive
    """
    """

    Light: ... = PySide.QtGui.QPalette.ColorRole.Light
    """
    """

    Link: ... = PySide.QtGui.QPalette.ColorRole.Link
    """
    """

    LinkVisited: ... = PySide.QtGui.QPalette.ColorRole.LinkVisited
    """
    """

    Mid: ... = PySide.QtGui.QPalette.ColorRole.Mid
    """
    """

    Midlight: ... = PySide.QtGui.QPalette.ColorRole.Midlight
    """
    """

    NColorGroups: ... = PySide.QtGui.QPalette.ColorGroup.NColorGroups
    """
    """

    NColorRoles: ... = PySide.QtGui.QPalette.ColorRole.NColorRoles
    """
    """

    NoRole: ... = PySide.QtGui.QPalette.ColorRole.NoRole
    """
    """

    Normal: ... = PySide.QtGui.QPalette.ColorGroup.Normal
    """
    """

    Shadow: ... = PySide.QtGui.QPalette.ColorRole.Shadow
    """
    """

    Text: ... = PySide.QtGui.QPalette.ColorRole.Text
    """
    """

    ToolTipBase: ... = PySide.QtGui.QPalette.ColorRole.ToolTipBase
    """
    """

    ToolTipText: ... = PySide.QtGui.QPalette.ColorRole.ToolTipText
    """
    """

    Window: ... = PySide.QtGui.QPalette.ColorRole.Window
    """
    """

    WindowText: ... = PySide.QtGui.QPalette.ColorRole.WindowText
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def alternateBase(self, *args, **kwargs):
        """
        """
        ...

    def base(self, *args, **kwargs):
        """
        """
        ...

    def brightText(self, *args, **kwargs):
        """
        """
        ...

    def brush(self, *args, **kwargs):
        """
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def buttonText(self, *args, **kwargs):
        """
        """
        ...

    def cacheKey(self, *args, **kwargs):
        """
        """
        ...

    def color(self, *args, **kwargs):
        """
        """
        ...

    def currentColorGroup(self, *args, **kwargs):
        """
        """
        ...

    def dark(self, *args, **kwargs):
        """
        """
        ...

    def highlight(self, *args, **kwargs):
        """
        """
        ...

    def highlightedText(self, *args, **kwargs):
        """
        """
        ...

    def isBrushSet(self, *args, **kwargs):
        """
        """
        ...

    def isCopyOf(self, *args, **kwargs):
        """
        """
        ...

    def isEqual(self, *args, **kwargs):
        """
        """
        ...

    def light(self, *args, **kwargs):
        """
        """
        ...

    def link(self, *args, **kwargs):
        """
        """
        ...

    def linkVisited(self, *args, **kwargs):
        """
        """
        ...

    def mid(self, *args, **kwargs):
        """
        """
        ...

    def midlight(self, *args, **kwargs):
        """
        """
        ...

    def resolve(self, *args, **kwargs):
        """
        """
        ...

    def setBrush(self, *args, **kwargs):
        """
        """
        ...

    def setColor(self, *args, **kwargs):
        """
        """
        ...

    def setColorGroup(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentColorGroup(self, *args, **kwargs):
        """
        """
        ...

    def shadow(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def toolTipBase(self, *args, **kwargs):
        """
        """
        ...

    def toolTipText(self, *args, **kwargs):
        """
        """
        ...

    def window(self, *args, **kwargs):
        """
        """
        ...

    def windowText(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPanGesture(QGesture):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def acceleration(self, *args, **kwargs):
        """
        """
        ...

    def delta(self, *args, **kwargs):
        """
        """
        ...

    def lastOffset(self, *args, **kwargs):
        """
        """
        ...

    def offset(self, *args, **kwargs):
        """
        """
        ...

    def setAcceleration(self, *args, **kwargs):
        """
        """
        ...

    def setLastOffset(self, *args, **kwargs):
        """
        """
        ...

    def setOffset(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPen(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def brush(self, *args, **kwargs):
        """
        """
        ...

    def capStyle(self, *args, **kwargs):
        """
        """
        ...

    def color(self, *args, **kwargs):
        """
        """
        ...

    def dashOffset(self, *args, **kwargs):
        """
        """
        ...

    def dashPattern(self, *args, **kwargs):
        """
        """
        ...

    def isCosmetic(self, *args, **kwargs):
        """
        """
        ...

    def isSolid(self, *args, **kwargs):
        """
        """
        ...

    def joinStyle(self, *args, **kwargs):
        """
        """
        ...

    def miterLimit(self, *args, **kwargs):
        """
        """
        ...

    def setBrush(self, *args, **kwargs):
        """
        """
        ...

    def setCapStyle(self, *args, **kwargs):
        """
        """
        ...

    def setColor(self, *args, **kwargs):
        """
        """
        ...

    def setCosmetic(self, *args, **kwargs):
        """
        """
        ...

    def setDashOffset(self, *args, **kwargs):
        """
        """
        ...

    def setDashPattern(self, *args, **kwargs):
        """
        """
        ...

    def setJoinStyle(self, *args, **kwargs):
        """
        """
        ...

    def setMiterLimit(self, *args, **kwargs):
        """
        """
        ...

    def setStyle(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def setWidthF(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def widthF(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPicture(QPaintDevice):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def devType(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def load(self, *args, **kwargs):
        """
        """
        ...

    def metric(self, *args, **kwargs):
        """
        """
        ...

    def paintEngine(self, *args, **kwargs):
        """
        """
        ...

    def play(self, *args, **kwargs):
        """
        """
        ...

    def save(self, *args, **kwargs):
        """
        """
        ...

    def setBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPictureIO(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def inputFormats(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def outputFormats(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def pictureFormat(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def description(self, *args, **kwargs):
        """
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def gamma(self, *args, **kwargs):
        """
        """
        ...

    def ioDevice(self, *args, **kwargs):
        """
        """
        ...

    def parameters(self, *args, **kwargs):
        """
        """
        ...

    def picture(self, *args, **kwargs):
        """
        """
        ...

    def quality(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def setDescription(self, *args, **kwargs):
        """
        """
        ...

    def setFileName(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def setGamma(self, *args, **kwargs):
        """
        """
        ...

    def setIODevice(self, *args, **kwargs):
        """
        """
        ...

    def setParameters(self, *args, **kwargs):
        """
        """
        ...

    def setPicture(self, *args, **kwargs):
        """
        """
        ...

    def setQuality(self, *args, **kwargs):
        """
        """
        ...

    def setStatus(self, *args, **kwargs):
        """
        """
        ...

    def status(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPinchGesture(QGesture):
    CenterPointChanged: ...
    """
    """

    ChangeFlag: ...
    """
    """

    ChangeFlags: ...
    """
    """

    RotationAngleChanged: ...
    """
    """

    ScaleFactorChanged: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def centerPoint(self, *args, **kwargs):
        """
        """
        ...

    def changeFlags(self, *args, **kwargs):
        """
        """
        ...

    def lastCenterPoint(self, *args, **kwargs):
        """
        """
        ...

    def lastRotationAngle(self, *args, **kwargs):
        """
        """
        ...

    def lastScaleFactor(self, *args, **kwargs):
        """
        """
        ...

    def rotationAngle(self, *args, **kwargs):
        """
        """
        ...

    def scaleFactor(self, *args, **kwargs):
        """
        """
        ...

    def setCenterPoint(self, *args, **kwargs):
        """
        """
        ...

    def setChangeFlags(self, *args, **kwargs):
        """
        """
        ...

    def setLastCenterPoint(self, *args, **kwargs):
        """
        """
        ...

    def setLastRotationAngle(self, *args, **kwargs):
        """
        """
        ...

    def setLastScaleFactor(self, *args, **kwargs):
        """
        """
        ...

    def setRotationAngle(self, *args, **kwargs):
        """
        """
        ...

    def setScaleFactor(self, *args, **kwargs):
        """
        """
        ...

    def setStartCenterPoint(self, *args, **kwargs):
        """
        """
        ...

    def setTotalChangeFlags(self, *args, **kwargs):
        """
        """
        ...

    def setTotalRotationAngle(self, *args, **kwargs):
        """
        """
        ...

    def setTotalScaleFactor(self, *args, **kwargs):
        """
        """
        ...

    def startCenterPoint(self, *args, **kwargs):
        """
        """
        ...

    def totalChangeFlags(self, *args, **kwargs):
        """
        """
        ...

    def totalRotationAngle(self, *args, **kwargs):
        """
        """
        ...

    def totalScaleFactor(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPixmap(QPaintDevice):
    Alpha: ... = PySide.QtGui.QPixmap.HBitmapFormat.Alpha
    """
    """

    HBitmapFormat: ...
    """
    """

    NoAlpha: ... = PySide.QtGui.QPixmap.HBitmapFormat.NoAlpha
    """
    """

    PremultipliedAlpha: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def defaultDepth(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromImage(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromImageReader(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def grabWidget(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def grabWindow(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def trueMatrix(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def alphaChannel(self, *args, **kwargs):
        """
        """
        ...

    def cacheKey(self, *args, **kwargs):
        """
        """
        ...

    def convertFromImage(self, *args, **kwargs):
        """
        """
        ...

    def copy(self, *args, **kwargs):
        """
        """
        ...

    def createHeuristicMask(self, *args, **kwargs):
        """
        """
        ...

    def createMaskFromColor(self, *args, **kwargs):
        """
        """
        ...

    def depth(self, *args, **kwargs):
        """
        """
        ...

    def devType(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def hasAlpha(self, *args, **kwargs):
        """
        """
        ...

    def hasAlphaChannel(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def isQBitmap(self, *args, **kwargs):
        """
        """
        ...

    def load(self, *args, **kwargs):
        """
        """
        ...

    def loadFromData(self, *args, **kwargs):
        """
        """
        ...

    def mask(self, *args, **kwargs):
        """
        """
        ...

    def metric(self, *args, **kwargs):
        """
        """
        ...

    def paintEngine(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def save(self, *args, **kwargs):
        """
        """
        ...

    def scaled(self, *args, **kwargs):
        """
        """
        ...

    def scaledToHeight(self, *args, **kwargs):
        """
        """
        ...

    def scaledToWidth(self, *args, **kwargs):
        """
        """
        ...

    def scroll(self, *args, **kwargs):
        """
        """
        ...

    def setAlphaChannel(self, *args, **kwargs):
        """
        """
        ...

    def setMask(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def toImage(self, *args, **kwargs):
        """
        """
        ...

    def transformed(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPixmapCache(Shiboken.Object):
    Key: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def cacheLimit(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def clear(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def find(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def insert(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def remove(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def replace(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setCacheLimit(*args, **kwargs):
        """
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QPlainTextDocumentLayout(QAbstractTextDocumentLayout):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def blockBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def cursorWidth(self, *args, **kwargs):
        """
        """
        ...

    def documentChanged(self, *args, **kwargs):
        """
        """
        ...

    def documentSize(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def ensureBlockLayout(self, *args, **kwargs):
        """
        """
        ...

    def frameBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def hitTest(self, *args, **kwargs):
        """
        """
        ...

    def pageCount(self, *args, **kwargs):
        """
        """
        ...

    def requestUpdate(self, *args, **kwargs):
        """
        """
        ...

    def setCursorWidth(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPlainTextEdit(QAbstractScrollArea):
    LineWrapMode: ...
    """
    """

    NoWrap: ... = PySide.QtGui.QPlainTextEdit.LineWrapMode.NoWrap
    """
    """

    WidgetWidth: ... = PySide.QtGui.QPlainTextEdit.LineWrapMode.WidgetWidth
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    blockCountChanged: ...
    """
    Signal
    """

    copyAvailable: ...
    """
    Signal
    """

    cursorPositionChanged: ...
    """
    Signal
    """

    modificationChanged: ...
    """
    Signal
    """

    redoAvailable: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    textChanged: ...
    """
    Signal
    """

    undoAvailable: ...
    """
    Signal
    """

    updateRequest: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def anchorAt(self, *args, **kwargs):
        """
        """
        ...

    def appendHtml(self, *args, **kwargs):
        """
        """
        ...

    def appendPlainText(self, *args, **kwargs):
        """
        """
        ...

    def backgroundVisible(self, *args, **kwargs):
        """
        """
        ...

    def blockBoundingGeometry(self, *args, **kwargs):
        """
        """
        ...

    def blockBoundingRect(self, *args, **kwargs):
        """
        """
        ...

    def blockCount(self, *args, **kwargs):
        """
        """
        ...

    def canInsertFromMimeData(self, *args, **kwargs):
        """
        """
        ...

    def canPaste(self, *args, **kwargs):
        """
        """
        ...

    def centerCursor(self, *args, **kwargs):
        """
        """
        ...

    def centerOnScroll(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def contentOffset(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def copy(self, *args, **kwargs):
        """
        """
        ...

    def createMimeDataFromSelection(self, *args, **kwargs):
        """
        """
        ...

    def createStandardContextMenu(self, *args, **kwargs):
        """
        """
        ...

    def currentCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def cursorForPosition(self, *args, **kwargs):
        """
        """
        ...

    def cursorRect(self, *args, **kwargs):
        """
        """
        ...

    def cursorWidth(self, *args, **kwargs):
        """
        """
        ...

    def cut(self, *args, **kwargs):
        """
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def documentTitle(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def ensureCursorVisible(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def extraSelections(self, *args, **kwargs):
        """
        """
        ...

    def find(self, *args, **kwargs):
        """
        """
        ...

    def firstVisibleBlock(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def getPaintContext(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def insertFromMimeData(self, *args, **kwargs):
        """
        """
        ...

    def insertPlainText(self, *args, **kwargs):
        """
        """
        ...

    def isReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def isUndoRedoEnabled(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def lineWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def loadResource(self, *args, **kwargs):
        """
        """
        ...

    def maximumBlockCount(self, *args, **kwargs):
        """
        """
        ...

    def mergeCurrentCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def overwriteMode(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def paste(self, *args, **kwargs):
        """
        """
        ...

    def print_(self, *args, **kwargs):
        """
        """
        ...

    def redo(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def selectAll(self, *args, **kwargs):
        """
        """
        ...

    def setBackgroundVisible(self, *args, **kwargs):
        """
        """
        ...

    def setCenterOnScroll(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def setCursorWidth(self, *args, **kwargs):
        """
        """
        ...

    def setDocument(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentTitle(self, *args, **kwargs):
        """
        """
        ...

    def setExtraSelections(self, *args, **kwargs):
        """
        """
        ...

    def setLineWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumBlockCount(self, *args, **kwargs):
        """
        """
        ...

    def setOverwriteMode(self, *args, **kwargs):
        """
        """
        ...

    def setPlainText(self, *args, **kwargs):
        """
        """
        ...

    def setReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def setTabChangesFocus(self, *args, **kwargs):
        """
        """
        ...

    def setTabStopWidth(self, *args, **kwargs):
        """
        """
        ...

    def setTextCursor(self, *args, **kwargs):
        """
        """
        ...

    def setTextInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def setUndoRedoEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setWordWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def tabChangesFocus(self, *args, **kwargs):
        """
        """
        ...

    def tabStopWidth(self, *args, **kwargs):
        """
        """
        ...

    def textCursor(self, *args, **kwargs):
        """
        """
        ...

    def textInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def toPlainText(self ) -> Str:
        """
        """
        ...

    def undo(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def wordWrapMode(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPlastiqueStyle(QWindowsStyle):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def hitTestComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def layoutSpacingImplementation(self, *args, **kwargs):
        """
        """
        ...

    def pixelMetric(self, *args, **kwargs):
        """
        """
        ...

    def polish(self, *args, **kwargs):
        """
        """
        ...

    def sizeFromContents(self, *args, **kwargs):
        """
        """
        ...

    def standardIconImplementation(self, *args, **kwargs):
        """
        """
        ...

    def standardPalette(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def subControlRect(self, *args, **kwargs):
        """
        """
        ...

    def subElementRect(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def unpolish(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPolygon(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromList(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...

    def append(self, *args, **kwargs):
        """
        """
        ...

    def at(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def capacity(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def constData(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def containsPoint(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def empty(self, *args, **kwargs):
        """
        """
        ...

    def endsWith(self, *args, **kwargs):
        """
        """
        ...

    def erase(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def first(self, *args, **kwargs):
        """
        """
        ...

    def front(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def insert(self, *args, **kwargs):
        """
        """
        ...

    def intersected(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isSharedWith(self, *args, **kwargs):
        """
        """
        ...

    def last(self, *args, **kwargs):
        """
        """
        ...

    def lastIndexOf(self, *args, **kwargs):
        """
        """
        ...

    def mid(self, *args, **kwargs):
        """
        """
        ...

    def pop_back(self, *args, **kwargs):
        """
        """
        ...

    def pop_front(self, *args, **kwargs):
        """
        """
        ...

    def prepend(self, *args, **kwargs):
        """
        """
        ...

    def push_back(self, *args, **kwargs):
        """
        """
        ...

    def push_front(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def replace(self, *args, **kwargs):
        """
        """
        ...

    def reserve(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def setSharable(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def squeeze(self, *args, **kwargs):
        """
        """
        ...

    def startsWith(self, *args, **kwargs):
        """
        """
        ...

    def subtracted(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def toList(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def united(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPolygonF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromList(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...

    def append(self, *args, **kwargs):
        """
        """
        ...

    def at(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def capacity(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def constData(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def containsPoint(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def empty(self, *args, **kwargs):
        """
        """
        ...

    def endsWith(self, *args, **kwargs):
        """
        """
        ...

    def erase(self, *args, **kwargs):
        """
        """
        ...

    def fill(self, *args, **kwargs):
        """
        """
        ...

    def first(self, *args, **kwargs):
        """
        """
        ...

    def front(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def insert(self, *args, **kwargs):
        """
        """
        ...

    def intersected(self, *args, **kwargs):
        """
        """
        ...

    def isClosed(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isSharedWith(self, *args, **kwargs):
        """
        """
        ...

    def last(self, *args, **kwargs):
        """
        """
        ...

    def lastIndexOf(self, *args, **kwargs):
        """
        """
        ...

    def mid(self, *args, **kwargs):
        """
        """
        ...

    def pop_back(self, *args, **kwargs):
        """
        """
        ...

    def pop_front(self, *args, **kwargs):
        """
        """
        ...

    def prepend(self, *args, **kwargs):
        """
        """
        ...

    def push_back(self, *args, **kwargs):
        """
        """
        ...

    def push_front(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def replace(self, *args, **kwargs):
        """
        """
        ...

    def reserve(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def setSharable(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def squeeze(self, *args, **kwargs):
        """
        """
        ...

    def startsWith(self, *args, **kwargs):
        """
        """
        ...

    def subtracted(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def toList(self, *args, **kwargs):
        """
        """
        ...

    def toPolygon(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def united(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPrintDialog(QAbstractPrintDialog):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    accepted: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def exec_(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def options(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setOptions(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPrintEngine(Shiboken.Object):
    PPK_CollateCopies: ...
    """
    """

    PPK_ColorMode: ...
    """
    """

    PPK_CopyCount: ...
    """
    """

    PPK_Creator: ...
    """
    """

    PPK_CustomBase: ...
    """
    """

    PPK_CustomPaperSize: ...
    """
    """

    PPK_DocumentName: ...
    """
    """

    PPK_Duplex: ...
    """
    """

    PPK_FontEmbedding: ...
    """
    """

    PPK_FullPage: ...
    """
    """

    PPK_NumberOfCopies: ...
    """
    """

    PPK_Orientation: ...
    """
    """

    PPK_OutputFileName: ...
    """
    """

    PPK_PageMargins: ...
    """
    """

    PPK_PageOrder: ...
    """
    """

    PPK_PageRect: ...
    """
    """

    PPK_PageSize: ...
    """
    """

    PPK_PaperRect: ...
    """
    """

    PPK_PaperSize: ...
    """
    """

    PPK_PaperSource: ...
    """
    """

    PPK_PaperSources: ...
    """
    """

    PPK_PrinterName: ...
    """
    """

    PPK_PrinterProgram: ...
    """
    """

    PPK_Resolution: ...
    """
    """

    PPK_SelectionOption: ...
    """
    """

    PPK_SupportedResolutions: ...
    """
    """

    PPK_SupportsMultipleCopies: ...
    """
    """

    PPK_SuppressSystemPrintStatus: ...
    """
    """

    PPK_WindowsPageSize: ...
    """
    """

    PrintEnginePropertyKey: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def abort(self, *args, **kwargs):
        """
        """
        ...

    def metric(self, *args, **kwargs):
        """
        """
        ...

    def newPage(self, *args, **kwargs):
        """
        """
        ...

    def printerState(self, *args, **kwargs):
        """
        """
        ...

    def property(self, *args, **kwargs):
        """
        """
        ...

    def setProperty(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPrintPreviewDialog(QDialog):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    paintRequested: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def printer(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPrintPreviewWidget(QWidget):
    AllPagesView: ... = PySide.QtGui.QPrintPreviewWidget.ViewMode.AllPagesView
    """
    """

    CustomZoom: ... = PySide.QtGui.QPrintPreviewWidget.ZoomMode.CustomZoom
    """
    """

    FacingPagesView: ...
    """
    """

    FitInView: ... = PySide.QtGui.QPrintPreviewWidget.ZoomMode.FitInView
    """
    """

    FitToWidth: ... = PySide.QtGui.QPrintPreviewWidget.ZoomMode.FitToWidth
    """
    """

    SinglePageView: ...
    """
    """

    ViewMode: ...
    """
    """

    ZoomMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    paintRequested: ...
    """
    Signal
    """

    previewChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def currentPage(self, *args, **kwargs):
        """
        """
        ...

    def fitInView(self, *args, **kwargs):
        """
        """
        ...

    def fitToWidth(self, *args, **kwargs):
        """
        """
        ...

    def numPages(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def pageCount(self, *args, **kwargs):
        """
        """
        ...

    def print_(self, *args, **kwargs):
        """
        """
        ...

    def setAllPagesViewMode(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentPage(self, *args, **kwargs):
        """
        """
        ...

    def setFacingPagesViewMode(self, *args, **kwargs):
        """
        """
        ...

    def setLandscapeOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setPortraitOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setSinglePageViewMode(self, *args, **kwargs):
        """
        """
        ...

    def setViewMode(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def setZoomFactor(self, *args, **kwargs):
        """
        """
        ...

    def setZoomMode(self, *args, **kwargs):
        """
        """
        ...

    def updatePreview(self, *args, **kwargs):
        """
        """
        ...

    def viewMode(self, *args, **kwargs):
        """
        """
        ...

    def zoomFactor(self, *args, **kwargs):
        """
        """
        ...

    def zoomIn(self, *args, **kwargs):
        """
        """
        ...

    def zoomMode(self, *args, **kwargs):
        """
        """
        ...

    def zoomOut(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPrinter(QPaintDevice):
    A0: ... = PySide.QtGui.QPrinter.PageSize.A0
    """
    """

    A1: ... = PySide.QtGui.QPrinter.PageSize.A1
    """
    """

    A2: ... = PySide.QtGui.QPrinter.PageSize.A2
    """
    """

    A3: ... = PySide.QtGui.QPrinter.PageSize.A3
    """
    """

    A4: ... = PySide.QtGui.QPrinter.PageSize.A4
    """
    """

    A5: ... = PySide.QtGui.QPrinter.PageSize.A5
    """
    """

    A6: ... = PySide.QtGui.QPrinter.PageSize.A6
    """
    """

    A7: ... = PySide.QtGui.QPrinter.PageSize.A7
    """
    """

    A8: ... = PySide.QtGui.QPrinter.PageSize.A8
    """
    """

    A9: ... = PySide.QtGui.QPrinter.PageSize.A9
    """
    """

    Aborted: ... = PySide.QtGui.QPrinter.PrinterState.Aborted
    """
    """

    Active: ... = PySide.QtGui.QPrinter.PrinterState.Active
    """
    """

    AllPages: ... = PySide.QtGui.QPrinter.PrintRange.AllPages
    """
    """

    Auto: ... = PySide.QtGui.QPrinter.PaperSource.Auto
    """
    """

    B0: ... = PySide.QtGui.QPrinter.PageSize.B0
    """
    """

    B1: ... = PySide.QtGui.QPrinter.PageSize.B1
    """
    """

    B10: ... = PySide.QtGui.QPrinter.PageSize.B10
    """
    """

    B2: ... = PySide.QtGui.QPrinter.PageSize.B2
    """
    """

    B3: ... = PySide.QtGui.QPrinter.PageSize.B3
    """
    """

    B4: ... = PySide.QtGui.QPrinter.PageSize.B4
    """
    """

    B5: ... = PySide.QtGui.QPrinter.PageSize.B5
    """
    """

    B6: ... = PySide.QtGui.QPrinter.PageSize.B6
    """
    """

    B7: ... = PySide.QtGui.QPrinter.PageSize.B7
    """
    """

    B8: ... = PySide.QtGui.QPrinter.PageSize.B8
    """
    """

    B9: ... = PySide.QtGui.QPrinter.PageSize.B9
    """
    """

    C5E: ... = PySide.QtGui.QPrinter.PageSize.C5E
    """
    """

    Cassette: ... = PySide.QtGui.QPrinter.PaperSource.Cassette
    """
    """

    Cicero: ... = PySide.QtGui.QPrinter.Unit.Cicero
    """
    """

    Color: ... = PySide.QtGui.QPrinter.ColorMode.Color
    """
    """

    ColorMode: ...
    """
    """

    Comm10E: ... = PySide.QtGui.QPrinter.PageSize.Comm10E
    """
    """

    CurrentPage: ... = PySide.QtGui.QPrinter.PrintRange.CurrentPage
    """
    """

    Custom: ... = PySide.QtGui.QPrinter.PageSize.Custom
    """
    """

    DLE: ... = PySide.QtGui.QPrinter.PageSize.DLE
    """
    """

    DevicePixel: ... = PySide.QtGui.QPrinter.Unit.DevicePixel
    """
    """

    Didot: ... = PySide.QtGui.QPrinter.Unit.Didot
    """
    """

    DuplexAuto: ... = PySide.QtGui.QPrinter.DuplexMode.DuplexAuto
    """
    """

    DuplexLongSide: ... = PySide.QtGui.QPrinter.DuplexMode.DuplexLongSide
    """
    """

    DuplexMode: ...
    """
    """

    DuplexNone: ... = PySide.QtGui.QPrinter.DuplexMode.DuplexNone
    """
    """

    DuplexShortSide: ... = PySide.QtGui.QPrinter.DuplexMode.DuplexShortSide
    """
    """

    Envelope: ... = PySide.QtGui.QPrinter.PaperSource.Envelope
    """
    """

    EnvelopeManual: ... = PySide.QtGui.QPrinter.PaperSource.EnvelopeManual
    """
    """

    Error: ... = PySide.QtGui.QPrinter.PrinterState.Error
    """
    """

    Executive: ... = PySide.QtGui.QPrinter.PageSize.Executive
    """
    """

    FirstPageFirst: ... = PySide.QtGui.QPrinter.PageOrder.FirstPageFirst
    """
    """

    Folio: ... = PySide.QtGui.QPrinter.PageSize.Folio
    """
    """

    FormSource: ... = PySide.QtGui.QPrinter.PaperSource.FormSource
    """
    """

    GrayScale: ... = PySide.QtGui.QPrinter.ColorMode.GrayScale
    """
    """

    HighResolution: ... = PySide.QtGui.QPrinter.PrinterMode.HighResolution
    """
    """

    Idle: ... = PySide.QtGui.QPrinter.PrinterState.Idle
    """
    """

    Inch: ... = PySide.QtGui.QPrinter.Unit.Inch
    """
    """

    Landscape: ... = PySide.QtGui.QPrinter.Orientation.Landscape
    """
    """

    LargeCapacity: ... = PySide.QtGui.QPrinter.PaperSource.LargeCapacity
    """
    """

    LargeFormat: ... = PySide.QtGui.QPrinter.PaperSource.LargeFormat
    """
    """

    LastPageFirst: ... = PySide.QtGui.QPrinter.PageOrder.LastPageFirst
    """
    """

    Ledger: ... = PySide.QtGui.QPrinter.PageSize.Ledger
    """
    """

    Legal: ... = PySide.QtGui.QPrinter.PageSize.Legal
    """
    """

    Letter: ... = PySide.QtGui.QPrinter.PageSize.Letter
    """
    """

    Lower: ... = PySide.QtGui.QPrinter.PaperSource.Lower
    """
    """

    Manual: ... = PySide.QtGui.QPrinter.PaperSource.Manual
    """
    """

    MaxPageSource: ... = PySide.QtGui.QPrinter.PaperSource.MaxPageSource
    """
    """

    Middle: ... = PySide.QtGui.QPrinter.PaperSource.Middle
    """
    """

    Millimeter: ... = PySide.QtGui.QPrinter.Unit.Millimeter
    """
    """

    NPageSize: ... = PySide.QtGui.QPrinter.PageSize.NPageSize
    """
    """

    NPaperSize: ... = PySide.QtGui.QPrinter.PageSize.NPaperSize
    """
    """

    NativeFormat: ... = PySide.QtGui.QPrinter.OutputFormat.NativeFormat
    """
    """

    OnlyOne: ... = PySide.QtGui.QPrinter.PaperSource.OnlyOne
    """
    """

    Orientation: ...
    """
    """

    OutputFormat: ...
    """
    """

    PageOrder: ...
    """
    """

    PageRange: ... = PySide.QtGui.QPrinter.PrintRange.PageRange
    """
    """

    PageSize: ...
    """
    """

    PaperSource: ...
    """
    """

    PdfFormat: ... = PySide.QtGui.QPrinter.OutputFormat.PdfFormat
    """
    """

    Pica: ... = PySide.QtGui.QPrinter.Unit.Pica
    """
    """

    Point: ... = PySide.QtGui.QPrinter.Unit.Point
    """
    """

    Portrait: ... = PySide.QtGui.QPrinter.Orientation.Portrait
    """
    """

    PostScriptFormat: ... = PySide.QtGui.QPrinter.OutputFormat.PostScriptFormat
    """
    """

    PrintRange: ...
    """
    """

    PrinterMode: ...
    """
    """

    PrinterResolution: ...
    """
    """

    PrinterState: ...
    """
    """

    ScreenResolution: ... = PySide.QtGui.QPrinter.PrinterMode.ScreenResolution
    """
    """

    Selection: ... = PySide.QtGui.QPrinter.PrintRange.Selection
    """
    """

    SmallFormat: ... = PySide.QtGui.QPrinter.PaperSource.SmallFormat
    """
    """

    Tabloid: ... = PySide.QtGui.QPrinter.PageSize.Tabloid
    """
    """

    Tractor: ... = PySide.QtGui.QPrinter.PaperSource.Tractor
    """
    """

    Unit: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def abort(self, *args, **kwargs):
        """
        """
        ...

    def actualNumCopies(self, *args, **kwargs):
        """
        """
        ...

    def collateCopies(self, *args, **kwargs):
        """
        """
        ...

    def colorMode(self, *args, **kwargs):
        """
        """
        ...

    def copyCount(self, *args, **kwargs):
        """
        """
        ...

    def creator(self, *args, **kwargs):
        """
        """
        ...

    def devType(self, *args, **kwargs):
        """
        """
        ...

    def docName(self, *args, **kwargs):
        """
        """
        ...

    def doubleSidedPrinting(self, *args, **kwargs):
        """
        """
        ...

    def duplex(self, *args, **kwargs):
        """
        """
        ...

    def fontEmbeddingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def fromPage(self, *args, **kwargs):
        """
        """
        ...

    def fullPage(self, *args, **kwargs):
        """
        """
        ...

    def getPageMargins(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def metric(self, *args, **kwargs):
        """
        """
        ...

    def newPage(self, *args, **kwargs):
        """
        """
        ...

    def numCopies(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def outputFileName(self, *args, **kwargs):
        """
        """
        ...

    def outputFormat(self, *args, **kwargs):
        """
        """
        ...

    def pageOrder(self, *args, **kwargs):
        """
        """
        ...

    def pageRect(self, *args, **kwargs):
        """
        """
        ...

    def pageSize(self, *args, **kwargs):
        """
        """
        ...

    def paintEngine(self, *args, **kwargs):
        """
        """
        ...

    def paperRect(self, *args, **kwargs):
        """
        """
        ...

    def paperSize(self, *args, **kwargs):
        """
        """
        ...

    def paperSource(self, *args, **kwargs):
        """
        """
        ...

    def printEngine(self, *args, **kwargs):
        """
        """
        ...

    def printProgram(self, *args, **kwargs):
        """
        """
        ...

    def printRange(self, *args, **kwargs):
        """
        """
        ...

    def printerName(self, *args, **kwargs):
        """
        """
        ...

    def printerState(self, *args, **kwargs):
        """
        """
        ...

    def resolution(self, *args, **kwargs):
        """
        """
        ...

    def setCollateCopies(self, *args, **kwargs):
        """
        """
        ...

    def setColorMode(self, *args, **kwargs):
        """
        """
        ...

    def setCopyCount(self, *args, **kwargs):
        """
        """
        ...

    def setCreator(self, *args, **kwargs):
        """
        """
        ...

    def setDocName(self, *args, **kwargs):
        """
        """
        ...

    def setDoubleSidedPrinting(self, *args, **kwargs):
        """
        """
        ...

    def setDuplex(self, *args, **kwargs):
        """
        """
        ...

    def setEngines(self, *args, **kwargs):
        """
        """
        ...

    def setFontEmbeddingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setFromTo(self, *args, **kwargs):
        """
        """
        ...

    def setFullPage(self, *args, **kwargs):
        """
        """
        ...

    def setNumCopies(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setOutputFileName(self, *args, **kwargs):
        """
        """
        ...

    def setOutputFormat(self, *args, **kwargs):
        """
        """
        ...

    def setPageMargins(self, *args, **kwargs):
        """
        """
        ...

    def setPageOrder(self, *args, **kwargs):
        """
        """
        ...

    def setPageSize(self, *args, **kwargs):
        """
        """
        ...

    def setPaperSize(self, *args, **kwargs):
        """
        """
        ...

    def setPaperSource(self, *args, **kwargs):
        """
        """
        ...

    def setPrintProgram(self, *args, **kwargs):
        """
        """
        ...

    def setPrintRange(self, *args, **kwargs):
        """
        """
        ...

    def setPrinterName(self, *args, **kwargs):
        """
        """
        ...

    def setResolution(self, *args, **kwargs):
        """
        """
        ...

    def setWinPageSize(self, *args, **kwargs):
        """
        """
        ...

    def supportedPaperSources(self, *args, **kwargs):
        """
        """
        ...

    def supportedResolutions(self, *args, **kwargs):
        """
        """
        ...

    def supportsMultipleCopies(self, *args, **kwargs):
        """
        """
        ...

    def toPage(self, *args, **kwargs):
        """
        """
        ...

    def winPageSize(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPrinterInfo(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def availablePrinters(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def defaultPrinter(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def isDefault(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def printerName(self, *args, **kwargs):
        """
        """
        ...

    def supportedPaperSizes(self, *args, **kwargs):
        """
        """
        ...

    ...

class QProgressBar(QWidget):
    BottomToTop: ... = PySide.QtGui.QProgressBar.Direction.BottomToTop
    """
    """

    Direction: ...
    """
    """

    TopToBottom: ... = PySide.QtGui.QProgressBar.Direction.TopToBottom
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    valueChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def invertedAppearance(self, *args, **kwargs):
        """
        """
        ...

    def isTextVisible(self, *args, **kwargs):
        """
        """
        ...

    def maximum(self, *args, **kwargs):
        """
        """
        ...

    def minimum(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def setInvertedAppearance(self, *args, **kwargs):
        """
        """
        ...

    def setMaximum(self, *args, **kwargs):
        """
        """
        ...

    def setMinimum(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setRange(self, *args, **kwargs):
        """
        """
        ...

    def setTextDirection(self, *args, **kwargs):
        """
        """
        ...

    def setTextVisible(self, *args, **kwargs):
        """
        """
        ...

    def setValue(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textDirection(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QProgressDialog(QDialog):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    canceled: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoClose(self, *args, **kwargs):
        """
        """
        ...

    def autoReset(self, *args, **kwargs):
        """
        """
        ...

    def cancel(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def forceShow(self, *args, **kwargs):
        """
        """
        ...

    def labelText(self, *args, **kwargs):
        """
        """
        ...

    def maximum(self, *args, **kwargs):
        """
        """
        ...

    def minimum(self, *args, **kwargs):
        """
        """
        ...

    def minimumDuration(self, *args, **kwargs):
        """
        """
        ...

    def open(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setAutoClose(self, *args, **kwargs):
        """
        """
        ...

    def setAutoReset(self, *args, **kwargs):
        """
        """
        ...

    def setBar(self, *args, **kwargs):
        """
        """
        ...

    def setCancelButton(self, *args, **kwargs):
        """
        """
        ...

    def setCancelButtonText(self, *args, **kwargs):
        """
        """
        ...

    def setLabel(self, *args, **kwargs):
        """
        """
        ...

    def setLabelText(self, *args, **kwargs):
        """
        """
        ...

    def setMaximum(self, *args, **kwargs):
        """
        """
        ...

    def setMinimum(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumDuration(self, *args, **kwargs):
        """
        """
        ...

    def setRange(self, *args, **kwargs):
        """
        """
        ...

    def setValue(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    def wasCanceled(self, *args, **kwargs):
        """
        """
        ...

    ...

class QProxyModel(PySide.QtCore.QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def connectToModel(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def disconnectFromModel(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def fetchMore(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def headerData(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def insertColumns(self, *args, **kwargs):
        """
        """
        ...

    def insertRows(self, *args, **kwargs):
        """
        """
        ...

    def match(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def revert(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderData(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setProxyModel(self, *args, **kwargs):
        """
        """
        ...

    def setSourceModel(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def span(self, *args, **kwargs):
        """
        """
        ...

    def submit(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPushButton(QAbstractButton):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoDefault(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def isDefault(self, *args, **kwargs):
        """
        """
        ...

    def isFlat(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def menu(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setAutoDefault(self, *args, **kwargs):
        """
        """
        ...

    def setDefault(self, *args, **kwargs):
        """
        """
        ...

    def setFlat(self, *args, **kwargs):
        """
        """
        ...

    def setMenu(self, *args, **kwargs):
        """
        """
        ...

    def showMenu(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    ...

class QPyTextObject(PySide.QtCore.QObject, QTextObjectInterface):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawObject(self, *args, **kwargs):
        """
        """
        ...

    def intrinsicSize(self, *args, **kwargs):
        """
        """
        ...

    ...

class QQuaternion(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromAxisAndAngle(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def nlerp(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def slerp(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def conjugate(self, *args, **kwargs):
        """
        """
        ...

    def isIdentity(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def lengthSquared(self, *args, **kwargs):
        """
        """
        ...

    def normalize(self, *args, **kwargs):
        """
        """
        ...

    def normalized(self, *args, **kwargs):
        """
        """
        ...

    def rotatedVector(self, *args, **kwargs):
        """
        """
        ...

    def scalar(self, *args, **kwargs):
        """
        """
        ...

    def setScalar(self, *args, **kwargs):
        """
        """
        ...

    def setVector(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def setZ(self, *args, **kwargs):
        """
        """
        ...

    def toVector4D(self, *args, **kwargs):
        """
        """
        ...

    def vector(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    def z(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRadialGradient(QGradient):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def center(self, *args, **kwargs):
        """
        """
        ...

    def centerRadius(self, *args, **kwargs):
        """
        """
        ...

    def focalPoint(self, *args, **kwargs):
        """
        """
        ...

    def focalRadius(self, *args, **kwargs):
        """
        """
        ...

    def radius(self, *args, **kwargs):
        """
        """
        ...

    def setCenter(self, *args, **kwargs):
        """
        """
        ...

    def setCenterRadius(self, *args, **kwargs):
        """
        """
        ...

    def setFocalPoint(self, *args, **kwargs):
        """
        """
        ...

    def setFocalRadius(self, *args, **kwargs):
        """
        """
        ...

    def setRadius(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRadioButton(QAbstractButton):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def hitButton(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRegExpValidator(QValidator):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def regExp(self, *args, **kwargs):
        """
        """
        ...

    def setRegExp(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRegion(Shiboken.Object):
    Ellipse: ... = PySide.QtGui.QRegion.RegionType.Ellipse
    """
    """

    Rectangle: ... = PySide.QtGui.QRegion.RegionType.Rectangle
    """
    """

    RegionType: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __ixor__(self, *args, **kwargs):
        """
        x.__ixor__(y) <==> x^=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def intersected(self, *args, **kwargs):
        """
        """
        ...

    def intersects(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def numRects(self, *args, **kwargs):
        """
        """
        ...

    def rectCount(self, *args, **kwargs):
        """
        """
        ...

    def rects(self, *args, **kwargs):
        """
        """
        ...

    def setRects(self, *args, **kwargs):
        """
        """
        ...

    def subtracted(self, *args, **kwargs):
        """
        """
        ...

    def swap(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def translated(self, *args, **kwargs):
        """
        """
        ...

    def united(self, *args, **kwargs):
        """
        """
        ...

    def xored(self, *args, **kwargs):
        """
        """
        ...

    ...

class QResizeEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def oldSize(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    ...

class QRubberBand(QWidget):
    Line: ... = PySide.QtGui.QRubberBand.Shape.Line
    """
    """

    Rectangle: ... = PySide.QtGui.QRubberBand.Shape.Rectangle
    """
    """

    Shape: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def move(self, *args, **kwargs):
        """
        """
        ...

    def moveEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QScrollArea(QAbstractScrollArea):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def ensureVisible(self, *args, **kwargs):
        """
        """
        ...

    def ensureWidgetVisible(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def setWidgetResizable(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def takeWidget(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    def widgetResizable(self, *args, **kwargs):
        """
        """
        ...

    ...

class QScrollBar(QAbstractSlider):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sliderChange(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSessionManager(PySide.QtCore.QObject):
    RestartAnyway: ... = PySide.QtGui.QSessionManager.RestartHint.RestartAnyway
    """
    """

    RestartHint: ...
    """
    """

    RestartIfRunning: ...
    """
    """

    RestartImmediately: ...
    """
    """

    RestartNever: ... = PySide.QtGui.QSessionManager.RestartHint.RestartNever
    """
    """

    staticMetaObject: ...
    """
    """

    def allowsErrorInteraction(self, *args, **kwargs):
        """
        """
        ...

    def allowsInteraction(self, *args, **kwargs):
        """
        """
        ...

    def cancel(self, *args, **kwargs):
        """
        """
        ...

    def discardCommand(self, *args, **kwargs):
        """
        """
        ...

    def isPhase2(self, *args, **kwargs):
        """
        """
        ...

    def release(self, *args, **kwargs):
        """
        """
        ...

    def requestPhase2(self, *args, **kwargs):
        """
        """
        ...

    def restartCommand(self, *args, **kwargs):
        """
        """
        ...

    def restartHint(self, *args, **kwargs):
        """
        """
        ...

    def sessionId(self, *args, **kwargs):
        """
        """
        ...

    def sessionKey(self, *args, **kwargs):
        """
        """
        ...

    def setDiscardCommand(self, *args, **kwargs):
        """
        """
        ...

    def setManagerProperty(self, *args, **kwargs):
        """
        """
        ...

    def setRestartCommand(self, *args, **kwargs):
        """
        """
        ...

    def setRestartHint(self, *args, **kwargs):
        """
        """
        ...

    ...

class QShortcut(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    activatedAmbiguously: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def autoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def context(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def id(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def parentWidget(self, *args, **kwargs):
        """
        """
        ...

    def setAutoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def setContext(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setKey(self, *args, **kwargs):
        """
        """
        ...

    def setWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def whatsThis(self, *args, **kwargs):
        """
        """
        ...

    ...

class QShortcutEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def isAmbiguous(self, *args, **kwargs):
        """
        """
        ...

    def key(self, *args, **kwargs):
        """
        """
        ...

    def shortcutId(self, *args, **kwargs):
        """
        """
        ...

    ...

class QShowEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QSizeGrip(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def winEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSizePolicy(Shiboken.Object):
    ButtonBox: ... = PySide.QtGui.QSizePolicy.ControlType.ButtonBox
    """
    """

    CheckBox: ... = PySide.QtGui.QSizePolicy.ControlType.CheckBox
    """
    """

    ComboBox: ... = PySide.QtGui.QSizePolicy.ControlType.ComboBox
    """
    """

    ControlType: ...
    """
    """

    ControlTypes: ...
    """
    """

    DefaultType: ... = PySide.QtGui.QSizePolicy.ControlType.DefaultType
    """
    """

    ExpandFlag: ... = PySide.QtGui.QSizePolicy.PolicyFlag.ExpandFlag
    """
    """

    Expanding: ... = PySide.QtGui.QSizePolicy.Policy.Expanding
    """
    """

    Fixed: ... = PySide.QtGui.QSizePolicy.Policy.Fixed
    """
    """

    Frame: ... = PySide.QtGui.QSizePolicy.ControlType.Frame
    """
    """

    GroupBox: ... = PySide.QtGui.QSizePolicy.ControlType.GroupBox
    """
    """

    GrowFlag: ... = PySide.QtGui.QSizePolicy.PolicyFlag.GrowFlag
    """
    """

    IgnoreFlag: ... = PySide.QtGui.QSizePolicy.PolicyFlag.IgnoreFlag
    """
    """

    Ignored: ... = PySide.QtGui.QSizePolicy.Policy.Ignored
    """
    """

    Label: ... = PySide.QtGui.QSizePolicy.ControlType.Label
    """
    """

    Line: ... = PySide.QtGui.QSizePolicy.ControlType.Line
    """
    """

    LineEdit: ... = PySide.QtGui.QSizePolicy.ControlType.LineEdit
    """
    """

    Maximum: ... = PySide.QtGui.QSizePolicy.Policy.Maximum
    """
    """

    Minimum: ... = PySide.QtGui.QSizePolicy.Policy.Minimum
    """
    """

    MinimumExpanding: ... = PySide.QtGui.QSizePolicy.Policy.MinimumExpanding
    """
    """

    Policy: ...
    """
    """

    PolicyFlag: ...
    """
    """

    Preferred: ... = PySide.QtGui.QSizePolicy.Policy.Preferred
    """
    """

    PushButton: ... = PySide.QtGui.QSizePolicy.ControlType.PushButton
    """
    """

    RadioButton: ... = PySide.QtGui.QSizePolicy.ControlType.RadioButton
    """
    """

    ShrinkFlag: ... = PySide.QtGui.QSizePolicy.PolicyFlag.ShrinkFlag
    """
    """

    Slider: ... = PySide.QtGui.QSizePolicy.ControlType.Slider
    """
    """

    SpinBox: ... = PySide.QtGui.QSizePolicy.ControlType.SpinBox
    """
    """

    TabWidget: ... = PySide.QtGui.QSizePolicy.ControlType.TabWidget
    """
    """

    ToolButton: ... = PySide.QtGui.QSizePolicy.ControlType.ToolButton
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def controlType(self, *args, **kwargs):
        """
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def hasHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def hasWidthForHeight(self, *args, **kwargs):
        """
        """
        ...

    def horizontalPolicy(self, *args, **kwargs):
        """
        """
        ...

    def horizontalStretch(self, *args, **kwargs):
        """
        """
        ...

    def setControlType(self, *args, **kwargs):
        """
        """
        ...

    def setHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalStretch(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalStretch(self, *args, **kwargs):
        """
        """
        ...

    def setWidthForHeight(self, *args, **kwargs):
        """
        """
        ...

    def transpose(self, *args, **kwargs):
        """
        """
        ...

    def verticalPolicy(self, *args, **kwargs):
        """
        """
        ...

    def verticalStretch(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSlider(QAbstractSlider):
    NoTicks: ... = PySide.QtGui.QSlider.TickPosition.NoTicks
    """
    """

    TickPosition: ...
    """
    """

    TicksAbove: ... = PySide.QtGui.QSlider.TickPosition.TicksAbove
    """
    """

    TicksBelow: ... = PySide.QtGui.QSlider.TickPosition.TicksBelow
    """
    """

    TicksBothSides: ... = PySide.QtGui.QSlider.TickPosition.TicksBothSides
    """
    """

    TicksLeft: ... = PySide.QtGui.QSlider.TickPosition.TicksLeft
    """
    """

    TicksRight: ... = PySide.QtGui.QSlider.TickPosition.TicksRight
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def setTickInterval(self, *args, **kwargs):
        """
        """
        ...

    def setTickPosition(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def tickInterval(self, *args, **kwargs):
        """
        """
        ...

    def tickPosition(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSortFilterProxyModel(QAbstractProxyModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def buddy(self, *args, **kwargs):
        """
        """
        ...

    def canFetchMore(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def dynamicSortFilter(self, *args, **kwargs):
        """
        """
        ...

    def fetchMore(self, *args, **kwargs):
        """
        """
        ...

    def filterAcceptsColumn(self, *args, **kwargs):
        """
        """
        ...

    def filterAcceptsRow(self, *args, **kwargs):
        """
        """
        ...

    def filterCaseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def filterKeyColumn(self, *args, **kwargs):
        """
        """
        ...

    def filterRegExp(self, *args, **kwargs):
        """
        """
        ...

    def filterRole(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def headerData(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def insertColumns(self, *args, **kwargs):
        """
        """
        ...

    def insertRows(self, *args, **kwargs):
        """
        """
        ...

    def invalidate(self, *args, **kwargs):
        """
        """
        ...

    def invalidateFilter(self, *args, **kwargs):
        """
        """
        ...

    def isSortLocaleAware(self, *args, **kwargs):
        """
        """
        ...

    def lessThan(self, *args, **kwargs):
        """
        """
        ...

    def mapFromSource(self, *args, **kwargs):
        """
        """
        ...

    def mapSelectionFromSource(self, *args, **kwargs):
        """
        """
        ...

    def mapSelectionToSource(self, *args, **kwargs):
        """
        """
        ...

    def mapToSource(self, *args, **kwargs):
        """
        """
        ...

    def match(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def removeColumns(self, *args, **kwargs):
        """
        """
        ...

    def removeRows(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setDynamicSortFilter(self, *args, **kwargs):
        """
        """
        ...

    def setFilterCaseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def setFilterFixedString(self, *args, **kwargs):
        """
        """
        ...

    def setFilterKeyColumn(self, *args, **kwargs):
        """
        """
        ...

    def setFilterRegExp(self, *args, **kwargs):
        """
        """
        ...

    def setFilterRole(self, *args, **kwargs):
        """
        """
        ...

    def setFilterWildcard(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderData(self, *args, **kwargs):
        """
        """
        ...

    def setSortCaseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def setSortLocaleAware(self, *args, **kwargs):
        """
        """
        ...

    def setSortRole(self, *args, **kwargs):
        """
        """
        ...

    def setSourceModel(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def sortCaseSensitivity(self, *args, **kwargs):
        """
        """
        ...

    def sortColumn(self, *args, **kwargs):
        """
        """
        ...

    def sortOrder(self, *args, **kwargs):
        """
        """
        ...

    def sortRole(self, *args, **kwargs):
        """
        """
        ...

    def span(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSound(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def isAvailable(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def play(*args, **kwargs):
        """
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def fileName(self, *args, **kwargs):
        """
        """
        ...

    def isFinished(self, *args, **kwargs):
        """
        """
        ...

    def loops(self, *args, **kwargs):
        """
        """
        ...

    def loopsRemaining(self, *args, **kwargs):
        """
        """
        ...

    def setLoops(self, *args, **kwargs):
        """
        """
        ...

    def stop(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSpacerItem(QLayoutItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def changeSize(self, *args, **kwargs):
        """
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def geometry(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def spacerItem(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSpinBox(QAbstractSpinBox):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    valueChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def cleanText(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def fixup(self, *args, **kwargs):
        """
        """
        ...

    def maximum(self, *args, **kwargs):
        """
        """
        ...

    def minimum(self, *args, **kwargs):
        """
        """
        ...

    def prefix(self, *args, **kwargs):
        """
        """
        ...

    def setMaximum(self, *args, **kwargs):
        """
        """
        ...

    def setMinimum(self, *args, **kwargs):
        """
        """
        ...

    def setPrefix(self, *args, **kwargs):
        """
        """
        ...

    def setRange(self, *args, **kwargs):
        """
        """
        ...

    def setSingleStep(self, *args, **kwargs):
        """
        """
        ...

    def setSuffix(self, *args, **kwargs):
        """
        """
        ...

    def setValue(self, *args, **kwargs):
        """
        """
        ...

    def singleStep(self, *args, **kwargs):
        """
        """
        ...

    def suffix(self, *args, **kwargs):
        """
        """
        ...

    def textFromValue(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    def valueFromText(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSplashScreen(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    messageChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def clearMessage(self, *args, **kwargs):
        """
        """
        ...

    def drawContents(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def finish(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def setPixmap(self, *args, **kwargs):
        """
        """
        ...

    def showMessage(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSplitter(QFrame):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    splitterMoved: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def childrenCollapsible(self, *args, **kwargs):
        """
        """
        ...

    def closestLegalPosition(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def createHandle(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def getRange(self, *args, **kwargs):
        """
        """
        ...

    def handle(self, *args, **kwargs):
        """
        """
        ...

    def handleWidth(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def insertWidget(self, *args, **kwargs):
        """
        """
        ...

    def isCollapsible(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def moveSplitter(self, *args, **kwargs):
        """
        """
        ...

    def opaqueResize(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def refresh(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def restoreState(self, *args, **kwargs):
        """
        """
        ...

    def saveState(self, *args, **kwargs):
        """
        """
        ...

    def setChildrenCollapsible(self, *args, **kwargs):
        """
        """
        ...

    def setCollapsible(self, *args, **kwargs):
        """
        """
        ...

    def setHandleWidth(self, *args, **kwargs):
        """
        """
        ...

    def setOpaqueResize(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setRubberBand(self, *args, **kwargs):
        """
        """
        ...

    def setSizes(self, *args, **kwargs):
        """
        """
        ...

    def setStretchFactor(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sizes(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSplitterHandle(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def closestLegalPosition(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveSplitter(self, *args, **kwargs):
        """
        """
        ...

    def opaqueResize(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def splitter(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStackedLayout(QLayout):
    StackAll: ... = PySide.QtGui.QStackedLayout.StackingMode.StackAll
    """
    """

    StackOne: ... = PySide.QtGui.QStackedLayout.StackingMode.StackOne
    """
    """

    StackingMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    widgetRemoved: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def currentWidget(self, *args, **kwargs):
        """
        """
        ...

    def insertWidget(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentWidget(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setStackingMode(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def stackingMode(self, *args, **kwargs):
        """
        """
        ...

    def takeAt(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStackedWidget(QFrame):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    widgetRemoved: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def currentWidget(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def insertWidget(self, *args, **kwargs):
        """
        """
        ...

    def removeWidget(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentWidget(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStandardItem(Shiboken.Object):
    ItemType: ...
    """
    """

    Type: ... = PySide.QtGui.QStandardItem.ItemType.Type
    """
    """

    UserType: ... = PySide.QtGui.QStandardItem.ItemType.UserType
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def accessibleDescription(self, *args, **kwargs):
        """
        """
        ...

    def accessibleText(self, *args, **kwargs):
        """
        """
        ...

    def appendColumn(self, *args, **kwargs):
        """
        """
        ...

    def appendRow(self, *args, **kwargs):
        """
        """
        ...

    def appendRows(self, *args, **kwargs):
        """
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def checkState(self, *args, **kwargs):
        """
        """
        ...

    def child(self, *args, **kwargs):
        """
        """
        ...

    def clone(self, *args, **kwargs):
        """
        """
        ...

    def column(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def emitDataChanged(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def foreground(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def insertColumn(self, *args, **kwargs):
        """
        """
        ...

    def insertColumns(self, *args, **kwargs):
        """
        """
        ...

    def insertRow(self, *args, **kwargs):
        """
        """
        ...

    def insertRows(self, *args, **kwargs):
        """
        """
        ...

    def isCheckable(self, *args, **kwargs):
        """
        """
        ...

    def isDragEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isDropEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isEditable(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isSelectable(self, *args, **kwargs):
        """
        """
        ...

    def isTristate(self, *args, **kwargs):
        """
        """
        ...

    def model(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def removeColumn(self, *args, **kwargs):
        """
        """
        ...

    def removeColumns(self, *args, **kwargs):
        """
        """
        ...

    def removeRow(self, *args, **kwargs):
        """
        """
        ...

    def removeRows(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setAccessibleDescription(self, *args, **kwargs):
        """
        """
        ...

    def setAccessibleText(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setCheckState(self, *args, **kwargs):
        """
        """
        ...

    def setCheckable(self, *args, **kwargs):
        """
        """
        ...

    def setChild(self, *args, **kwargs):
        """
        """
        ...

    def setColumnCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setDragEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setDropEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setEditable(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setFlags(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setForeground(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setRowCount(self, *args, **kwargs):
        """
        """
        ...

    def setSelectable(self, *args, **kwargs):
        """
        """
        ...

    def setSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def setStatusTip(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setTristate(self, *args, **kwargs):
        """
        """
        ...

    def setWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sortChildren(self, *args, **kwargs):
        """
        """
        ...

    def statusTip(self, *args, **kwargs):
        """
        """
        ...

    def takeChild(self, *args, **kwargs):
        """
        """
        ...

    def takeColumn(self, *args, **kwargs):
        """
        """
        ...

    def takeRow(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textAlignment(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def whatsThis(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStandardItemModel(PySide.QtCore.QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    itemChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def appendColumn(self, *args, **kwargs):
        """
        """
        ...

    def appendRow(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def findItems(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def hasChildren(self, *args, **kwargs):
        """
        """
        ...

    def headerData(self, *args, **kwargs):
        """
        """
        ...

    def horizontalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def indexFromItem(self, *args, **kwargs):
        """
        """
        ...

    def insertColumn(self, *args, **kwargs):
        """
        """
        ...

    def insertColumns(self, *args, **kwargs):
        """
        """
        ...

    def insertRow(self, *args, **kwargs):
        """
        """
        ...

    def insertRows(self, *args, **kwargs):
        """
        """
        ...

    def invisibleRootItem(self, *args, **kwargs):
        """
        """
        ...

    def item(self, *args, **kwargs):
        """
        """
        ...

    def itemData(self, *args, **kwargs):
        """
        """
        ...

    def itemFromIndex(self, *args, **kwargs):
        """
        """
        ...

    def itemPrototype(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def removeColumns(self, *args, **kwargs):
        """
        """
        ...

    def removeRows(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setColumnCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderData(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalHeaderLabels(self, *args, **kwargs):
        """
        """
        ...

    def setItem(self, *args, **kwargs):
        """
        """
        ...

    def setItemData(self, *args, **kwargs):
        """
        """
        ...

    def setItemPrototype(self, *args, **kwargs):
        """
        """
        ...

    def setRowCount(self, *args, **kwargs):
        """
        """
        ...

    def setSortRole(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalHeaderLabels(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def sortRole(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    def takeColumn(self, *args, **kwargs):
        """
        """
        ...

    def takeHorizontalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def takeItem(self, *args, **kwargs):
        """
        """
        ...

    def takeRow(self, *args, **kwargs):
        """
        """
        ...

    def takeVerticalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def verticalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStatusBar(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    messageChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addPermanentWidget(self, *args, **kwargs):
        """
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def clearMessage(self, *args, **kwargs):
        """
        """
        ...

    def currentMessage(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def hideOrShow(self, *args, **kwargs):
        """
        """
        ...

    def insertPermanentWidget(self, *args, **kwargs):
        """
        """
        ...

    def insertWidget(self, *args, **kwargs):
        """
        """
        ...

    def isSizeGripEnabled(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def reformat(self, *args, **kwargs):
        """
        """
        ...

    def removeWidget(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setSizeGripEnabled(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def showMessage(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStatusTipEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def tip(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStringListModel(PySide.QtCore.QAbstractListModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def insertRows(self, *args, **kwargs):
        """
        """
        ...

    def removeRows(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setStringList(self, *args, **kwargs):
        """
        """
        ...

    def sort(self, *args, **kwargs):
        """
        """
        ...

    def stringList(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStyle(PySide.QtCore.QObject):
    CC_ComboBox: ... = PySide.QtGui.QStyle.ComplexControl.CC_ComboBox
    """
    """

    CC_CustomBase: ... = PySide.QtGui.QStyle.ComplexControl.CC_CustomBase
    """
    """

    CC_Dial: ... = PySide.QtGui.QStyle.ComplexControl.CC_Dial
    """
    """

    CC_GroupBox: ... = PySide.QtGui.QStyle.ComplexControl.CC_GroupBox
    """
    """

    CC_MdiControls: ... = PySide.QtGui.QStyle.ComplexControl.CC_MdiControls
    """
    """

    CC_Q3ListView: ... = PySide.QtGui.QStyle.ComplexControl.CC_Q3ListView
    """
    """

    CC_ScrollBar: ... = PySide.QtGui.QStyle.ComplexControl.CC_ScrollBar
    """
    """

    CC_Slider: ... = PySide.QtGui.QStyle.ComplexControl.CC_Slider
    """
    """

    CC_SpinBox: ... = PySide.QtGui.QStyle.ComplexControl.CC_SpinBox
    """
    """

    CC_TitleBar: ... = PySide.QtGui.QStyle.ComplexControl.CC_TitleBar
    """
    """

    CC_ToolButton: ... = PySide.QtGui.QStyle.ComplexControl.CC_ToolButton
    """
    """

    CE_CheckBox: ... = PySide.QtGui.QStyle.ControlElement.CE_CheckBox
    """
    """

    CE_CheckBoxLabel: ... = PySide.QtGui.QStyle.ControlElement.CE_CheckBoxLabel
    """
    """

    CE_ColumnViewGrip: ...
    """
    """

    CE_ComboBoxLabel: ... = PySide.QtGui.QStyle.ControlElement.CE_ComboBoxLabel
    """
    """

    CE_CustomBase: ... = PySide.QtGui.QStyle.ControlElement.CE_CustomBase
    """
    """

    CE_DockWidgetTitle: ...
    """
    """

    CE_FocusFrame: ... = PySide.QtGui.QStyle.ControlElement.CE_FocusFrame
    """
    """

    CE_Header: ... = PySide.QtGui.QStyle.ControlElement.CE_Header
    """
    """

    CE_HeaderEmptyArea: ...
    """
    """

    CE_HeaderLabel: ... = PySide.QtGui.QStyle.ControlElement.CE_HeaderLabel
    """
    """

    CE_HeaderSection: ... = PySide.QtGui.QStyle.ControlElement.CE_HeaderSection
    """
    """

    CE_ItemViewItem: ... = PySide.QtGui.QStyle.ControlElement.CE_ItemViewItem
    """
    """

    CE_MenuBarEmptyArea: ...
    """
    """

    CE_MenuBarItem: ... = PySide.QtGui.QStyle.ControlElement.CE_MenuBarItem
    """
    """

    CE_MenuEmptyArea: ... = PySide.QtGui.QStyle.ControlElement.CE_MenuEmptyArea
    """
    """

    CE_MenuHMargin: ... = PySide.QtGui.QStyle.ControlElement.CE_MenuHMargin
    """
    """

    CE_MenuItem: ... = PySide.QtGui.QStyle.ControlElement.CE_MenuItem
    """
    """

    CE_MenuScroller: ... = PySide.QtGui.QStyle.ControlElement.CE_MenuScroller
    """
    """

    CE_MenuTearoff: ... = PySide.QtGui.QStyle.ControlElement.CE_MenuTearoff
    """
    """

    CE_MenuVMargin: ... = PySide.QtGui.QStyle.ControlElement.CE_MenuVMargin
    """
    """

    CE_ProgressBar: ... = PySide.QtGui.QStyle.ControlElement.CE_ProgressBar
    """
    """

    CE_ProgressBarContents: ...
    """
    """

    CE_ProgressBarGroove: ...
    """
    """

    CE_ProgressBarLabel: ...
    """
    """

    CE_PushButton: ... = PySide.QtGui.QStyle.ControlElement.CE_PushButton
    """
    """

    CE_PushButtonBevel: ...
    """
    """

    CE_PushButtonLabel: ...
    """
    """

    CE_Q3DockWindowEmptyArea: ...
    """
    """

    CE_RadioButton: ... = PySide.QtGui.QStyle.ControlElement.CE_RadioButton
    """
    """

    CE_RadioButtonLabel: ...
    """
    """

    CE_RubberBand: ... = PySide.QtGui.QStyle.ControlElement.CE_RubberBand
    """
    """

    CE_ScrollBarAddLine: ...
    """
    """

    CE_ScrollBarAddPage: ...
    """
    """

    CE_ScrollBarFirst: ...
    """
    """

    CE_ScrollBarLast: ... = PySide.QtGui.QStyle.ControlElement.CE_ScrollBarLast
    """
    """

    CE_ScrollBarSlider: ...
    """
    """

    CE_ScrollBarSubLine: ...
    """
    """

    CE_ScrollBarSubPage: ...
    """
    """

    CE_ShapedFrame: ... = PySide.QtGui.QStyle.ControlElement.CE_ShapedFrame
    """
    """

    CE_SizeGrip: ... = PySide.QtGui.QStyle.ControlElement.CE_SizeGrip
    """
    """

    CE_Splitter: ... = PySide.QtGui.QStyle.ControlElement.CE_Splitter
    """
    """

    CE_TabBarTab: ... = PySide.QtGui.QStyle.ControlElement.CE_TabBarTab
    """
    """

    CE_TabBarTabLabel: ...
    """
    """

    CE_TabBarTabShape: ...
    """
    """

    CE_ToolBar: ... = PySide.QtGui.QStyle.ControlElement.CE_ToolBar
    """
    """

    CE_ToolBoxTab: ... = PySide.QtGui.QStyle.ControlElement.CE_ToolBoxTab
    """
    """

    CE_ToolBoxTabLabel: ...
    """
    """

    CE_ToolBoxTabShape: ...
    """
    """

    CE_ToolButtonLabel: ...
    """
    """

    CT_CheckBox: ... = PySide.QtGui.QStyle.ContentsType.CT_CheckBox
    """
    """

    CT_ComboBox: ... = PySide.QtGui.QStyle.ContentsType.CT_ComboBox
    """
    """

    CT_CustomBase: ... = PySide.QtGui.QStyle.ContentsType.CT_CustomBase
    """
    """

    CT_DialogButtons: ... = PySide.QtGui.QStyle.ContentsType.CT_DialogButtons
    """
    """

    CT_GroupBox: ... = PySide.QtGui.QStyle.ContentsType.CT_GroupBox
    """
    """

    CT_HeaderSection: ... = PySide.QtGui.QStyle.ContentsType.CT_HeaderSection
    """
    """

    CT_ItemViewItem: ... = PySide.QtGui.QStyle.ContentsType.CT_ItemViewItem
    """
    """

    CT_LineEdit: ... = PySide.QtGui.QStyle.ContentsType.CT_LineEdit
    """
    """

    CT_MdiControls: ... = PySide.QtGui.QStyle.ContentsType.CT_MdiControls
    """
    """

    CT_Menu: ... = PySide.QtGui.QStyle.ContentsType.CT_Menu
    """
    """

    CT_MenuBar: ... = PySide.QtGui.QStyle.ContentsType.CT_MenuBar
    """
    """

    CT_MenuBarItem: ... = PySide.QtGui.QStyle.ContentsType.CT_MenuBarItem
    """
    """

    CT_MenuItem: ... = PySide.QtGui.QStyle.ContentsType.CT_MenuItem
    """
    """

    CT_ProgressBar: ... = PySide.QtGui.QStyle.ContentsType.CT_ProgressBar
    """
    """

    CT_PushButton: ... = PySide.QtGui.QStyle.ContentsType.CT_PushButton
    """
    """

    CT_Q3DockWindow: ... = PySide.QtGui.QStyle.ContentsType.CT_Q3DockWindow
    """
    """

    CT_Q3Header: ... = PySide.QtGui.QStyle.ContentsType.CT_Q3Header
    """
    """

    CT_RadioButton: ... = PySide.QtGui.QStyle.ContentsType.CT_RadioButton
    """
    """

    CT_ScrollBar: ... = PySide.QtGui.QStyle.ContentsType.CT_ScrollBar
    """
    """

    CT_SizeGrip: ... = PySide.QtGui.QStyle.ContentsType.CT_SizeGrip
    """
    """

    CT_Slider: ... = PySide.QtGui.QStyle.ContentsType.CT_Slider
    """
    """

    CT_SpinBox: ... = PySide.QtGui.QStyle.ContentsType.CT_SpinBox
    """
    """

    CT_Splitter: ... = PySide.QtGui.QStyle.ContentsType.CT_Splitter
    """
    """

    CT_TabBarTab: ... = PySide.QtGui.QStyle.ContentsType.CT_TabBarTab
    """
    """

    CT_TabWidget: ... = PySide.QtGui.QStyle.ContentsType.CT_TabWidget
    """
    """

    CT_ToolButton: ... = PySide.QtGui.QStyle.ContentsType.CT_ToolButton
    """
    """

    ComplexControl: ...
    """
    """

    ContentsType: ...
    """
    """

    ControlElement: ...
    """
    """

    PE_CustomBase: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_CustomBase
    """
    """

    PE_Frame: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_Frame
    """
    """

    PE_FrameButtonBevel: ...
    """
    """

    PE_FrameButtonTool: ...
    """
    """

    PE_FrameDefaultButton: ...
    """
    """

    PE_FrameDockWidget: ...
    """
    """

    PE_FrameFocusRect: ...
    """
    """

    PE_FrameGroupBox: ...
    """
    """

    PE_FrameLineEdit: ...
    """
    """

    PE_FrameMenu: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_FrameMenu
    """
    """

    PE_FrameStatusBar: ...
    """
    """

    PE_FrameStatusBarItem: ...
    """
    """

    PE_FrameTabBarBase: ...
    """
    """

    PE_FrameTabWidget: ...
    """
    """

    PE_FrameWindow: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_FrameWindow
    """
    """

    PE_IndicatorArrowDown: ...
    """
    """

    PE_IndicatorArrowLeft: ...
    """
    """

    PE_IndicatorArrowRight: ...
    """
    """

    PE_IndicatorArrowUp: ...
    """
    """

    PE_IndicatorBranch: ...
    """
    """

    PE_IndicatorButtonDropDown: ...
    """
    """

    PE_IndicatorCheckBox: ...
    """
    """

    PE_IndicatorColumnViewArrow: ...
    """
    """

    PE_IndicatorDockWidgetResizeHandle: ...
    """
    """

    PE_IndicatorHeaderArrow: ...
    """
    """

    PE_IndicatorItemViewItemCheck: ...
    """
    """

    PE_IndicatorItemViewItemDrop: ...
    """
    """

    PE_IndicatorMenuCheckMark: ...
    """
    """

    PE_IndicatorProgressChunk: ...
    """
    """

    PE_IndicatorRadioButton: ...
    """
    """

    PE_IndicatorSpinDown: ...
    """
    """

    PE_IndicatorSpinMinus: ...
    """
    """

    PE_IndicatorSpinPlus: ...
    """
    """

    PE_IndicatorSpinUp: ...
    """
    """

    PE_IndicatorTabClose: ...
    """
    """

    PE_IndicatorTabTear: ...
    """
    """

    PE_IndicatorToolBarHandle: ...
    """
    """

    PE_IndicatorToolBarSeparator: ...
    """
    """

    PE_IndicatorViewItemCheck: ...
    """
    """

    PE_PanelButtonBevel: ...
    """
    """

    PE_PanelButtonCommand: ...
    """
    """

    PE_PanelButtonTool: ...
    """
    """

    PE_PanelItemViewItem: ...
    """
    """

    PE_PanelItemViewRow: ...
    """
    """

    PE_PanelLineEdit: ...
    """
    """

    PE_PanelMenu: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_PanelMenu
    """
    """

    PE_PanelMenuBar: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_PanelMenuBar
    """
    """

    PE_PanelScrollAreaCorner: ...
    """
    """

    PE_PanelStatusBar: ...
    """
    """

    PE_PanelTipLabel: ...
    """
    """

    PE_PanelToolBar: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_PanelToolBar
    """
    """

    PE_Q3CheckListController: ...
    """
    """

    PE_Q3CheckListExclusiveIndicator: ...
    """
    """

    PE_Q3CheckListIndicator: ...
    """
    """

    PE_Q3DockWindowSeparator: ...
    """
    """

    PE_Q3Separator: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_Q3Separator
    """
    """

    PE_Widget: ... = PySide.QtGui.QStyle.PrimitiveElement.PE_Widget
    """
    """

    PM_ButtonDefaultIndicator: ...
    """
    """

    PM_ButtonIconSize: ... = PySide.QtGui.QStyle.PixelMetric.PM_ButtonIconSize
    """
    """

    PM_ButtonMargin: ... = PySide.QtGui.QStyle.PixelMetric.PM_ButtonMargin
    """
    """

    PM_ButtonShiftHorizontal: ...
    """
    """

    PM_ButtonShiftVertical: ...
    """
    """

    PM_CheckBoxLabelSpacing: ...
    """
    """

    PM_CheckListButtonSize: ...
    """
    """

    PM_CheckListControllerSize: ...
    """
    """

    PM_ComboBoxFrameWidth: ...
    """
    """

    PM_CustomBase: ... = PySide.QtGui.QStyle.PixelMetric.PM_CustomBase
    """
    """

    PM_DefaultChildMargin: ...
    """
    """

    PM_DefaultFrameWidth: ...
    """
    """

    PM_DefaultLayoutSpacing: ...
    """
    """

    PM_DefaultTopLevelMargin: ...
    """
    """

    PM_DialogButtonsButtonHeight: ...
    """
    """

    PM_DialogButtonsButtonWidth: ...
    """
    """

    PM_DialogButtonsSeparator: ...
    """
    """

    PM_DockWidgetFrameWidth: ...
    """
    """

    PM_DockWidgetHandleExtent: ...
    """
    """

    PM_DockWidgetSeparatorExtent: ...
    """
    """

    PM_DockWidgetTitleBarButtonMargin: ...
    """
    """

    PM_DockWidgetTitleMargin: ...
    """
    """

    PM_ExclusiveIndicatorHeight: ...
    """
    """

    PM_ExclusiveIndicatorWidth: ...
    """
    """

    PM_FocusFrameHMargin: ...
    """
    """

    PM_FocusFrameVMargin: ...
    """
    """

    PM_HeaderGripMargin: ...
    """
    """

    PM_HeaderMargin: ... = PySide.QtGui.QStyle.PixelMetric.PM_HeaderMargin
    """
    """

    PM_HeaderMarkSize: ... = PySide.QtGui.QStyle.PixelMetric.PM_HeaderMarkSize
    """
    """

    PM_IconViewIconSize: ...
    """
    """

    PM_IndicatorHeight: ...
    """
    """

    PM_IndicatorWidth: ... = PySide.QtGui.QStyle.PixelMetric.PM_IndicatorWidth
    """
    """

    PM_LargeIconSize: ... = PySide.QtGui.QStyle.PixelMetric.PM_LargeIconSize
    """
    """

    PM_LayoutBottomMargin: ...
    """
    """

    PM_LayoutHorizontalSpacing: ...
    """
    """

    PM_LayoutLeftMargin: ...
    """
    """

    PM_LayoutRightMargin: ...
    """
    """

    PM_LayoutTopMargin: ...
    """
    """

    PM_LayoutVerticalSpacing: ...
    """
    """

    PM_ListViewIconSize: ...
    """
    """

    PM_MDIFrameWidth: ... = PySide.QtGui.QStyle.PixelMetric.PM_MDIFrameWidth
    """
    """

    PM_MDIMinimizedWidth: ...
    """
    """

    PM_MaximumDragDistance: ...
    """
    """

    PM_MdiSubWindowFrameWidth: ...
    """
    """

    PM_MdiSubWindowMinimizedWidth: ...
    """
    """

    PM_MenuBarHMargin: ... = PySide.QtGui.QStyle.PixelMetric.PM_MenuBarHMargin
    """
    """

    PM_MenuBarItemSpacing: ...
    """
    """

    PM_MenuBarPanelWidth: ...
    """
    """

    PM_MenuBarVMargin: ... = PySide.QtGui.QStyle.PixelMetric.PM_MenuBarVMargin
    """
    """

    PM_MenuButtonIndicator: ...
    """
    """

    PM_MenuDesktopFrameWidth: ...
    """
    """

    PM_MenuHMargin: ... = PySide.QtGui.QStyle.PixelMetric.PM_MenuHMargin
    """
    """

    PM_MenuPanelWidth: ... = PySide.QtGui.QStyle.PixelMetric.PM_MenuPanelWidth
    """
    """

    PM_MenuScrollerHeight: ...
    """
    """

    PM_MenuTearoffHeight: ...
    """
    """

    PM_MenuVMargin: ... = PySide.QtGui.QStyle.PixelMetric.PM_MenuVMargin
    """
    """

    PM_MessageBoxIconSize: ...
    """
    """

    PM_ProgressBarChunkWidth: ...
    """
    """

    PM_RadioButtonLabelSpacing: ...
    """
    """

    PM_ScrollBarExtent: ...
    """
    """

    PM_ScrollBarSliderMin: ...
    """
    """

    PM_ScrollView_ScrollBarSpacing: ...
    """
    """

    PM_SizeGripSize: ... = PySide.QtGui.QStyle.PixelMetric.PM_SizeGripSize
    """
    """

    PM_SliderControlThickness: ...
    """
    """

    PM_SliderLength: ... = PySide.QtGui.QStyle.PixelMetric.PM_SliderLength
    """
    """

    PM_SliderSpaceAvailable: ...
    """
    """

    PM_SliderThickness: ...
    """
    """

    PM_SliderTickmarkOffset: ...
    """
    """

    PM_SmallIconSize: ... = PySide.QtGui.QStyle.PixelMetric.PM_SmallIconSize
    """
    """

    PM_SpinBoxFrameWidth: ...
    """
    """

    PM_SpinBoxSliderHeight: ...
    """
    """

    PM_SplitterWidth: ... = PySide.QtGui.QStyle.PixelMetric.PM_SplitterWidth
    """
    """

    PM_SubMenuOverlap: ... = PySide.QtGui.QStyle.PixelMetric.PM_SubMenuOverlap
    """
    """

    PM_TabBarBaseHeight: ...
    """
    """

    PM_TabBarBaseOverlap: ...
    """
    """

    PM_TabBarIconSize: ... = PySide.QtGui.QStyle.PixelMetric.PM_TabBarIconSize
    """
    """

    PM_TabBarScrollButtonWidth: ...
    """
    """

    PM_TabBarTabHSpace: ...
    """
    """

    PM_TabBarTabOverlap: ...
    """
    """

    PM_TabBarTabShiftHorizontal: ...
    """
    """

    PM_TabBarTabShiftVertical: ...
    """
    """

    PM_TabBarTabVSpace: ...
    """
    """

    PM_TabBar_ScrollButtonOverlap: ...
    """
    """

    PM_TabCloseIndicatorHeight: ...
    """
    """

    PM_TabCloseIndicatorWidth: ...
    """
    """

    PM_TextCursorWidth: ...
    """
    """

    PM_TitleBarHeight: ... = PySide.QtGui.QStyle.PixelMetric.PM_TitleBarHeight
    """
    """

    PM_ToolBarExtensionExtent: ...
    """
    """

    PM_ToolBarFrameWidth: ...
    """
    """

    PM_ToolBarHandleExtent: ...
    """
    """

    PM_ToolBarIconSize: ...
    """
    """

    PM_ToolBarItemMargin: ...
    """
    """

    PM_ToolBarItemSpacing: ...
    """
    """

    PM_ToolBarSeparatorExtent: ...
    """
    """

    PM_ToolTipLabelFrameWidth: ...
    """
    """

    PixelMetric: ...
    """
    """

    PrimitiveElement: ...
    """
    """

    RSIP_OnMouseClick: ...
    """
    """

    RSIP_OnMouseClickAndAlreadyFocused: ...
    """
    """

    RequestSoftwareInputPanel: ...
    """
    """

    SC_All: ... = PySide.QtGui.QStyle.SubControl.SC_All
    """
    """

    SC_ComboBoxArrow: ... = PySide.QtGui.QStyle.SubControl.SC_ComboBoxArrow
    """
    """

    SC_ComboBoxEditField: ...
    """
    """

    SC_ComboBoxFrame: ... = PySide.QtGui.QStyle.SubControl.SC_ComboBoxFrame
    """
    """

    SC_ComboBoxListBoxPopup: ...
    """
    """

    SC_CustomBase: ... = PySide.QtGui.QStyle.SubControl.SC_CustomBase
    """
    """

    SC_DialGroove: ... = PySide.QtGui.QStyle.SubControl.SC_DialGroove
    """
    """

    SC_DialHandle: ... = PySide.QtGui.QStyle.SubControl.SC_DialHandle
    """
    """

    SC_DialTickmarks: ... = PySide.QtGui.QStyle.SubControl.SC_DialTickmarks
    """
    """

    SC_GroupBoxCheckBox: ...
    """
    """

    SC_GroupBoxContents: ...
    """
    """

    SC_GroupBoxFrame: ... = PySide.QtGui.QStyle.SubControl.SC_GroupBoxFrame
    """
    """

    SC_GroupBoxLabel: ... = PySide.QtGui.QStyle.SubControl.SC_GroupBoxLabel
    """
    """

    SC_MdiCloseButton: ... = PySide.QtGui.QStyle.SubControl.SC_MdiCloseButton
    """
    """

    SC_MdiMinButton: ... = PySide.QtGui.QStyle.SubControl.SC_MdiMinButton
    """
    """

    SC_MdiNormalButton: ... = PySide.QtGui.QStyle.SubControl.SC_MdiNormalButton
    """
    """

    SC_None: ... = PySide.QtGui.QStyle.SubControl.SC_None
    """
    """

    SC_Q3ListView: ... = PySide.QtGui.QStyle.SubControl.SC_Q3ListView
    """
    """

    SC_Q3ListViewBranch: ...
    """
    """

    SC_Q3ListViewExpand: ...
    """
    """

    SC_ScrollBarAddLine: ...
    """
    """

    SC_ScrollBarAddPage: ...
    """
    """

    SC_ScrollBarFirst: ... = PySide.QtGui.QStyle.SubControl.SC_ScrollBarFirst
    """
    """

    SC_ScrollBarGroove: ... = PySide.QtGui.QStyle.SubControl.SC_ScrollBarGroove
    """
    """

    SC_ScrollBarLast: ... = PySide.QtGui.QStyle.SubControl.SC_ScrollBarLast
    """
    """

    SC_ScrollBarSlider: ... = PySide.QtGui.QStyle.SubControl.SC_ScrollBarSlider
    """
    """

    SC_ScrollBarSubLine: ...
    """
    """

    SC_ScrollBarSubPage: ...
    """
    """

    SC_SliderGroove: ... = PySide.QtGui.QStyle.SubControl.SC_SliderGroove
    """
    """

    SC_SliderHandle: ... = PySide.QtGui.QStyle.SubControl.SC_SliderHandle
    """
    """

    SC_SliderTickmarks: ... = PySide.QtGui.QStyle.SubControl.SC_SliderTickmarks
    """
    """

    SC_SpinBoxDown: ... = PySide.QtGui.QStyle.SubControl.SC_SpinBoxDown
    """
    """

    SC_SpinBoxEditField: ...
    """
    """

    SC_SpinBoxFrame: ... = PySide.QtGui.QStyle.SubControl.SC_SpinBoxFrame
    """
    """

    SC_SpinBoxUp: ... = PySide.QtGui.QStyle.SubControl.SC_SpinBoxUp
    """
    """

    SC_TitleBarCloseButton: ...
    """
    """

    SC_TitleBarContextHelpButton: ...
    """
    """

    SC_TitleBarLabel: ... = PySide.QtGui.QStyle.SubControl.SC_TitleBarLabel
    """
    """

    SC_TitleBarMaxButton: ...
    """
    """

    SC_TitleBarMinButton: ...
    """
    """

    SC_TitleBarNormalButton: ...
    """
    """

    SC_TitleBarShadeButton: ...
    """
    """

    SC_TitleBarSysMenu: ... = PySide.QtGui.QStyle.SubControl.SC_TitleBarSysMenu
    """
    """

    SC_TitleBarUnshadeButton: ...
    """
    """

    SC_ToolButton: ... = PySide.QtGui.QStyle.SubControl.SC_ToolButton
    """
    """

    SC_ToolButtonMenu: ... = PySide.QtGui.QStyle.SubControl.SC_ToolButtonMenu
    """
    """

    SE_CheckBoxClickRect: ...
    """
    """

    SE_CheckBoxContents: ...
    """
    """

    SE_CheckBoxFocusRect: ...
    """
    """

    SE_CheckBoxIndicator: ...
    """
    """

    SE_CheckBoxLayoutItem: ...
    """
    """

    SE_ComboBoxFocusRect: ...
    """
    """

    SE_ComboBoxLayoutItem: ...
    """
    """

    SE_CustomBase: ... = PySide.QtGui.QStyle.SubElement.SE_CustomBase
    """
    """

    SE_DateTimeEditLayoutItem: ...
    """
    """

    SE_DialogButtonAbort: ...
    """
    """

    SE_DialogButtonAccept: ...
    """
    """

    SE_DialogButtonAll: ... = PySide.QtGui.QStyle.SubElement.SE_DialogButtonAll
    """
    """

    SE_DialogButtonApply: ...
    """
    """

    SE_DialogButtonBoxLayoutItem: ...
    """
    """

    SE_DialogButtonCustom: ...
    """
    """

    SE_DialogButtonHelp: ...
    """
    """

    SE_DialogButtonIgnore: ...
    """
    """

    SE_DialogButtonReject: ...
    """
    """

    SE_DialogButtonRetry: ...
    """
    """

    SE_DockWidgetCloseButton: ...
    """
    """

    SE_DockWidgetFloatButton: ...
    """
    """

    SE_DockWidgetIcon: ... = PySide.QtGui.QStyle.SubElement.SE_DockWidgetIcon
    """
    """

    SE_DockWidgetTitleBarText: ...
    """
    """

    SE_FrameContents: ... = PySide.QtGui.QStyle.SubElement.SE_FrameContents
    """
    """

    SE_FrameLayoutItem: ... = PySide.QtGui.QStyle.SubElement.SE_FrameLayoutItem
    """
    """

    SE_GroupBoxLayoutItem: ...
    """
    """

    SE_HeaderArrow: ... = PySide.QtGui.QStyle.SubElement.SE_HeaderArrow
    """
    """

    SE_HeaderLabel: ... = PySide.QtGui.QStyle.SubElement.SE_HeaderLabel
    """
    """

    SE_ItemViewItemCheckIndicator: ...
    """
    """

    SE_ItemViewItemDecoration: ...
    """
    """

    SE_ItemViewItemFocusRect: ...
    """
    """

    SE_ItemViewItemText: ...
    """
    """

    SE_LabelLayoutItem: ... = PySide.QtGui.QStyle.SubElement.SE_LabelLayoutItem
    """
    """

    SE_LineEditContents: ...
    """
    """

    SE_ProgressBarContents: ...
    """
    """

    SE_ProgressBarGroove: ...
    """
    """

    SE_ProgressBarLabel: ...
    """
    """

    SE_ProgressBarLayoutItem: ...
    """
    """

    SE_PushButtonContents: ...
    """
    """

    SE_PushButtonFocusRect: ...
    """
    """

    SE_PushButtonLayoutItem: ...
    """
    """

    SE_Q3DockWindowHandleRect: ...
    """
    """

    SE_RadioButtonClickRect: ...
    """
    """

    SE_RadioButtonContents: ...
    """
    """

    SE_RadioButtonFocusRect: ...
    """
    """

    SE_RadioButtonIndicator: ...
    """
    """

    SE_RadioButtonLayoutItem: ...
    """
    """

    SE_ShapedFrameContents: ...
    """
    """

    SE_SliderFocusRect: ... = PySide.QtGui.QStyle.SubElement.SE_SliderFocusRect
    """
    """

    SE_SliderLayoutItem: ...
    """
    """

    SE_SpinBoxLayoutItem: ...
    """
    """

    SE_TabBarTabLeftButton: ...
    """
    """

    SE_TabBarTabRightButton: ...
    """
    """

    SE_TabBarTabText: ... = PySide.QtGui.QStyle.SubElement.SE_TabBarTabText
    """
    """

    SE_TabBarTearIndicator: ...
    """
    """

    SE_TabWidgetLayoutItem: ...
    """
    """

    SE_TabWidgetLeftCorner: ...
    """
    """

    SE_TabWidgetRightCorner: ...
    """
    """

    SE_TabWidgetTabBar: ... = PySide.QtGui.QStyle.SubElement.SE_TabWidgetTabBar
    """
    """

    SE_TabWidgetTabContents: ...
    """
    """

    SE_TabWidgetTabPane: ...
    """
    """

    SE_ToolBarHandle: ... = PySide.QtGui.QStyle.SubElement.SE_ToolBarHandle
    """
    """

    SE_ToolBoxTabContents: ...
    """
    """

    SE_ToolButtonLayoutItem: ...
    """
    """

    SE_TreeViewDisclosureItem: ...
    """
    """

    SE_ViewItemCheckIndicator: ...
    """
    """

    SH_BlinkCursorWhenTextSelected: ...
    """
    """

    SH_Button_FocusPolicy: ...
    """
    """

    SH_ComboBox_LayoutDirection: ...
    """
    """

    SH_ComboBox_ListMouseTracking: ...
    """
    """

    SH_ComboBox_Popup: ... = PySide.QtGui.QStyle.StyleHint.SH_ComboBox_Popup
    """
    """

    SH_ComboBox_PopupFrameStyle: ...
    """
    """

    SH_CustomBase: ... = PySide.QtGui.QStyle.StyleHint.SH_CustomBase
    """
    """

    SH_Dial_BackgroundRole: ...
    """
    """

    SH_DialogButtonBox_ButtonsHaveIcons: ...
    """
    """

    SH_DialogButtonLayout: ...
    """
    """

    SH_DialogButtons_DefaultButton: ...
    """
    """

    SH_DitherDisabledText: ...
    """
    """

    SH_DockWidget_ButtonsHaveFrame: ...
    """
    """

    SH_DrawMenuBarSeparator: ...
    """
    """

    SH_EtchDisabledText: ...
    """
    """

    SH_FocusFrame_AboveWidget: ...
    """
    """

    SH_FocusFrame_Mask: ... = PySide.QtGui.QStyle.StyleHint.SH_FocusFrame_Mask
    """
    """

    SH_FontDialog_SelectAssociatedText: ...
    """
    """

    SH_FormLayoutFieldGrowthPolicy: ...
    """
    """

    SH_FormLayoutFormAlignment: ...
    """
    """

    SH_FormLayoutLabelAlignment: ...
    """
    """

    SH_FormLayoutWrapPolicy: ...
    """
    """

    SH_GroupBox_TextLabelColor: ...
    """
    """

    SH_GroupBox_TextLabelVerticalAlignment: ...
    """
    """

    SH_Header_ArrowAlignment: ...
    """
    """

    SH_ItemView_ActivateItemOnSingleClick: ...
    """
    """

    SH_ItemView_ArrowKeysNavigateIntoChildren: ...
    """
    """

    SH_ItemView_ChangeHighlightOnFocus: ...
    """
    """

    SH_ItemView_DrawDelegateFrame: ...
    """
    """

    SH_ItemView_EllipsisLocation: ...
    """
    """

    SH_ItemView_MovementWithoutUpdatingSelection: ...
    """
    """

    SH_ItemView_PaintAlternatingRowColorsForEmptyArea: ...
    """
    """

    SH_ItemView_ShowDecorationSelected: ...
    """
    """

    SH_LineEdit_PasswordCharacter: ...
    """
    """

    SH_MainWindow_SpaceBelowMenuBar: ...
    """
    """

    SH_MenuBar_AltKeyNavigation: ...
    """
    """

    SH_MenuBar_DismissOnSecondClick: ...
    """
    """

    SH_MenuBar_MouseTracking: ...
    """
    """

    SH_Menu_AllowActiveAndDisabled: ...
    """
    """

    SH_Menu_FadeOutOnHide: ...
    """
    """

    SH_Menu_FillScreenWithScroll: ...
    """
    """

    SH_Menu_FlashTriggeredItem: ...
    """
    """

    SH_Menu_KeyboardSearch: ...
    """
    """

    SH_Menu_Mask: ... = PySide.QtGui.QStyle.StyleHint.SH_Menu_Mask
    """
    """

    SH_Menu_MouseTracking: ...
    """
    """

    SH_Menu_Scrollable: ... = PySide.QtGui.QStyle.StyleHint.SH_Menu_Scrollable
    """
    """

    SH_Menu_SelectionWrap: ...
    """
    """

    SH_Menu_SloppySubMenus: ...
    """
    """

    SH_Menu_SpaceActivatesItem: ...
    """
    """

    SH_Menu_SubMenuPopupDelay: ...
    """
    """

    SH_MessageBox_CenterButtons: ...
    """
    """

    SH_MessageBox_TextInteractionFlags: ...
    """
    """

    SH_MessageBox_UseBorderForButtonSpacing: ...
    """
    """

    SH_PrintDialog_RightAlignButtons: ...
    """
    """

    SH_ProgressDialog_CenterCancelButton: ...
    """
    """

    SH_ProgressDialog_TextLabelAlignment: ...
    """
    """

    SH_Q3ListViewExpand_SelectMouseType: ...
    """
    """

    SH_RequestSoftwareInputPanel: ...
    """
    """

    SH_RichText_FullWidthSelection: ...
    """
    """

    SH_RubberBand_Mask: ... = PySide.QtGui.QStyle.StyleHint.SH_RubberBand_Mask
    """
    """

    SH_ScrollBar_ContextMenu: ...
    """
    """

    SH_ScrollBar_LeftClickAbsolutePosition: ...
    """
    """

    SH_ScrollBar_MiddleClickAbsolutePosition: ...
    """
    """

    SH_ScrollBar_RollBetweenButtons: ...
    """
    """

    SH_ScrollBar_ScrollWhenPointerLeavesControl: ...
    """
    """

    SH_ScrollBar_StopMouseOverSlider: ...
    """
    """

    SH_ScrollView_FrameOnlyAroundContents: ...
    """
    """

    SH_Slider_AbsoluteSetButtons: ...
    """
    """

    SH_Slider_PageSetButtons: ...
    """
    """

    SH_Slider_SloppyKeyEvents: ...
    """
    """

    SH_Slider_SnapToValue: ...
    """
    """

    SH_Slider_StopMouseOverSlider: ...
    """
    """

    SH_SpellCheckUnderlineStyle: ...
    """
    """

    SH_SpinBox_AnimateButton: ...
    """
    """

    SH_SpinBox_ClickAutoRepeatRate: ...
    """
    """

    SH_SpinBox_ClickAutoRepeatThreshold: ...
    """
    """

    SH_SpinBox_KeyPressAutoRepeatRate: ...
    """
    """

    SH_SpinControls_DisableOnBounds: ...
    """
    """

    SH_TabBar_Alignment: ...
    """
    """

    SH_TabBar_CloseButtonPosition: ...
    """
    """

    SH_TabBar_ElideMode: ...
    """
    """

    SH_TabBar_PreferNoArrows: ...
    """
    """

    SH_TabBar_SelectMouseType: ...
    """
    """

    SH_TabWidget_DefaultTabPosition: ...
    """
    """

    SH_Table_GridLineColor: ...
    """
    """

    SH_TextControl_FocusIndicatorTextCharFormat: ...
    """
    """

    SH_TitleBar_AutoRaise: ...
    """
    """

    SH_TitleBar_ModifyNotification: ...
    """
    """

    SH_TitleBar_NoBorder: ...
    """
    """

    SH_ToolBar_Movable: ... = PySide.QtGui.QStyle.StyleHint.SH_ToolBar_Movable
    """
    """

    SH_ToolBox_SelectedPageTitleBold: ...
    """
    """

    SH_ToolButtonStyle: ... = PySide.QtGui.QStyle.StyleHint.SH_ToolButtonStyle
    """
    """

    SH_ToolButton_PopupDelay: ...
    """
    """

    SH_ToolTipLabel_Opacity: ...
    """
    """

    SH_ToolTip_Mask: ... = PySide.QtGui.QStyle.StyleHint.SH_ToolTip_Mask
    """
    """

    SH_UnderlineShortcut: ...
    """
    """

    SH_Widget_ShareActivation: ...
    """
    """

    SH_WindowFrame_Mask: ...
    """
    """

    SH_WizardStyle: ... = PySide.QtGui.QStyle.StyleHint.SH_WizardStyle
    """
    """

    SH_Workspace_FillSpaceOnMaximize: ...
    """
    """

    SP_ArrowBack: ... = PySide.QtGui.QStyle.StandardPixmap.SP_ArrowBack
    """
    """

    SP_ArrowDown: ... = PySide.QtGui.QStyle.StandardPixmap.SP_ArrowDown
    """
    """

    SP_ArrowForward: ... = PySide.QtGui.QStyle.StandardPixmap.SP_ArrowForward
    """
    """

    SP_ArrowLeft: ... = PySide.QtGui.QStyle.StandardPixmap.SP_ArrowLeft
    """
    """

    SP_ArrowRight: ... = PySide.QtGui.QStyle.StandardPixmap.SP_ArrowRight
    """
    """

    SP_ArrowUp: ... = PySide.QtGui.QStyle.StandardPixmap.SP_ArrowUp
    """
    """

    SP_BrowserReload: ... = PySide.QtGui.QStyle.StandardPixmap.SP_BrowserReload
    """
    """

    SP_BrowserStop: ... = PySide.QtGui.QStyle.StandardPixmap.SP_BrowserStop
    """
    """

    SP_CommandLink: ... = PySide.QtGui.QStyle.StandardPixmap.SP_CommandLink
    """
    """

    SP_ComputerIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_ComputerIcon
    """
    """

    SP_CustomBase: ... = PySide.QtGui.QStyle.StandardPixmap.SP_CustomBase
    """
    """

    SP_DesktopIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DesktopIcon
    """
    """

    SP_DialogApplyButton: ...
    """
    """

    SP_DialogCancelButton: ...
    """
    """

    SP_DialogCloseButton: ...
    """
    """

    SP_DialogDiscardButton: ...
    """
    """

    SP_DialogHelpButton: ...
    """
    """

    SP_DialogNoButton: ...
    """
    """

    SP_DialogOkButton: ...
    """
    """

    SP_DialogOpenButton: ...
    """
    """

    SP_DialogResetButton: ...
    """
    """

    SP_DialogSaveButton: ...
    """
    """

    SP_DialogYesButton: ...
    """
    """

    SP_DirClosedIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DirClosedIcon
    """
    """

    SP_DirHomeIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DirHomeIcon
    """
    """

    SP_DirIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DirIcon
    """
    """

    SP_DirLinkIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DirLinkIcon
    """
    """

    SP_DirOpenIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DirOpenIcon
    """
    """

    SP_DockWidgetCloseButton: ...
    """
    """

    SP_DriveCDIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DriveCDIcon
    """
    """

    SP_DriveDVDIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DriveDVDIcon
    """
    """

    SP_DriveFDIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DriveFDIcon
    """
    """

    SP_DriveHDIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DriveHDIcon
    """
    """

    SP_DriveNetIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_DriveNetIcon
    """
    """

    SP_FileDialogBack: ...
    """
    """

    SP_FileDialogContentsView: ...
    """
    """

    SP_FileDialogDetailedView: ...
    """
    """

    SP_FileDialogEnd: ... = PySide.QtGui.QStyle.StandardPixmap.SP_FileDialogEnd
    """
    """

    SP_FileDialogInfoView: ...
    """
    """

    SP_FileDialogListView: ...
    """
    """

    SP_FileDialogNewFolder: ...
    """
    """

    SP_FileDialogStart: ...
    """
    """

    SP_FileDialogToParent: ...
    """
    """

    SP_FileIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_FileIcon
    """
    """

    SP_FileLinkIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_FileLinkIcon
    """
    """

    SP_MediaPause: ... = PySide.QtGui.QStyle.StandardPixmap.SP_MediaPause
    """
    """

    SP_MediaPlay: ... = PySide.QtGui.QStyle.StandardPixmap.SP_MediaPlay
    """
    """

    SP_MediaSeekBackward: ...
    """
    """

    SP_MediaSeekForward: ...
    """
    """

    SP_MediaSkipBackward: ...
    """
    """

    SP_MediaSkipForward: ...
    """
    """

    SP_MediaStop: ... = PySide.QtGui.QStyle.StandardPixmap.SP_MediaStop
    """
    """

    SP_MediaVolume: ... = PySide.QtGui.QStyle.StandardPixmap.SP_MediaVolume
    """
    """

    SP_MediaVolumeMuted: ...
    """
    """

    SP_MessageBoxCritical: ...
    """
    """

    SP_MessageBoxInformation: ...
    """
    """

    SP_MessageBoxQuestion: ...
    """
    """

    SP_MessageBoxWarning: ...
    """
    """

    SP_TitleBarCloseButton: ...
    """
    """

    SP_TitleBarContextHelpButton: ...
    """
    """

    SP_TitleBarMaxButton: ...
    """
    """

    SP_TitleBarMenuButton: ...
    """
    """

    SP_TitleBarMinButton: ...
    """
    """

    SP_TitleBarNormalButton: ...
    """
    """

    SP_TitleBarShadeButton: ...
    """
    """

    SP_TitleBarUnshadeButton: ...
    """
    """

    SP_ToolBarHorizontalExtensionButton: ...
    """
    """

    SP_ToolBarVerticalExtensionButton: ...
    """
    """

    SP_TrashIcon: ... = PySide.QtGui.QStyle.StandardPixmap.SP_TrashIcon
    """
    """

    SP_VistaShield: ... = PySide.QtGui.QStyle.StandardPixmap.SP_VistaShield
    """
    """

    StandardPixmap: ...
    """
    """

    State: ...
    """
    """

    StateFlag: ...
    """
    """

    State_Active: ... = PySide.QtGui.QStyle.StateFlag.State_Active
    """
    """

    State_AutoRaise: ... = PySide.QtGui.QStyle.StateFlag.State_AutoRaise
    """
    """

    State_Bottom: ... = PySide.QtGui.QStyle.StateFlag.State_Bottom
    """
    """

    State_Children: ... = PySide.QtGui.QStyle.StateFlag.State_Children
    """
    """

    State_DownArrow: ... = PySide.QtGui.QStyle.StateFlag.State_DownArrow
    """
    """

    State_Editing: ... = PySide.QtGui.QStyle.StateFlag.State_Editing
    """
    """

    State_Enabled: ... = PySide.QtGui.QStyle.StateFlag.State_Enabled
    """
    """

    State_FocusAtBorder: ...
    """
    """

    State_HasFocus: ... = PySide.QtGui.QStyle.StateFlag.State_HasFocus
    """
    """

    State_Horizontal: ... = PySide.QtGui.QStyle.StateFlag.State_Horizontal
    """
    """

    State_Item: ... = PySide.QtGui.QStyle.StateFlag.State_Item
    """
    """

    State_KeyboardFocusChange: ...
    """
    """

    State_Mini: ... = PySide.QtGui.QStyle.StateFlag.State_Mini
    """
    """

    State_MouseOver: ... = PySide.QtGui.QStyle.StateFlag.State_MouseOver
    """
    """

    State_NoChange: ... = PySide.QtGui.QStyle.StateFlag.State_NoChange
    """
    """

    State_None: ... = PySide.QtGui.QStyle.StateFlag.State_None
    """
    """

    State_Off: ... = PySide.QtGui.QStyle.StateFlag.State_Off
    """
    """

    State_On: ... = PySide.QtGui.QStyle.StateFlag.State_On
    """
    """

    State_Open: ... = PySide.QtGui.QStyle.StateFlag.State_Open
    """
    """

    State_Raised: ... = PySide.QtGui.QStyle.StateFlag.State_Raised
    """
    """

    State_ReadOnly: ... = PySide.QtGui.QStyle.StateFlag.State_ReadOnly
    """
    """

    State_Selected: ... = PySide.QtGui.QStyle.StateFlag.State_Selected
    """
    """

    State_Sibling: ... = PySide.QtGui.QStyle.StateFlag.State_Sibling
    """
    """

    State_Small: ... = PySide.QtGui.QStyle.StateFlag.State_Small
    """
    """

    State_Sunken: ... = PySide.QtGui.QStyle.StateFlag.State_Sunken
    """
    """

    State_Top: ... = PySide.QtGui.QStyle.StateFlag.State_Top
    """
    """

    State_UpArrow: ... = PySide.QtGui.QStyle.StateFlag.State_UpArrow
    """
    """

    State_Window: ... = PySide.QtGui.QStyle.StateFlag.State_Window
    """
    """

    StyleHint: ...
    """
    """

    SubControl: ...
    """
    """

    SubControls: ...
    """
    """

    SubElement: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def alignedRect(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def sliderPositionFromValue(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def sliderValueFromPosition(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def visualAlignment(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def visualPos(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def visualRect(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def combinedLayoutSpacing(self, *args, **kwargs):
        """
        """
        ...

    def drawComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawItemPixmap(self, *args, **kwargs):
        """
        """
        ...

    def drawItemText(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def generatedIconPixmap(self, *args, **kwargs):
        """
        """
        ...

    def hitTestComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def itemPixmapRect(self, *args, **kwargs):
        """
        """
        ...

    def itemTextRect(self, *args, **kwargs):
        """
        """
        ...

    def layoutSpacing(self, *args, **kwargs):
        """
        """
        ...

    def layoutSpacingImplementation(self, *args, **kwargs):
        """
        """
        ...

    def pixelMetric(self, *args, **kwargs):
        """
        """
        ...

    def polish(self, *args, **kwargs):
        """
        """
        ...

    def proxy(self, *args, **kwargs):
        """
        """
        ...

    def sizeFromContents(self, *args, **kwargs):
        """
        """
        ...

    def standardIcon(self, *args, **kwargs):
        """
        """
        ...

    def standardIconImplementation(self, *args, **kwargs):
        """
        """
        ...

    def standardPalette(self, *args, **kwargs):
        """
        """
        ...

    def standardPixmap(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def subControlRect(self, *args, **kwargs):
        """
        """
        ...

    def subElementRect(self, *args, **kwargs):
        """
        """
        ...

    def unpolish(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStyleFactory(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def create(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def keys(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleHintReturn(Shiboken.Object):
    HintReturnType: ...
    """
    """

    SH_Default: ... = PySide.QtGui.QStyleHintReturn.HintReturnType.SH_Default
    """
    """

    SH_Mask: ... = PySide.QtGui.QStyleHintReturn.HintReturnType.SH_Mask
    """
    """

    SH_Variant: ... = PySide.QtGui.QStyleHintReturn.HintReturnType.SH_Variant
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleHintReturn.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleHintReturn.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleHintReturnMask(QStyleHintReturn):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleHintReturnMask.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleHintReturnMask.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleHintReturnVariant(QStyleHintReturn):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleHintReturnVariant.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOption(Shiboken.Object):
    OptionType: ...
    """
    """

    SO_Button: ... = PySide.QtGui.QStyleOption.OptionType.SO_Button
    """
    """

    SO_ComboBox: ... = PySide.QtGui.QStyleOption.OptionType.SO_ComboBox
    """
    """

    SO_Complex: ... = PySide.QtGui.QStyleOption.OptionType.SO_Complex
    """
    """

    SO_ComplexCustomBase: ...
    """
    """

    SO_CustomBase: ... = PySide.QtGui.QStyleOption.OptionType.SO_CustomBase
    """
    """

    SO_Default: ... = PySide.QtGui.QStyleOption.OptionType.SO_Default
    """
    """

    SO_DockWidget: ... = PySide.QtGui.QStyleOption.OptionType.SO_DockWidget
    """
    """

    SO_FocusRect: ... = PySide.QtGui.QStyleOption.OptionType.SO_FocusRect
    """
    """

    SO_Frame: ... = PySide.QtGui.QStyleOption.OptionType.SO_Frame
    """
    """

    SO_GraphicsItem: ... = PySide.QtGui.QStyleOption.OptionType.SO_GraphicsItem
    """
    """

    SO_GroupBox: ... = PySide.QtGui.QStyleOption.OptionType.SO_GroupBox
    """
    """

    SO_Header: ... = PySide.QtGui.QStyleOption.OptionType.SO_Header
    """
    """

    SO_MenuItem: ... = PySide.QtGui.QStyleOption.OptionType.SO_MenuItem
    """
    """

    SO_ProgressBar: ... = PySide.QtGui.QStyleOption.OptionType.SO_ProgressBar
    """
    """

    SO_Q3DockWindow: ... = PySide.QtGui.QStyleOption.OptionType.SO_Q3DockWindow
    """
    """

    SO_Q3ListView: ... = PySide.QtGui.QStyleOption.OptionType.SO_Q3ListView
    """
    """

    SO_Q3ListViewItem: ...
    """
    """

    SO_RubberBand: ... = PySide.QtGui.QStyleOption.OptionType.SO_RubberBand
    """
    """

    SO_SizeGrip: ... = PySide.QtGui.QStyleOption.OptionType.SO_SizeGrip
    """
    """

    SO_Slider: ... = PySide.QtGui.QStyleOption.OptionType.SO_Slider
    """
    """

    SO_SpinBox: ... = PySide.QtGui.QStyleOption.OptionType.SO_SpinBox
    """
    """

    SO_Tab: ... = PySide.QtGui.QStyleOption.OptionType.SO_Tab
    """
    """

    SO_TabBarBase: ... = PySide.QtGui.QStyleOption.OptionType.SO_TabBarBase
    """
    """

    SO_TabWidgetFrame: ...
    """
    """

    SO_TitleBar: ... = PySide.QtGui.QStyleOption.OptionType.SO_TitleBar
    """
    """

    SO_ToolBar: ... = PySide.QtGui.QStyleOption.OptionType.SO_ToolBar
    """
    """

    SO_ToolBox: ... = PySide.QtGui.QStyleOption.OptionType.SO_ToolBox
    """
    """

    SO_ToolButton: ... = PySide.QtGui.QStyleOption.OptionType.SO_ToolButton
    """
    """

    SO_ViewItem: ... = PySide.QtGui.QStyleOption.OptionType.SO_ViewItem
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOption.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOption.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def initFrom(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStyleOptionButton(QStyleOption):
    AutoDefaultButton: ...
    """
    """

    ButtonFeature: ...
    """
    """

    ButtonFeatures: ...
    """
    """

    CommandLinkButton: ...
    """
    """

    DefaultButton: ...
    """
    """

    Flat: ... = PySide.QtGui.QStyleOptionButton.ButtonFeature.Flat
    """
    """

    HasMenu: ... = PySide.QtGui.QStyleOptionButton.ButtonFeature.HasMenu
    """
    """

    None: ... = PySide.QtGui.QStyleOptionButton.ButtonFeature.None
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionButton.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionButton.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionComboBox(QStyleOptionComplex):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionComboBox.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionComboBox.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionComplex(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionComplex.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionComplex.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionDockWidget(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionDockWidget.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionDockWidgetV2(QStyleOptionDockWidget):
    StyleOptionVersion: ...
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionFocusRect(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionFocusRect.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionFrame(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionFrame.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionFrame.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionFrameV2(QStyleOptionFrame):
    Flat: ... = PySide.QtGui.QStyleOptionFrameV2.FrameFeature.Flat
    """
    """

    FrameFeature: ...
    """
    """

    FrameFeatures: ...
    """
    """

    None: ... = PySide.QtGui.QStyleOptionFrameV2.FrameFeature.None
    """
    """

    StyleOptionVersion: ...
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionFrameV2.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionFrameV3(QStyleOptionFrameV2):
    StyleOptionVersion: ...
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionFrameV3.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionGraphicsItem(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionGraphicsItem.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def levelOfDetailFromTransform(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionGroupBox(QStyleOptionComplex):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionGroupBox.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionGroupBox.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionHeader(QStyleOption):
    Beginning: ... = PySide.QtGui.QStyleOptionHeader.SectionPosition.Beginning
    """
    """

    End: ... = PySide.QtGui.QStyleOptionHeader.SectionPosition.End
    """
    """

    Middle: ... = PySide.QtGui.QStyleOptionHeader.SectionPosition.Middle
    """
    """

    NextAndPreviousAreSelected: ...
    """
    """

    NextIsSelected: ...
    """
    """

    None: ... = PySide.QtGui.QStyleOptionHeader.SortIndicator.None
    """
    """

    NotAdjacent: ...
    """
    """

    OnlyOneSection: ...
    """
    """

    PreviousIsSelected: ...
    """
    """

    SectionPosition: ...
    """
    """

    SelectedPosition: ...
    """
    """

    SortDown: ... = PySide.QtGui.QStyleOptionHeader.SortIndicator.SortDown
    """
    """

    SortIndicator: ...
    """
    """

    SortUp: ... = PySide.QtGui.QStyleOptionHeader.SortIndicator.SortUp
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionHeader.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionHeader.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionMenuItem(QStyleOption):
    CheckType: ...
    """
    """

    DefaultItem: ...
    """
    """

    EmptyArea: ... = PySide.QtGui.QStyleOptionMenuItem.MenuItemType.EmptyArea
    """
    """

    Exclusive: ... = PySide.QtGui.QStyleOptionMenuItem.CheckType.Exclusive
    """
    """

    Margin: ... = PySide.QtGui.QStyleOptionMenuItem.MenuItemType.Margin
    """
    """

    MenuItemType: ...
    """
    """

    NonExclusive: ...
    """
    """

    Normal: ... = PySide.QtGui.QStyleOptionMenuItem.MenuItemType.Normal
    """
    """

    NotCheckable: ...
    """
    """

    Scroller: ... = PySide.QtGui.QStyleOptionMenuItem.MenuItemType.Scroller
    """
    """

    Separator: ... = PySide.QtGui.QStyleOptionMenuItem.MenuItemType.Separator
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    SubMenu: ... = PySide.QtGui.QStyleOptionMenuItem.MenuItemType.SubMenu
    """
    """

    TearOff: ... = PySide.QtGui.QStyleOptionMenuItem.MenuItemType.TearOff
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionMenuItem.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionMenuItem.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionProgressBar(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionProgressBar.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionProgressBarV2(QStyleOptionProgressBar):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionProgressBarV2.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionRubberBand(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionRubberBand.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionSizeGrip(QStyleOptionComplex):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionSizeGrip.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionSizeGrip.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionSlider(QStyleOptionComplex):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionSlider.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionSlider.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionSpinBox(QStyleOptionComplex):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionSpinBox.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionSpinBox.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionTab(QStyleOption):
    Beginning: ... = PySide.QtGui.QStyleOptionTab.TabPosition.Beginning
    """
    """

    CornerWidget: ...
    """
    """

    CornerWidgets: ...
    """
    """

    End: ... = PySide.QtGui.QStyleOptionTab.TabPosition.End
    """
    """

    LeftCornerWidget: ...
    """
    """

    Middle: ... = PySide.QtGui.QStyleOptionTab.TabPosition.Middle
    """
    """

    NextIsSelected: ...
    """
    """

    NoCornerWidgets: ...
    """
    """

    NotAdjacent: ...
    """
    """

    OnlyOneTab: ... = PySide.QtGui.QStyleOptionTab.TabPosition.OnlyOneTab
    """
    """

    PreviousIsSelected: ...
    """
    """

    RightCornerWidget: ...
    """
    """

    SelectedPosition: ...
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    TabPosition: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionTab.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionTab.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionTabBarBase(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionTabBarBase.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionTabBarBaseV2(QStyleOptionTabBarBase):
    StyleOptionVersion: ...
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionTabV2(QStyleOptionTab):
    StyleOptionVersion: ...
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionTabV2.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionTabV3(QStyleOptionTabV2):
    StyleOptionVersion: ...
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionTabV3.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionTabWidgetFrame(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionTabWidgetFrame.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionTitleBar(QStyleOptionComplex):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionTitleBar.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionTitleBar.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionToolBar(QStyleOption):
    Beginning: ... = PySide.QtGui.QStyleOptionToolBar.ToolBarPosition.Beginning
    """
    """

    End: ... = PySide.QtGui.QStyleOptionToolBar.ToolBarPosition.End
    """
    """

    Middle: ... = PySide.QtGui.QStyleOptionToolBar.ToolBarPosition.Middle
    """
    """

    Movable: ... = PySide.QtGui.QStyleOptionToolBar.ToolBarFeature.Movable
    """
    """

    None: ... = PySide.QtGui.QStyleOptionToolBar.ToolBarFeature.None
    """
    """

    OnlyOne: ... = PySide.QtGui.QStyleOptionToolBar.ToolBarPosition.OnlyOne
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    ToolBarFeature: ...
    """
    """

    ToolBarFeatures: ...
    """
    """

    ToolBarPosition: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionToolBar.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionToolBar.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionToolBox(QStyleOption):
    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionToolBox.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionToolBox.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionToolBoxV2(QStyleOptionToolBox):
    Beginning: ... = PySide.QtGui.QStyleOptionToolBoxV2.TabPosition.Beginning
    """
    """

    End: ... = PySide.QtGui.QStyleOptionToolBoxV2.TabPosition.End
    """
    """

    Middle: ... = PySide.QtGui.QStyleOptionToolBoxV2.TabPosition.Middle
    """
    """

    NextIsSelected: ...
    """
    """

    NotAdjacent: ...
    """
    """

    OnlyOneTab: ... = PySide.QtGui.QStyleOptionToolBoxV2.TabPosition.OnlyOneTab
    """
    """

    PreviousIsSelected: ...
    """
    """

    SelectedPosition: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    TabPosition: ...
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionToolButton(QStyleOptionComplex):
    Arrow: ... = PySide.QtGui.QStyleOptionToolButton.ToolButtonFeature.Arrow
    """
    """

    HasMenu: ...
    """
    """

    Menu: ... = PySide.QtGui.QStyleOptionToolButton.ToolButtonFeature.Menu
    """
    """

    MenuButtonPopup: ...
    """
    """

    None: ... = PySide.QtGui.QStyleOptionToolButton.ToolButtonFeature.None
    """
    """

    PopupDelay: ...
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    ToolButtonFeature: ...
    """
    """

    ToolButtonFeatures: ...
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionToolButton.StyleOptionType.Type
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionViewItem(QStyleOption):
    Bottom: ... = PySide.QtGui.QStyleOptionViewItem.Position.Bottom
    """
    """

    Left: ... = PySide.QtGui.QStyleOptionViewItem.Position.Left
    """
    """

    Position: ...
    """
    """

    Right: ... = PySide.QtGui.QStyleOptionViewItem.Position.Right
    """
    """

    StyleOptionType: ...
    """
    """

    StyleOptionVersion: ...
    """
    """

    Top: ... = PySide.QtGui.QStyleOptionViewItem.Position.Top
    """
    """

    Type: ... = PySide.QtGui.QStyleOptionViewItem.StyleOptionType.Type
    """
    """

    Version: ... = PySide.QtGui.QStyleOptionViewItem.StyleOptionVersion.Version
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionViewItemV2(QStyleOptionViewItem):
    Alternate: ...
    """
    """

    HasCheckIndicator: ...
    """
    """

    HasDecoration: ...
    """
    """

    HasDisplay: ...
    """
    """

    None: ... = PySide.QtGui.QStyleOptionViewItemV2.ViewItemFeature.None
    """
    """

    StyleOptionVersion: ...
    """
    """

    Version: ...
    """
    """

    ViewItemFeature: ...
    """
    """

    ViewItemFeatures: ...
    """
    """

    WrapText: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionViewItemV3(QStyleOptionViewItemV2):
    StyleOptionVersion: ...
    """
    """

    Version: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStyleOptionViewItemV4(QStyleOptionViewItemV3):
    Beginning: ...
    """
    """

    End: ... = PySide.QtGui.QStyleOptionViewItemV4.ViewItemPosition.End
    """
    """

    Invalid: ... = PySide.QtGui.QStyleOptionViewItemV4.ViewItemPosition.Invalid
    """
    """

    Middle: ... = PySide.QtGui.QStyleOptionViewItemV4.ViewItemPosition.Middle
    """
    """

    OnlyOne: ... = PySide.QtGui.QStyleOptionViewItemV4.ViewItemPosition.OnlyOne
    """
    """

    StyleOptionVersion: ...
    """
    """

    Version: ...
    """
    """

    ViewItemPosition: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QStylePainter(QPainter):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def begin(self, *args, **kwargs):
        """
        """
        ...

    def drawComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawItemPixmap(self, *args, **kwargs):
        """
        """
        ...

    def drawItemText(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    ...

class QStyledItemDelegate(QAbstractItemDelegate):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def createEditor(self, *args, **kwargs):
        """
        """
        ...

    def displayText(self, *args, **kwargs):
        """
        """
        ...

    def editorEvent(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def itemEditorFactory(self, *args, **kwargs):
        """
        """
        ...

    def paint(self, *args, **kwargs):
        """
        """
        ...

    def setEditorData(self, *args, **kwargs):
        """
        """
        ...

    def setItemEditorFactory(self, *args, **kwargs):
        """
        """
        ...

    def setModelData(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def updateEditorGeometry(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSwipeGesture(QGesture):
    Down: ... = PySide.QtGui.QSwipeGesture.SwipeDirection.Down
    """
    """

    Left: ... = PySide.QtGui.QSwipeGesture.SwipeDirection.Left
    """
    """

    NoDirection: ... = PySide.QtGui.QSwipeGesture.SwipeDirection.NoDirection
    """
    """

    Right: ... = PySide.QtGui.QSwipeGesture.SwipeDirection.Right
    """
    """

    SwipeDirection: ...
    """
    """

    Up: ... = PySide.QtGui.QSwipeGesture.SwipeDirection.Up
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def horizontalDirection(self, *args, **kwargs):
        """
        """
        ...

    def setSwipeAngle(self, *args, **kwargs):
        """
        """
        ...

    def swipeAngle(self, *args, **kwargs):
        """
        """
        ...

    def verticalDirection(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSyntaxHighlighter(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def currentBlock(self, *args, **kwargs):
        """
        """
        ...

    def currentBlockState(self, *args, **kwargs):
        """
        """
        ...

    def currentBlockUserData(self, *args, **kwargs):
        """
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def highlightBlock(self, *args, **kwargs):
        """
        """
        ...

    def previousBlockState(self, *args, **kwargs):
        """
        """
        ...

    def rehighlight(self, *args, **kwargs):
        """
        """
        ...

    def rehighlightBlock(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentBlockState(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentBlockUserData(self, *args, **kwargs):
        """
        """
        ...

    def setDocument(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    ...

class QSystemTrayIcon(PySide.QtCore.QObject):
    ActivationReason: ...
    """
    """

    Context: ... = PySide.QtGui.QSystemTrayIcon.ActivationReason.Context
    """
    """

    Critical: ... = PySide.QtGui.QSystemTrayIcon.MessageIcon.Critical
    """
    """

    DoubleClick: ...
    """
    """

    Information: ... = PySide.QtGui.QSystemTrayIcon.MessageIcon.Information
    """
    """

    MessageIcon: ...
    """
    """

    MiddleClick: ...
    """
    """

    NoIcon: ... = PySide.QtGui.QSystemTrayIcon.MessageIcon.NoIcon
    """
    """

    Trigger: ... = PySide.QtGui.QSystemTrayIcon.ActivationReason.Trigger
    """
    """

    Unknown: ... = PySide.QtGui.QSystemTrayIcon.ActivationReason.Unknown
    """
    """

    Warning: ... = PySide.QtGui.QSystemTrayIcon.MessageIcon.Warning
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    messageClicked: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def isSystemTrayAvailable(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def supportsMessages(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def contextMenu(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def geometry(self, *args, **kwargs):
        """
        """
        ...

    def hide(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def isVisible(self, *args, **kwargs):
        """
        """
        ...

    def setContextMenu(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def show(self, *args, **kwargs):
        """
        """
        ...

    def showMessage(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTabBar(QWidget):
    ButtonPosition: ...
    """
    """

    LeftSide: ... = PySide.QtGui.QTabBar.ButtonPosition.LeftSide
    """
    """

    RightSide: ... = PySide.QtGui.QTabBar.ButtonPosition.RightSide
    """
    """

    RoundedEast: ... = PySide.QtGui.QTabBar.Shape.RoundedEast
    """
    """

    RoundedNorth: ... = PySide.QtGui.QTabBar.Shape.RoundedNorth
    """
    """

    RoundedSouth: ... = PySide.QtGui.QTabBar.Shape.RoundedSouth
    """
    """

    RoundedWest: ... = PySide.QtGui.QTabBar.Shape.RoundedWest
    """
    """

    SelectLeftTab: ... = PySide.QtGui.QTabBar.SelectionBehavior.SelectLeftTab
    """
    """

    SelectPreviousTab: ...
    """
    """

    SelectRightTab: ... = PySide.QtGui.QTabBar.SelectionBehavior.SelectRightTab
    """
    """

    SelectionBehavior: ...
    """
    """

    Shape: ...
    """
    """

    TriangularEast: ... = PySide.QtGui.QTabBar.Shape.TriangularEast
    """
    """

    TriangularNorth: ... = PySide.QtGui.QTabBar.Shape.TriangularNorth
    """
    """

    TriangularSouth: ... = PySide.QtGui.QTabBar.Shape.TriangularSouth
    """
    """

    TriangularWest: ... = PySide.QtGui.QTabBar.Shape.TriangularWest
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    selected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    tabCloseRequested: ...
    """
    Signal
    """

    tabMoved: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addTab(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def documentMode(self, *args, **kwargs):
        """
        """
        ...

    def drawBase(self, *args, **kwargs):
        """
        """
        ...

    def elideMode(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def expanding(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def iconSize(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def insertTab(self, *args, **kwargs):
        """
        """
        ...

    def isMovable(self, *args, **kwargs):
        """
        """
        ...

    def isTabEnabled(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveTab(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def removeTab(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def selectionBehaviorOnRemove(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentMode(self, *args, **kwargs):
        """
        """
        ...

    def setDrawBase(self, *args, **kwargs):
        """
        """
        ...

    def setElideMode(self, *args, **kwargs):
        """
        """
        ...

    def setExpanding(self, *args, **kwargs):
        """
        """
        ...

    def setIconSize(self, *args, **kwargs):
        """
        """
        ...

    def setMovable(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionBehaviorOnRemove(self, *args, **kwargs):
        """
        """
        ...

    def setShape(self, *args, **kwargs):
        """
        """
        ...

    def setTabButton(self, *args, **kwargs):
        """
        """
        ...

    def setTabData(self, *args, **kwargs):
        """
        """
        ...

    def setTabEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setTabIcon(self, *args, **kwargs):
        """
        """
        ...

    def setTabText(self, *args, **kwargs):
        """
        """
        ...

    def setTabTextColor(self, *args, **kwargs):
        """
        """
        ...

    def setTabToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setTabWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def setTabsClosable(self, *args, **kwargs):
        """
        """
        ...

    def setUsesScrollButtons(self, *args, **kwargs):
        """
        """
        ...

    def shape(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def tabAt(self, *args, **kwargs):
        """
        """
        ...

    def tabButton(self, *args, **kwargs):
        """
        """
        ...

    def tabData(self, *args, **kwargs):
        """
        """
        ...

    def tabIcon(self, *args, **kwargs):
        """
        """
        ...

    def tabInserted(self, *args, **kwargs):
        """
        """
        ...

    def tabLayoutChange(self, *args, **kwargs):
        """
        """
        ...

    def tabRect(self, *args, **kwargs):
        """
        """
        ...

    def tabRemoved(self, *args, **kwargs):
        """
        """
        ...

    def tabSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def tabText(self, *args, **kwargs):
        """
        """
        ...

    def tabTextColor(self, *args, **kwargs):
        """
        """
        ...

    def tabToolTip(self, *args, **kwargs):
        """
        """
        ...

    def tabWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def tabsClosable(self, *args, **kwargs):
        """
        """
        ...

    def usesScrollButtons(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTabWidget(QWidget):
    East: ... = PySide.QtGui.QTabWidget.TabPosition.East
    """
    """

    North: ... = PySide.QtGui.QTabWidget.TabPosition.North
    """
    """

    Rounded: ... = PySide.QtGui.QTabWidget.TabShape.Rounded
    """
    """

    South: ... = PySide.QtGui.QTabWidget.TabPosition.South
    """
    """

    TabPosition: ...
    """
    """

    TabShape: ...
    """
    """

    Triangular: ... = PySide.QtGui.QTabWidget.TabShape.Triangular
    """
    """

    West: ... = PySide.QtGui.QTabWidget.TabPosition.West
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    selected: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    tabCloseRequested: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addTab(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def cornerWidget(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def currentWidget(self, *args, **kwargs):
        """
        """
        ...

    def documentMode(self, *args, **kwargs):
        """
        """
        ...

    def elideMode(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def iconSize(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def insertTab(self, *args, **kwargs):
        """
        """
        ...

    def isMovable(self, *args, **kwargs):
        """
        """
        ...

    def isTabEnabled(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def removeTab(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setCornerWidget(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentWidget(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentMode(self, *args, **kwargs):
        """
        """
        ...

    def setElideMode(self, *args, **kwargs):
        """
        """
        ...

    def setIconSize(self, *args, **kwargs):
        """
        """
        ...

    def setMovable(self, *args, **kwargs):
        """
        """
        ...

    def setTabBar(self, *args, **kwargs):
        """
        """
        ...

    def setTabEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setTabIcon(self, *args, **kwargs):
        """
        """
        ...

    def setTabPosition(self, *args, **kwargs):
        """
        """
        ...

    def setTabShape(self, *args, **kwargs):
        """
        """
        ...

    def setTabText(self, *args, **kwargs):
        """
        """
        ...

    def setTabToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setTabWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def setTabsClosable(self, *args, **kwargs):
        """
        """
        ...

    def setUsesScrollButtons(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def tabBar(self, *args, **kwargs):
        """
        """
        ...

    def tabIcon(self, *args, **kwargs):
        """
        """
        ...

    def tabInserted(self, *args, **kwargs):
        """
        """
        ...

    def tabPosition(self, *args, **kwargs):
        """
        """
        ...

    def tabRemoved(self, *args, **kwargs):
        """
        """
        ...

    def tabShape(self, *args, **kwargs):
        """
        """
        ...

    def tabText(self, *args, **kwargs):
        """
        """
        ...

    def tabToolTip(self, *args, **kwargs):
        """
        """
        ...

    def tabWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def tabsClosable(self, *args, **kwargs):
        """
        """
        ...

    def usesScrollButtons(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTableView(QAbstractItemView):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def clearSpans(self, *args, **kwargs):
        """
        """
        ...

    def columnAt(self, *args, **kwargs):
        """
        """
        ...

    def columnCountChanged(self, *args, **kwargs):
        """
        """
        ...

    def columnMoved(self, *args, **kwargs):
        """
        """
        ...

    def columnResized(self, *args, **kwargs):
        """
        """
        ...

    def columnSpan(self, *args, **kwargs):
        """
        """
        ...

    def columnViewportPosition(self, *args, **kwargs):
        """
        """
        ...

    def columnWidth(self, *args, **kwargs):
        """
        """
        ...

    def currentChanged(self, *args, **kwargs):
        """
        """
        ...

    def doItemsLayout(self, *args, **kwargs):
        """
        """
        ...

    def gridStyle(self, *args, **kwargs):
        """
        """
        ...

    def hideColumn(self, *args, **kwargs):
        """
        """
        ...

    def hideRow(self, *args, **kwargs):
        """
        """
        ...

    def horizontalHeader(self, *args, **kwargs):
        """
        """
        ...

    def horizontalOffset(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScrollbarAction(self, *args, **kwargs):
        """
        """
        ...

    def indexAt(self, *args, **kwargs):
        """
        """
        ...

    def isColumnHidden(self, *args, **kwargs):
        """
        """
        ...

    def isCornerButtonEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isIndexHidden(self, *args, **kwargs):
        """
        """
        ...

    def isRowHidden(self, *args, **kwargs):
        """
        """
        ...

    def isSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeColumnToContents(self, *args, **kwargs):
        """
        """
        ...

    def resizeColumnsToContents(self, *args, **kwargs):
        """
        """
        ...

    def resizeRowToContents(self, *args, **kwargs):
        """
        """
        ...

    def resizeRowsToContents(self, *args, **kwargs):
        """
        """
        ...

    def rowAt(self, *args, **kwargs):
        """
        """
        ...

    def rowCountChanged(self, *args, **kwargs):
        """
        """
        ...

    def rowHeight(self, *args, **kwargs):
        """
        """
        ...

    def rowMoved(self, *args, **kwargs):
        """
        """
        ...

    def rowResized(self, *args, **kwargs):
        """
        """
        ...

    def rowSpan(self, *args, **kwargs):
        """
        """
        ...

    def rowViewportPosition(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def scrollTo(self, *args, **kwargs):
        """
        """
        ...

    def selectColumn(self, *args, **kwargs):
        """
        """
        ...

    def selectRow(self, *args, **kwargs):
        """
        """
        ...

    def selectedIndexes(self, *args, **kwargs):
        """
        """
        ...

    def selectionChanged(self, *args, **kwargs):
        """
        """
        ...

    def setColumnHidden(self, *args, **kwargs):
        """
        """
        ...

    def setColumnWidth(self, *args, **kwargs):
        """
        """
        ...

    def setCornerButtonEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setGridStyle(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalHeader(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setRootIndex(self, *args, **kwargs):
        """
        """
        ...

    def setRowHeight(self, *args, **kwargs):
        """
        """
        ...

    def setRowHidden(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionModel(self, *args, **kwargs):
        """
        """
        ...

    def setShowGrid(self, *args, **kwargs):
        """
        """
        ...

    def setSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setSpan(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalHeader(self, *args, **kwargs):
        """
        """
        ...

    def setWordWrap(self, *args, **kwargs):
        """
        """
        ...

    def showColumn(self, *args, **kwargs):
        """
        """
        ...

    def showGrid(self, *args, **kwargs):
        """
        """
        ...

    def showRow(self, *args, **kwargs):
        """
        """
        ...

    def sizeHintForColumn(self, *args, **kwargs):
        """
        """
        ...

    def sizeHintForRow(self, *args, **kwargs):
        """
        """
        ...

    def sortByColumn(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometries(self, *args, **kwargs):
        """
        """
        ...

    def verticalHeader(self, *args, **kwargs):
        """
        """
        ...

    def verticalOffset(self, *args, **kwargs):
        """
        """
        ...

    def verticalScrollbarAction(self, *args, **kwargs):
        """
        """
        ...

    def viewOptions(self, *args, **kwargs):
        """
        """
        ...

    def visualRect(self, *args, **kwargs):
        """
        """
        ...

    def visualRegionForSelection(self, *args, **kwargs):
        """
        """
        ...

    def wordWrap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTableWidget(QTableView):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    cellActivated: ...
    """
    Signal
    """

    cellChanged: ...
    """
    Signal
    """

    cellClicked: ...
    """
    Signal
    """

    cellDoubleClicked: ...
    """
    Signal
    """

    cellEntered: ...
    """
    Signal
    """

    cellPressed: ...
    """
    Signal
    """

    currentCellChanged: ...
    """
    Signal
    """

    currentItemChanged: ...
    """
    Signal
    """

    itemActivated: ...
    """
    Signal
    """

    itemChanged: ...
    """
    Signal
    """

    itemClicked: ...
    """
    Signal
    """

    itemDoubleClicked: ...
    """
    Signal
    """

    itemEntered: ...
    """
    Signal
    """

    itemPressed: ...
    """
    Signal
    """

    itemSelectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def cellWidget(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def clearContents(self, *args, **kwargs):
        """
        """
        ...

    def closePersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def column(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def currentColumn(self, *args, **kwargs):
        """
        """
        ...

    def currentItem(self, *args, **kwargs):
        """
        """
        ...

    def currentRow(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def editItem(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def findItems(self, *args, **kwargs):
        """
        """
        ...

    def horizontalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def indexFromItem(self, *args, **kwargs):
        """
        """
        ...

    def insertColumn(self, *args, **kwargs):
        """
        """
        ...

    def insertRow(self, *args, **kwargs):
        """
        """
        ...

    def isSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def item(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def itemFromIndex(self, *args, **kwargs):
        """
        """
        ...

    def itemPrototype(self, *args, **kwargs):
        """
        """
        ...

    def items(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def openPersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def removeCellWidget(self, *args, **kwargs):
        """
        """
        ...

    def removeColumn(self, *args, **kwargs):
        """
        """
        ...

    def removeRow(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def scrollToItem(self, *args, **kwargs):
        """
        """
        ...

    def selectedItems(self, *args, **kwargs):
        """
        """
        ...

    def selectedRanges(self, *args, **kwargs):
        """
        """
        ...

    def setCellWidget(self, *args, **kwargs):
        """
        """
        ...

    def setColumnCount(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentCell(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentItem(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def setHorizontalHeaderLabels(self, *args, **kwargs):
        """
        """
        ...

    def setItem(self, *args, **kwargs):
        """
        """
        ...

    def setItemPrototype(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setRangeSelected(self, *args, **kwargs):
        """
        """
        ...

    def setRowCount(self, *args, **kwargs):
        """
        """
        ...

    def setSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalHeaderLabels(self, *args, **kwargs):
        """
        """
        ...

    def sortItems(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    def takeHorizontalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def takeItem(self, *args, **kwargs):
        """
        """
        ...

    def takeVerticalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def verticalHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def visualColumn(self, *args, **kwargs):
        """
        """
        ...

    def visualItemRect(self, *args, **kwargs):
        """
        """
        ...

    def visualRow(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTableWidgetItem(Shiboken.Object):
    ItemType: ...
    """
    """

    Type: ... = PySide.QtGui.QTableWidgetItem.ItemType.Type
    """
    """

    UserType: ... = PySide.QtGui.QTableWidgetItem.ItemType.UserType
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def checkState(self, *args, **kwargs):
        """
        """
        ...

    def clone(self, *args, **kwargs):
        """
        """
        ...

    def column(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def foreground(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def isSelected(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setCheckState(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setFlags(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setForeground(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setSelected(self, *args, **kwargs):
        """
        """
        ...

    def setSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def setStatusTip(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def statusTip(self, *args, **kwargs):
        """
        """
        ...

    def tableWidget(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textAlignment(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def whatsThis(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTableWidgetSelectionRange(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def bottomRow(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def leftColumn(self, *args, **kwargs):
        """
        """
        ...

    def rightColumn(self, *args, **kwargs):
        """
        """
        ...

    def rowCount(self, *args, **kwargs):
        """
        """
        ...

    def topRow(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTabletEvent(QInputEvent):
    Airbrush: ... = PySide.QtGui.QTabletEvent.TabletDevice.Airbrush
    """
    """

    Cursor: ... = PySide.QtGui.QTabletEvent.PointerType.Cursor
    """
    """

    Eraser: ... = PySide.QtGui.QTabletEvent.PointerType.Eraser
    """
    """

    FourDMouse: ... = PySide.QtGui.QTabletEvent.TabletDevice.FourDMouse
    """
    """

    NoDevice: ... = PySide.QtGui.QTabletEvent.TabletDevice.NoDevice
    """
    """

    Pen: ... = PySide.QtGui.QTabletEvent.PointerType.Pen
    """
    """

    PointerType: ...
    """
    """

    Puck: ... = PySide.QtGui.QTabletEvent.TabletDevice.Puck
    """
    """

    RotationStylus: ... = PySide.QtGui.QTabletEvent.TabletDevice.RotationStylus
    """
    """

    Stylus: ... = PySide.QtGui.QTabletEvent.TabletDevice.Stylus
    """
    """

    TabletDevice: ...
    """
    """

    UnknownPointer: ... = PySide.QtGui.QTabletEvent.PointerType.UnknownPointer
    """
    """

    XFreeEraser: ... = PySide.QtGui.QTabletEvent.TabletDevice.XFreeEraser
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def device(self, *args, **kwargs):
        """
        """
        ...

    def globalPos(self, *args, **kwargs):
        """
        """
        ...

    def globalX(self, *args, **kwargs):
        """
        """
        ...

    def globalY(self, *args, **kwargs):
        """
        """
        ...

    def hiResGlobalPos(self, *args, **kwargs):
        """
        """
        ...

    def hiResGlobalX(self, *args, **kwargs):
        """
        """
        ...

    def hiResGlobalY(self, *args, **kwargs):
        """
        """
        ...

    def pointerType(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def pressure(self, *args, **kwargs):
        """
        """
        ...

    def rotation(self, *args, **kwargs):
        """
        """
        ...

    def tangentialPressure(self, *args, **kwargs):
        """
        """
        ...

    def uniqueId(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def xTilt(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    def yTilt(self, *args, **kwargs):
        """
        """
        ...

    def z(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTapAndHoldGesture(QGesture):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def setTimeout(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def timeout(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def setPosition(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTapGesture(QGesture):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def setPosition(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextBlock(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    iterator: ...
    """
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __iter__(self, *args, **kwargs):
        """
        x.__iter__() <==> iter(x)
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def begin(self, *args, **kwargs):
        """
        """
        ...

    def blockFormat(self, *args, **kwargs):
        """
        """
        ...

    def blockFormatIndex(self, *args, **kwargs):
        """
        """
        ...

    def blockNumber(self, *args, **kwargs):
        """
        """
        ...

    def charFormat(self, *args, **kwargs):
        """
        """
        ...

    def charFormatIndex(self, *args, **kwargs):
        """
        """
        ...

    def clearLayout(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def end(self, *args, **kwargs):
        """
        """
        ...

    def firstLineNumber(self, *args, **kwargs):
        """
        """
        ...

    def fragmentIndex(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def isVisible(self, *args, **kwargs):
        """
        """
        ...

    def layout(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def lineCount(self, *args, **kwargs):
        """
        """
        ...

    def next(self, *args, **kwargs):
        """
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def previous(self, *args, **kwargs):
        """
        """
        ...

    def revision(self, *args, **kwargs):
        """
        """
        ...

    def setLineCount(self, *args, **kwargs):
        """
        """
        ...

    def setRevision(self, *args, **kwargs):
        """
        """
        ...

    def setUserData(self, *args, **kwargs):
        """
        """
        ...

    def setUserState(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textDirection(self, *args, **kwargs):
        """
        """
        ...

    def textList(self, *args, **kwargs):
        """
        """
        ...

    def userData(self, *args, **kwargs):
        """
        """
        ...

    def userState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextBlockFormat(QTextFormat):
    FixedHeight: ...
    """
    """

    LineDistanceHeight: ...
    """
    """

    LineHeightTypes: ...
    """
    """

    MinimumHeight: ...
    """
    """

    ProportionalHeight: ...
    """
    """

    SingleHeight: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def bottomMargin(self, *args, **kwargs):
        """
        """
        ...

    def indent(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def leftMargin(self, *args, **kwargs):
        """
        """
        ...

    def lineHeight(self, *args, **kwargs):
        """
        """
        ...

    def lineHeightType(self, *args, **kwargs):
        """
        """
        ...

    def nonBreakableLines(self, *args, **kwargs):
        """
        """
        ...

    def pageBreakPolicy(self, *args, **kwargs):
        """
        """
        ...

    def rightMargin(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setBottomMargin(self, *args, **kwargs):
        """
        """
        ...

    def setIndent(self, *args, **kwargs):
        """
        """
        ...

    def setLeftMargin(self, *args, **kwargs):
        """
        """
        ...

    def setLineHeight(self, *args, **kwargs):
        """
        """
        ...

    def setNonBreakableLines(self, *args, **kwargs):
        """
        """
        ...

    def setPageBreakPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setRightMargin(self, *args, **kwargs):
        """
        """
        ...

    def setTabPositions(self, *args, **kwargs):
        """
        """
        ...

    def setTextIndent(self, *args, **kwargs):
        """
        """
        ...

    def setTopMargin(self, *args, **kwargs):
        """
        """
        ...

    def tabPositions(self, *args, **kwargs):
        """
        """
        ...

    def textIndent(self, *args, **kwargs):
        """
        """
        ...

    def topMargin(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextBlockGroup(QTextObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def blockFormatChanged(self, *args, **kwargs):
        """
        """
        ...

    def blockInserted(self, *args, **kwargs):
        """
        """
        ...

    def blockList(self, *args, **kwargs):
        """
        """
        ...

    def blockRemoved(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextBlockUserData(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QTextBrowser(QTextEdit):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    anchorClicked: ...
    """
    Signal
    """

    backwardAvailable: ...
    """
    Signal
    """

    forwardAvailable: ...
    """
    Signal
    """

    highlighted: ...
    """
    Signal
    """

    historyChanged: ...
    """
    Signal
    """

    sourceChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def backward(self, *args, **kwargs):
        """
        """
        ...

    def backwardHistoryCount(self, *args, **kwargs):
        """
        """
        ...

    def clearHistory(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def forward(self, *args, **kwargs):
        """
        """
        ...

    def forwardHistoryCount(self, *args, **kwargs):
        """
        """
        ...

    def historyTitle(self, *args, **kwargs):
        """
        """
        ...

    def historyUrl(self, *args, **kwargs):
        """
        """
        ...

    def home(self, *args, **kwargs):
        """
        """
        ...

    def isBackwardAvailable(self, *args, **kwargs):
        """
        """
        ...

    def isForwardAvailable(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def loadResource(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def openExternalLinks(self, *args, **kwargs):
        """
        """
        ...

    def openLinks(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def reload(self, *args, **kwargs):
        """
        """
        ...

    def searchPaths(self, *args, **kwargs):
        """
        """
        ...

    def setOpenExternalLinks(self, *args, **kwargs):
        """
        """
        ...

    def setOpenLinks(self, *args, **kwargs):
        """
        """
        ...

    def setSearchPaths(self, *args, **kwargs):
        """
        """
        ...

    def setSource(self, *args, **kwargs):
        """
        """
        ...

    def source(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextCharFormat(QTextFormat):
    AlignBaseline: ...
    """
    """

    AlignBottom: ...
    """
    """

    AlignMiddle: ...
    """
    """

    AlignNormal: ...
    """
    """

    AlignSubScript: ...
    """
    """

    AlignSuperScript: ...
    """
    """

    AlignTop: ... = PySide.QtGui.QTextCharFormat.VerticalAlignment.AlignTop
    """
    """

    DashDotDotLine: ...
    """
    """

    DashDotLine: ... = PySide.QtGui.QTextCharFormat.UnderlineStyle.DashDotLine
    """
    """

    DashUnderline: ...
    """
    """

    DotLine: ... = PySide.QtGui.QTextCharFormat.UnderlineStyle.DotLine
    """
    """

    NoUnderline: ... = PySide.QtGui.QTextCharFormat.UnderlineStyle.NoUnderline
    """
    """

    SingleUnderline: ...
    """
    """

    SpellCheckUnderline: ...
    """
    """

    UnderlineStyle: ...
    """
    """

    VerticalAlignment: ...
    """
    """

    WaveUnderline: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def anchorHref(self, *args, **kwargs):
        """
        """
        ...

    def anchorNames(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def fontCapitalization(self, *args, **kwargs):
        """
        """
        ...

    def fontFamily(self, *args, **kwargs):
        """
        """
        ...

    def fontFixedPitch(self, *args, **kwargs):
        """
        """
        ...

    def fontHintingPreference(self, *args, **kwargs):
        """
        """
        ...

    def fontItalic(self, *args, **kwargs):
        """
        """
        ...

    def fontKerning(self, *args, **kwargs):
        """
        """
        ...

    def fontLetterSpacing(self, *args, **kwargs):
        """
        """
        ...

    def fontOverline(self, *args, **kwargs):
        """
        """
        ...

    def fontPointSize(self, *args, **kwargs):
        """
        """
        ...

    def fontStrikeOut(self, *args, **kwargs):
        """
        """
        ...

    def fontStyleHint(self, *args, **kwargs):
        """
        """
        ...

    def fontStyleStrategy(self, *args, **kwargs):
        """
        """
        ...

    def fontUnderline(self, *args, **kwargs):
        """
        """
        ...

    def fontWeight(self, *args, **kwargs):
        """
        """
        ...

    def fontWordSpacing(self, *args, **kwargs):
        """
        """
        ...

    def isAnchor(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def setAnchor(self, *args, **kwargs):
        """
        """
        ...

    def setAnchorHref(self, *args, **kwargs):
        """
        """
        ...

    def setAnchorNames(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setFontCapitalization(self, *args, **kwargs):
        """
        """
        ...

    def setFontFamily(self, *args, **kwargs):
        """
        """
        ...

    def setFontFixedPitch(self, *args, **kwargs):
        """
        """
        ...

    def setFontHintingPreference(self, *args, **kwargs):
        """
        """
        ...

    def setFontItalic(self, *args, **kwargs):
        """
        """
        ...

    def setFontKerning(self, *args, **kwargs):
        """
        """
        ...

    def setFontLetterSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setFontOverline(self, *args, **kwargs):
        """
        """
        ...

    def setFontPointSize(self, *args, **kwargs):
        """
        """
        ...

    def setFontStrikeOut(self, *args, **kwargs):
        """
        """
        ...

    def setFontStyleHint(self, *args, **kwargs):
        """
        """
        ...

    def setFontStyleStrategy(self, *args, **kwargs):
        """
        """
        ...

    def setFontUnderline(self, *args, **kwargs):
        """
        """
        ...

    def setFontWeight(self, *args, **kwargs):
        """
        """
        ...

    def setFontWordSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setTableCellColumnSpan(self, *args, **kwargs):
        """
        """
        ...

    def setTableCellRowSpan(self, *args, **kwargs):
        """
        """
        ...

    def setTextOutline(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setUnderlineColor(self, *args, **kwargs):
        """
        """
        ...

    def setUnderlineStyle(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalAlignment(self, *args, **kwargs):
        """
        """
        ...

    def tableCellColumnSpan(self, *args, **kwargs):
        """
        """
        ...

    def tableCellRowSpan(self, *args, **kwargs):
        """
        """
        ...

    def textOutline(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def underlineColor(self, *args, **kwargs):
        """
        """
        ...

    def underlineStyle(self, *args, **kwargs):
        """
        """
        ...

    def verticalAlignment(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextCursor(Shiboken.Object):
    BlockUnderCursor: ...
    """
    """

    Document: ... = PySide.QtGui.QTextCursor.SelectionType.Document
    """
    """

    Down: ... = PySide.QtGui.QTextCursor.MoveOperation.Down
    """
    """

    End: ... = PySide.QtGui.QTextCursor.MoveOperation.End
    """
    """

    EndOfBlock: ... = PySide.QtGui.QTextCursor.MoveOperation.EndOfBlock
    """
    """

    EndOfLine: ... = PySide.QtGui.QTextCursor.MoveOperation.EndOfLine
    """
    """

    EndOfWord: ... = PySide.QtGui.QTextCursor.MoveOperation.EndOfWord
    """
    """

    KeepAnchor: ... = PySide.QtGui.QTextCursor.MoveMode.KeepAnchor
    """
    """

    Left: ... = PySide.QtGui.QTextCursor.MoveOperation.Left
    """
    """

    LineUnderCursor: ...
    """
    """

    MoveAnchor: ... = PySide.QtGui.QTextCursor.MoveMode.MoveAnchor
    """
    """

    MoveMode: ...
    """
    """

    MoveOperation: ...
    """
    """

    NextBlock: ... = PySide.QtGui.QTextCursor.MoveOperation.NextBlock
    """
    """

    NextCell: ... = PySide.QtGui.QTextCursor.MoveOperation.NextCell
    """
    """

    NextCharacter: ... = PySide.QtGui.QTextCursor.MoveOperation.NextCharacter
    """
    """

    NextRow: ... = PySide.QtGui.QTextCursor.MoveOperation.NextRow
    """
    """

    NextWord: ... = PySide.QtGui.QTextCursor.MoveOperation.NextWord
    """
    """

    NoMove: ... = PySide.QtGui.QTextCursor.MoveOperation.NoMove
    """
    """

    PreviousBlock: ... = PySide.QtGui.QTextCursor.MoveOperation.PreviousBlock
    """
    """

    PreviousCell: ... = PySide.QtGui.QTextCursor.MoveOperation.PreviousCell
    """
    """

    PreviousCharacter: ...
    """
    """

    PreviousRow: ... = PySide.QtGui.QTextCursor.MoveOperation.PreviousRow
    """
    """

    PreviousWord: ... = PySide.QtGui.QTextCursor.MoveOperation.PreviousWord
    """
    """

    Right: ... = PySide.QtGui.QTextCursor.MoveOperation.Right
    """
    """

    SelectionType: ...
    """
    """

    Start: ... = PySide.QtGui.QTextCursor.MoveOperation.Start
    """
    """

    StartOfBlock: ... = PySide.QtGui.QTextCursor.MoveOperation.StartOfBlock
    """
    """

    StartOfLine: ... = PySide.QtGui.QTextCursor.MoveOperation.StartOfLine
    """
    """

    StartOfWord: ... = PySide.QtGui.QTextCursor.MoveOperation.StartOfWord
    """
    """

    Up: ... = PySide.QtGui.QTextCursor.MoveOperation.Up
    """
    """

    WordLeft: ... = PySide.QtGui.QTextCursor.MoveOperation.WordLeft
    """
    """

    WordRight: ... = PySide.QtGui.QTextCursor.MoveOperation.WordRight
    """
    """

    WordUnderCursor: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def anchor(self, *args, **kwargs):
        """
        """
        ...

    def atBlockEnd(self, *args, **kwargs):
        """
        """
        ...

    def atBlockStart(self, *args, **kwargs):
        """
        """
        ...

    def atEnd(self, *args, **kwargs):
        """
        """
        ...

    def atStart(self, *args, **kwargs):
        """
        """
        ...

    def beginEditBlock(self, *args, **kwargs):
        """
        """
        ...

    def block(self, *args, **kwargs):
        """
        """
        ...

    def blockCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def blockFormat(self, *args, **kwargs):
        """
        """
        ...

    def blockNumber(self, *args, **kwargs):
        """
        """
        ...

    def charFormat(self, *args, **kwargs):
        """
        """
        ...

    def clearSelection(self, *args, **kwargs):
        """
        """
        ...

    def columnNumber(self, *args, **kwargs):
        """
        """
        ...

    def createList(self, *args, **kwargs):
        """
        """
        ...

    def currentFrame(self, *args, **kwargs):
        """
        """
        ...

    def currentList(self, *args, **kwargs):
        """
        """
        ...

    def currentTable(self, *args, **kwargs):
        """
        """
        ...

    def deleteChar(self, *args, **kwargs):
        """
        """
        ...

    def deletePreviousChar(self, *args, **kwargs):
        """
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def endEditBlock(self, *args, **kwargs):
        """
        """
        ...

    def hasComplexSelection(self, *args, **kwargs):
        """
        """
        ...

    def hasSelection(self, *args, **kwargs):
        """
        """
        ...

    def insertBlock(self, *args, **kwargs):
        """
        """
        ...

    def insertFragment(self, *args, **kwargs):
        """
        """
        ...

    def insertFrame(self, *args, **kwargs):
        """
        """
        ...

    def insertHtml(self, *args, **kwargs):
        """
        """
        ...

    def insertImage(self, *args, **kwargs):
        """
        """
        ...

    def insertList(self, *args, **kwargs):
        """
        """
        ...

    def insertTable(self, *args, **kwargs):
        """
        """
        ...

    def insertText(self, *args, **kwargs):
        """
        """
        ...

    def isCopyOf(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def joinPreviousEditBlock(self, *args, **kwargs):
        """
        """
        ...

    def keepPositionOnInsert(self, *args, **kwargs):
        """
        """
        ...

    def mergeBlockCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def mergeBlockFormat(self, *args, **kwargs):
        """
        """
        ...

    def mergeCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def movePosition(self, *args, **kwargs):
        """
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def positionInBlock(self, *args, **kwargs):
        """
        """
        ...

    def removeSelectedText(self, *args, **kwargs):
        """
        """
        ...

    def select(self, *args, **kwargs):
        """
        """
        ...

    def selectedTableCells(self, *args, **kwargs):
        """
        """
        ...

    def selectedText(self, *args, **kwargs):
        """
        """
        ...

    def selection(self, *args, **kwargs):
        """
        """
        ...

    def selectionEnd(self, *args, **kwargs):
        """
        """
        ...

    def selectionStart(self, *args, **kwargs):
        """
        """
        ...

    def setBlockCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def setBlockFormat(self, *args, **kwargs):
        """
        """
        ...

    def setCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def setKeepPositionOnInsert(self, *args, **kwargs):
        """
        """
        ...

    def setPosition(self, *args, **kwargs):
        """
        """
        ...

    def setVerticalMovementX(self, *args, **kwargs):
        """
        """
        ...

    def setVisualNavigation(self, *args, **kwargs):
        """
        """
        ...

    def verticalMovementX(self, *args, **kwargs):
        """
        """
        ...

    def visualNavigation(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextDocument(PySide.QtCore.QObject):
    DocumentTitle: ...
    """
    """

    DocumentUrl: ... = PySide.QtGui.QTextDocument.MetaInformation.DocumentUrl
    """
    """

    FindBackward: ... = PySide.QtGui.QTextDocument.FindFlag.FindBackward
    """
    """

    FindCaseSensitively: ...
    """
    """

    FindFlag: ...
    """
    """

    FindFlags: ...
    """
    """

    FindWholeWords: ... = PySide.QtGui.QTextDocument.FindFlag.FindWholeWords
    """
    """

    HtmlResource: ... = PySide.QtGui.QTextDocument.ResourceType.HtmlResource
    """
    """

    ImageResource: ... = PySide.QtGui.QTextDocument.ResourceType.ImageResource
    """
    """

    MetaInformation: ...
    """
    """

    RedoStack: ... = PySide.QtGui.QTextDocument.Stacks.RedoStack
    """
    """

    ResourceType: ...
    """
    """

    Stacks: ...
    """
    """

    StyleSheetResource: ...
    """
    """

    UndoAndRedoStacks: ...
    """
    """

    UndoStack: ... = PySide.QtGui.QTextDocument.Stacks.UndoStack
    """
    """

    UserResource: ... = PySide.QtGui.QTextDocument.ResourceType.UserResource
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    blockCountChanged: ...
    """
    Signal
    """

    contentsChange: ...
    """
    Signal
    """

    contentsChanged: ...
    """
    Signal
    """

    cursorPositionChanged: ...
    """
    Signal
    """

    documentLayoutChanged: ...
    """
    Signal
    """

    modificationChanged: ...
    """
    Signal
    """

    redoAvailable: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    undoAvailable: ...
    """
    Signal
    """

    undoCommandAdded: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addResource(self, *args, **kwargs):
        """
        """
        ...

    def adjustSize(self, *args, **kwargs):
        """
        """
        ...

    def allFormats(self, *args, **kwargs):
        """
        """
        ...

    def availableRedoSteps(self, *args, **kwargs):
        """
        """
        ...

    def availableUndoSteps(self, *args, **kwargs):
        """
        """
        ...

    def begin(self, *args, **kwargs):
        """
        """
        ...

    def blockCount(self, *args, **kwargs):
        """
        """
        ...

    def characterAt(self, *args, **kwargs):
        """
        """
        ...

    def characterCount(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def clearUndoRedoStacks(self, *args, **kwargs):
        """
        """
        ...

    def clone(self, *args, **kwargs):
        """
        """
        ...

    def createObject(self, *args, **kwargs):
        """
        """
        ...

    def defaultCursorMoveStyle(self, *args, **kwargs):
        """
        """
        ...

    def defaultFont(self, *args, **kwargs):
        """
        """
        ...

    def defaultStyleSheet(self, *args, **kwargs):
        """
        """
        ...

    def defaultTextOption(self, *args, **kwargs):
        """
        """
        ...

    def documentLayout(self, *args, **kwargs):
        """
        """
        ...

    def documentMargin(self, *args, **kwargs):
        """
        """
        ...

    def drawContents(self, *args, **kwargs):
        """
        """
        ...

    def end(self, *args, **kwargs):
        """
        """
        ...

    def find(self, *args, **kwargs):
        """
        """
        ...

    def findBlock(self, *args, **kwargs):
        """
        """
        ...

    def findBlockByLineNumber(self, *args, **kwargs):
        """
        """
        ...

    def findBlockByNumber(self, *args, **kwargs):
        """
        """
        ...

    def firstBlock(self, *args, **kwargs):
        """
        """
        ...

    def frameAt(self, *args, **kwargs):
        """
        """
        ...

    def idealWidth(self, *args, **kwargs):
        """
        """
        ...

    def indentWidth(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def isModified(self, *args, **kwargs):
        """
        """
        ...

    def isRedoAvailable(self, *args, **kwargs):
        """
        """
        ...

    def isUndoAvailable(self, *args, **kwargs):
        """
        """
        ...

    def isUndoRedoEnabled(self, *args, **kwargs):
        """
        """
        ...

    def lastBlock(self, *args, **kwargs):
        """
        """
        ...

    def lineCount(self, *args, **kwargs):
        """
        """
        ...

    def loadResource(self, *args, **kwargs):
        """
        """
        ...

    def markContentsDirty(self, *args, **kwargs):
        """
        """
        ...

    def maximumBlockCount(self, *args, **kwargs):
        """
        """
        ...

    def metaInformation(self, *args, **kwargs):
        """
        """
        ...

    def object(self, *args, **kwargs):
        """
        """
        ...

    def objectForFormat(self, *args, **kwargs):
        """
        """
        ...

    def pageCount(self, *args, **kwargs):
        """
        """
        ...

    def pageSize(self, *args, **kwargs):
        """
        """
        ...

    def print_(self, *args, **kwargs):
        """
        """
        ...

    def redo(self, *args, **kwargs):
        """
        """
        ...

    def resource(self, *args, **kwargs):
        """
        """
        ...

    def revision(self, *args, **kwargs):
        """
        """
        ...

    def rootFrame(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultCursorMoveStyle(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultFont(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultStyleSheet(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultTextOption(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentLayout(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentMargin(self, *args, **kwargs):
        """
        """
        ...

    def setHtml(self, *args, **kwargs):
        """
        """
        ...

    def setIndentWidth(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumBlockCount(self, *args, **kwargs):
        """
        """
        ...

    def setMetaInformation(self, *args, **kwargs):
        """
        """
        ...

    def setModified(self, *args, **kwargs):
        """
        """
        ...

    def setPageSize(self, *args, **kwargs):
        """
        """
        ...

    def setPlainText(self, *args, **kwargs):
        """
        """
        ...

    def setTextWidth(self, *args, **kwargs):
        """
        """
        ...

    def setUndoRedoEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setUseDesignMetrics(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def textWidth(self, *args, **kwargs):
        """
        """
        ...

    def toHtml(self, *args, **kwargs):
        """
        """
        ...

    def toPlainText(self ) -> Str:
        """
        """
        ...

    def undo(self, *args, **kwargs):
        """
        """
        ...

    def useDesignMetrics(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextDocumentFragment(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromHtml(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromPlainText(*args, **kwargs):
        """
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def toHtml(self, *args, **kwargs):
        """
        """
        ...

    def toPlainText(self ) -> Str:
        """
        """
        ...

    ...

class QTextEdit(QAbstractScrollArea):
    AutoAll: ... = PySide.QtGui.QTextEdit.AutoFormattingFlag.AutoAll
    """
    """

    AutoBulletList: ...
    """
    """

    AutoFormatting: ...
    """
    """

    AutoFormattingFlag: ...
    """
    """

    AutoNone: ... = PySide.QtGui.QTextEdit.AutoFormattingFlag.AutoNone
    """
    """

    ExtraSelection: ...
    """
    """

    FixedColumnWidth: ...
    """
    """

    FixedPixelWidth: ... = PySide.QtGui.QTextEdit.LineWrapMode.FixedPixelWidth
    """
    """

    LineWrapMode: ...
    """
    """

    NoWrap: ... = PySide.QtGui.QTextEdit.LineWrapMode.NoWrap
    """
    """

    WidgetWidth: ... = PySide.QtGui.QTextEdit.LineWrapMode.WidgetWidth
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    copyAvailable: ...
    """
    Signal
    """

    currentCharFormatChanged: ...
    """
    Signal
    """

    currentColorChanged: ...
    """
    Signal
    """

    currentFontChanged: ...
    """
    Signal
    """

    cursorPositionChanged: ...
    """
    Signal
    """

    redoAvailable: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    textChanged: ...
    """
    Signal
    """

    undoAvailable: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def acceptRichText(self, *args, **kwargs):
        """
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def anchorAt(self, *args, **kwargs):
        """
        """
        ...

    def append(self, *args, **kwargs):
        """
        """
        ...

    def autoFormatting(self, *args, **kwargs):
        """
        """
        ...

    def canInsertFromMimeData(self, *args, **kwargs):
        """
        """
        ...

    def canPaste(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def copy(self, *args, **kwargs):
        """
        """
        ...

    def createMimeDataFromSelection(self, *args, **kwargs):
        """
        """
        ...

    def createStandardContextMenu(self, *args, **kwargs):
        """
        """
        ...

    def currentCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def currentFont(self, *args, **kwargs):
        """
        """
        ...

    def cursorForPosition(self, *args, **kwargs):
        """
        """
        ...

    def cursorRect(self, *args, **kwargs):
        """
        """
        ...

    def cursorWidth(self, *args, **kwargs):
        """
        """
        ...

    def cut(self, *args, **kwargs):
        """
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def documentTitle(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def ensureCursorVisible(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def extraSelections(self, *args, **kwargs):
        """
        """
        ...

    def find(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def fontFamily(self, *args, **kwargs):
        """
        """
        ...

    def fontItalic(self, *args, **kwargs):
        """
        """
        ...

    def fontPointSize(self, *args, **kwargs):
        """
        """
        ...

    def fontUnderline(self, *args, **kwargs):
        """
        """
        ...

    def fontWeight(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def insertFromMimeData(self, *args, **kwargs):
        """
        """
        ...

    def insertHtml(self, *args, **kwargs):
        """
        """
        ...

    def insertPlainText(self, *args, **kwargs):
        """
        """
        ...

    def isReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def isUndoRedoEnabled(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def lineWrapColumnOrWidth(self, *args, **kwargs):
        """
        """
        ...

    def lineWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def loadResource(self, *args, **kwargs):
        """
        """
        ...

    def mergeCurrentCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def overwriteMode(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def paste(self, *args, **kwargs):
        """
        """
        ...

    def print_(self, *args, **kwargs):
        """
        """
        ...

    def redo(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def scrollToAnchor(self, *args, **kwargs):
        """
        """
        ...

    def selectAll(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptRichText(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setAutoFormatting(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentFont(self, *args, **kwargs):
        """
        """
        ...

    def setCursorWidth(self, *args, **kwargs):
        """
        """
        ...

    def setDocument(self, *args, **kwargs):
        """
        """
        ...

    def setDocumentTitle(self, *args, **kwargs):
        """
        """
        ...

    def setExtraSelections(self, *args, **kwargs):
        """
        """
        ...

    def setFontFamily(self, *args, **kwargs):
        """
        """
        ...

    def setFontItalic(self, *args, **kwargs):
        """
        """
        ...

    def setFontPointSize(self, *args, **kwargs):
        """
        """
        ...

    def setFontUnderline(self, *args, **kwargs):
        """
        """
        ...

    def setFontWeight(self, *args, **kwargs):
        """
        """
        ...

    def setHtml(self, *args, **kwargs):
        """
        """
        ...

    def setLineWrapColumnOrWidth(self, *args, **kwargs):
        """
        """
        ...

    def setLineWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def setOverwriteMode(self, *args, **kwargs):
        """
        """
        ...

    def setPlainText(self, *args, **kwargs):
        """
        """
        ...

    def setReadOnly(self, *args, **kwargs):
        """
        """
        ...

    def setTabChangesFocus(self, *args, **kwargs):
        """
        """
        ...

    def setTabStopWidth(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextBackgroundColor(self, *args, **kwargs):
        """
        """
        ...

    def setTextColor(self, *args, **kwargs):
        """
        """
        ...

    def setTextCursor(self, *args, **kwargs):
        """
        """
        ...

    def setTextInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def setUndoRedoEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setWordWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def tabChangesFocus(self, *args, **kwargs):
        """
        """
        ...

    def tabStopWidth(self, *args, **kwargs):
        """
        """
        ...

    def textBackgroundColor(self, *args, **kwargs):
        """
        """
        ...

    def textColor(self, *args, **kwargs):
        """
        """
        ...

    def textCursor(self, *args, **kwargs):
        """
        """
        ...

    def textInteractionFlags(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def toHtml(self, *args, **kwargs):
        """
        """
        ...

    def toPlainText(self ) -> Str:
        """
        """
        ...

    def undo(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def wordWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def zoomIn(self, *args, **kwargs):
        """
        """
        ...

    def zoomOut(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextFormat(Shiboken.Object):
    AnchorHref: ... = PySide.QtGui.QTextFormat.Property.AnchorHref
    """
    """

    AnchorName: ... = PySide.QtGui.QTextFormat.Property.AnchorName
    """
    """

    BackgroundBrush: ... = PySide.QtGui.QTextFormat.Property.BackgroundBrush
    """
    """

    BackgroundImageUrl: ...
    """
    """

    BlockAlignment: ... = PySide.QtGui.QTextFormat.Property.BlockAlignment
    """
    """

    BlockBottomMargin: ...
    """
    """

    BlockFormat: ... = PySide.QtGui.QTextFormat.FormatType.BlockFormat
    """
    """

    BlockIndent: ... = PySide.QtGui.QTextFormat.Property.BlockIndent
    """
    """

    BlockLeftMargin: ... = PySide.QtGui.QTextFormat.Property.BlockLeftMargin
    """
    """

    BlockNonBreakableLines: ...
    """
    """

    BlockRightMargin: ... = PySide.QtGui.QTextFormat.Property.BlockRightMargin
    """
    """

    BlockTopMargin: ... = PySide.QtGui.QTextFormat.Property.BlockTopMargin
    """
    """

    BlockTrailingHorizontalRulerWidth: ...
    """
    """

    CharFormat: ... = PySide.QtGui.QTextFormat.FormatType.CharFormat
    """
    """

    CssFloat: ... = PySide.QtGui.QTextFormat.Property.CssFloat
    """
    """

    FirstFontProperty: ...
    """
    """

    FontCapitalization: ...
    """
    """

    FontFamily: ... = PySide.QtGui.QTextFormat.Property.FontFamily
    """
    """

    FontFixedPitch: ... = PySide.QtGui.QTextFormat.Property.FontFixedPitch
    """
    """

    FontHintingPreference: ...
    """
    """

    FontItalic: ... = PySide.QtGui.QTextFormat.Property.FontItalic
    """
    """

    FontKerning: ... = PySide.QtGui.QTextFormat.Property.FontKerning
    """
    """

    FontLetterSpacing: ...
    """
    """

    FontOverline: ... = PySide.QtGui.QTextFormat.Property.FontOverline
    """
    """

    FontPixelSize: ... = PySide.QtGui.QTextFormat.Property.FontPixelSize
    """
    """

    FontPointSize: ... = PySide.QtGui.QTextFormat.Property.FontPointSize
    """
    """

    FontSizeAdjustment: ...
    """
    """

    FontSizeIncrement: ...
    """
    """

    FontStrikeOut: ... = PySide.QtGui.QTextFormat.Property.FontStrikeOut
    """
    """

    FontStyleHint: ... = PySide.QtGui.QTextFormat.Property.FontStyleHint
    """
    """

    FontStyleStrategy: ...
    """
    """

    FontUnderline: ... = PySide.QtGui.QTextFormat.Property.FontUnderline
    """
    """

    FontWeight: ... = PySide.QtGui.QTextFormat.Property.FontWeight
    """
    """

    FontWordSpacing: ... = PySide.QtGui.QTextFormat.Property.FontWordSpacing
    """
    """

    ForegroundBrush: ... = PySide.QtGui.QTextFormat.Property.ForegroundBrush
    """
    """

    FormatType: ...
    """
    """

    FrameBorder: ... = PySide.QtGui.QTextFormat.Property.FrameBorder
    """
    """

    FrameBorderBrush: ... = PySide.QtGui.QTextFormat.Property.FrameBorderBrush
    """
    """

    FrameBorderStyle: ... = PySide.QtGui.QTextFormat.Property.FrameBorderStyle
    """
    """

    FrameBottomMargin: ...
    """
    """

    FrameFormat: ... = PySide.QtGui.QTextFormat.FormatType.FrameFormat
    """
    """

    FrameHeight: ... = PySide.QtGui.QTextFormat.Property.FrameHeight
    """
    """

    FrameLeftMargin: ... = PySide.QtGui.QTextFormat.Property.FrameLeftMargin
    """
    """

    FrameMargin: ... = PySide.QtGui.QTextFormat.Property.FrameMargin
    """
    """

    FramePadding: ... = PySide.QtGui.QTextFormat.Property.FramePadding
    """
    """

    FrameRightMargin: ... = PySide.QtGui.QTextFormat.Property.FrameRightMargin
    """
    """

    FrameTopMargin: ... = PySide.QtGui.QTextFormat.Property.FrameTopMargin
    """
    """

    FrameWidth: ... = PySide.QtGui.QTextFormat.Property.FrameWidth
    """
    """

    FullWidthSelection: ...
    """
    """

    ImageHeight: ... = PySide.QtGui.QTextFormat.Property.ImageHeight
    """
    """

    ImageName: ... = PySide.QtGui.QTextFormat.Property.ImageName
    """
    """

    ImageObject: ... = PySide.QtGui.QTextFormat.ObjectTypes.ImageObject
    """
    """

    ImageWidth: ... = PySide.QtGui.QTextFormat.Property.ImageWidth
    """
    """

    InvalidFormat: ... = PySide.QtGui.QTextFormat.FormatType.InvalidFormat
    """
    """

    IsAnchor: ... = PySide.QtGui.QTextFormat.Property.IsAnchor
    """
    """

    LastFontProperty: ... = PySide.QtGui.QTextFormat.Property.LastFontProperty
    """
    """

    LayoutDirection: ... = PySide.QtGui.QTextFormat.Property.LayoutDirection
    """
    """

    LineHeight: ... = PySide.QtGui.QTextFormat.Property.LineHeight
    """
    """

    LineHeightType: ... = PySide.QtGui.QTextFormat.Property.LineHeightType
    """
    """

    ListFormat: ... = PySide.QtGui.QTextFormat.FormatType.ListFormat
    """
    """

    ListIndent: ... = PySide.QtGui.QTextFormat.Property.ListIndent
    """
    """

    ListNumberPrefix: ... = PySide.QtGui.QTextFormat.Property.ListNumberPrefix
    """
    """

    ListNumberSuffix: ... = PySide.QtGui.QTextFormat.Property.ListNumberSuffix
    """
    """

    ListStyle: ... = PySide.QtGui.QTextFormat.Property.ListStyle
    """
    """

    NoObject: ... = PySide.QtGui.QTextFormat.ObjectTypes.NoObject
    """
    """

    ObjectIndex: ... = PySide.QtGui.QTextFormat.Property.ObjectIndex
    """
    """

    ObjectType: ... = PySide.QtGui.QTextFormat.Property.ObjectType
    """
    """

    ObjectTypes: ...
    """
    """

    OutlinePen: ... = PySide.QtGui.QTextFormat.Property.OutlinePen
    """
    """

    PageBreakFlag: ...
    """
    """

    PageBreakFlags: ...
    """
    """

    PageBreakPolicy: ... = PySide.QtGui.QTextFormat.Property.PageBreakPolicy
    """
    """

    PageBreak_AlwaysAfter: ...
    """
    """

    PageBreak_AlwaysBefore: ...
    """
    """

    PageBreak_Auto: ... = PySide.QtGui.QTextFormat.PageBreakFlag.PageBreak_Auto
    """
    """

    Property: ...
    """
    """

    TabPositions: ... = PySide.QtGui.QTextFormat.Property.TabPositions
    """
    """

    TableCellBottomPadding: ...
    """
    """

    TableCellColumnSpan: ...
    """
    """

    TableCellLeftPadding: ...
    """
    """

    TableCellObject: ... = PySide.QtGui.QTextFormat.ObjectTypes.TableCellObject
    """
    """

    TableCellPadding: ... = PySide.QtGui.QTextFormat.Property.TableCellPadding
    """
    """

    TableCellRightPadding: ...
    """
    """

    TableCellRowSpan: ... = PySide.QtGui.QTextFormat.Property.TableCellRowSpan
    """
    """

    TableCellSpacing: ... = PySide.QtGui.QTextFormat.Property.TableCellSpacing
    """
    """

    TableCellTopPadding: ...
    """
    """

    TableColumnWidthConstraints: ...
    """
    """

    TableColumns: ... = PySide.QtGui.QTextFormat.Property.TableColumns
    """
    """

    TableFormat: ... = PySide.QtGui.QTextFormat.FormatType.TableFormat
    """
    """

    TableHeaderRowCount: ...
    """
    """

    TableObject: ... = PySide.QtGui.QTextFormat.ObjectTypes.TableObject
    """
    """

    TextIndent: ... = PySide.QtGui.QTextFormat.Property.TextIndent
    """
    """

    TextOutline: ... = PySide.QtGui.QTextFormat.Property.TextOutline
    """
    """

    TextToolTip: ... = PySide.QtGui.QTextFormat.Property.TextToolTip
    """
    """

    TextUnderlineColor: ...
    """
    """

    TextUnderlineStyle: ...
    """
    """

    TextVerticalAlignment: ...
    """
    """

    UserFormat: ... = PySide.QtGui.QTextFormat.FormatType.UserFormat
    """
    """

    UserObject: ... = PySide.QtGui.QTextFormat.ObjectTypes.UserObject
    """
    """

    UserProperty: ... = PySide.QtGui.QTextFormat.Property.UserProperty
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def boolProperty(self, *args, **kwargs):
        """
        """
        ...

    def brushProperty(self, *args, **kwargs):
        """
        """
        ...

    def clearBackground(self, *args, **kwargs):
        """
        """
        ...

    def clearForeground(self, *args, **kwargs):
        """
        """
        ...

    def clearProperty(self, *args, **kwargs):
        """
        """
        ...

    def colorProperty(self, *args, **kwargs):
        """
        """
        ...

    def doubleProperty(self, *args, **kwargs):
        """
        """
        ...

    def foreground(self, *args, **kwargs):
        """
        """
        ...

    def hasProperty(self, *args, **kwargs):
        """
        """
        ...

    def intProperty(self, *args, **kwargs):
        """
        """
        ...

    def isBlockFormat(self, *args, **kwargs):
        """
        """
        ...

    def isCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def isFrameFormat(self, *args, **kwargs):
        """
        """
        ...

    def isImageFormat(self, *args, **kwargs):
        """
        """
        ...

    def isListFormat(self, *args, **kwargs):
        """
        """
        ...

    def isTableCellFormat(self, *args, **kwargs):
        """
        """
        ...

    def isTableFormat(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def layoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def lengthProperty(self, *args, **kwargs):
        """
        """
        ...

    def lengthVectorProperty(self, *args, **kwargs):
        """
        """
        ...

    def merge(self, *args, **kwargs):
        """
        """
        ...

    def objectIndex(self, *args, **kwargs):
        """
        """
        ...

    def objectType(self, *args, **kwargs):
        """
        """
        ...

    def penProperty(self, *args, **kwargs):
        """
        """
        ...

    def properties(self, *args, **kwargs):
        """
        """
        ...

    def property(self, *args, **kwargs):
        """
        """
        ...

    def propertyCount(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setForeground(self, *args, **kwargs):
        """
        """
        ...

    def setLayoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def setObjectIndex(self, *args, **kwargs):
        """
        """
        ...

    def setObjectType(self, *args, **kwargs):
        """
        """
        ...

    def setProperty(self, *args, **kwargs):
        """
        """
        ...

    def stringProperty(self, *args, **kwargs):
        """
        """
        ...

    def toBlockFormat(self, *args, **kwargs):
        """
        """
        ...

    def toCharFormat(self, *args, **kwargs):
        """
        """
        ...

    def toFrameFormat(self, *args, **kwargs):
        """
        """
        ...

    def toImageFormat(self, *args, **kwargs):
        """
        """
        ...

    def toListFormat(self, *args, **kwargs):
        """
        """
        ...

    def toTableCellFormat(self, *args, **kwargs):
        """
        """
        ...

    def toTableFormat(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextFragment(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def charFormat(self, *args, **kwargs):
        """
        """
        ...

    def charFormatIndex(self, *args, **kwargs):
        """
        """
        ...

    def contains(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextFrame(QTextObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    iterator: ...
    """
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __iter__(self, *args, **kwargs):
        """
        x.__iter__() <==> iter(x)
        """
        ...

    def begin(self, *args, **kwargs):
        """
        """
        ...

    def childFrames(self, *args, **kwargs):
        """
        """
        ...

    def end(self, *args, **kwargs):
        """
        """
        ...

    def firstCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def firstPosition(self, *args, **kwargs):
        """
        """
        ...

    def frameFormat(self, *args, **kwargs):
        """
        """
        ...

    def lastCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def lastPosition(self, *args, **kwargs):
        """
        """
        ...

    def parentFrame(self, *args, **kwargs):
        """
        """
        ...

    def setFrameFormat(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextFrameFormat(QTextFormat):
    BorderStyle: ...
    """
    """

    BorderStyle_Dashed: ...
    """
    """

    BorderStyle_DotDash: ...
    """
    """

    BorderStyle_DotDotDash: ...
    """
    """

    BorderStyle_Dotted: ...
    """
    """

    BorderStyle_Double: ...
    """
    """

    BorderStyle_Groove: ...
    """
    """

    BorderStyle_Inset: ...
    """
    """

    BorderStyle_None: ...
    """
    """

    BorderStyle_Outset: ...
    """
    """

    BorderStyle_Ridge: ...
    """
    """

    BorderStyle_Solid: ...
    """
    """

    FloatLeft: ... = PySide.QtGui.QTextFrameFormat.Position.FloatLeft
    """
    """

    FloatRight: ... = PySide.QtGui.QTextFrameFormat.Position.FloatRight
    """
    """

    InFlow: ... = PySide.QtGui.QTextFrameFormat.Position.InFlow
    """
    """

    Position: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def border(self, *args, **kwargs):
        """
        """
        ...

    def borderBrush(self, *args, **kwargs):
        """
        """
        ...

    def borderStyle(self, *args, **kwargs):
        """
        """
        ...

    def bottomMargin(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def leftMargin(self, *args, **kwargs):
        """
        """
        ...

    def margin(self, *args, **kwargs):
        """
        """
        ...

    def padding(self, *args, **kwargs):
        """
        """
        ...

    def pageBreakPolicy(self, *args, **kwargs):
        """
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def rightMargin(self, *args, **kwargs):
        """
        """
        ...

    def setBorder(self, *args, **kwargs):
        """
        """
        ...

    def setBorderBrush(self, *args, **kwargs):
        """
        """
        ...

    def setBorderStyle(self, *args, **kwargs):
        """
        """
        ...

    def setBottomMargin(self, *args, **kwargs):
        """
        """
        ...

    def setHeight(self, *args, **kwargs):
        """
        """
        ...

    def setLeftMargin(self, *args, **kwargs):
        """
        """
        ...

    def setMargin(self, *args, **kwargs):
        """
        """
        ...

    def setPadding(self, *args, **kwargs):
        """
        """
        ...

    def setPageBreakPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setPosition(self, *args, **kwargs):
        """
        """
        ...

    def setRightMargin(self, *args, **kwargs):
        """
        """
        ...

    def setTopMargin(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def topMargin(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextImageFormat(QTextCharFormat):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def name(self, *args, **kwargs):
        """
        """
        ...

    def setHeight(self, *args, **kwargs):
        """
        """
        ...

    def setName(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextInlineObject(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def ascent(self, *args, **kwargs):
        """
        """
        ...

    def descent(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def formatIndex(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def setAscent(self, *args, **kwargs):
        """
        """
        ...

    def setDescent(self, *args, **kwargs):
        """
        """
        ...

    def setWidth(self, *args, **kwargs):
        """
        """
        ...

    def textDirection(self, *args, **kwargs):
        """
        """
        ...

    def textPosition(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextItem(Shiboken.Object):
    Dummy: ... = PySide.QtGui.QTextItem.RenderFlag.Dummy
    """
    """

    Overline: ... = PySide.QtGui.QTextItem.RenderFlag.Overline
    """
    """

    RenderFlag: ...
    """
    """

    RenderFlags: ...
    """
    """

    RightToLeft: ... = PySide.QtGui.QTextItem.RenderFlag.RightToLeft
    """
    """

    StrikeOut: ... = PySide.QtGui.QTextItem.RenderFlag.StrikeOut
    """
    """

    Underline: ... = PySide.QtGui.QTextItem.RenderFlag.Underline
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def ascent(self, *args, **kwargs):
        """
        """
        ...

    def descent(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def renderFlags(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextLayout(Shiboken.Object):
    CursorMode: ...
    """
    """

    FormatRange: ...
    """
    """

    SkipCharacters: ... = PySide.QtGui.QTextLayout.CursorMode.SkipCharacters
    """
    """

    SkipWords: ... = PySide.QtGui.QTextLayout.CursorMode.SkipWords
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def additionalFormats(self, *args, **kwargs):
        """
        """
        ...

    def beginLayout(self, *args, **kwargs):
        """
        """
        ...

    def boundingRect(self, *args, **kwargs):
        """
        """
        ...

    def cacheEnabled(self, *args, **kwargs):
        """
        """
        ...

    def clearAdditionalFormats(self, *args, **kwargs):
        """
        """
        ...

    def clearLayout(self, *args, **kwargs):
        """
        """
        ...

    def createLine(self, *args, **kwargs):
        """
        """
        ...

    def cursorMoveStyle(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def drawCursor(self, *args, **kwargs):
        """
        """
        ...

    def endLayout(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def isValidCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def leftCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def lineAt(self, *args, **kwargs):
        """
        """
        ...

    def lineCount(self, *args, **kwargs):
        """
        """
        ...

    def lineForTextPosition(self, *args, **kwargs):
        """
        """
        ...

    def maximumWidth(self, *args, **kwargs):
        """
        """
        ...

    def minimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def nextCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def preeditAreaPosition(self, *args, **kwargs):
        """
        """
        ...

    def preeditAreaText(self, *args, **kwargs):
        """
        """
        ...

    def previousCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def rightCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def setAdditionalFormats(self, *args, **kwargs):
        """
        """
        ...

    def setCacheEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setCursorMoveStyle(self, *args, **kwargs):
        """
        """
        ...

    def setFlags(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setPosition(self, *args, **kwargs):
        """
        """
        ...

    def setPreeditArea(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextOption(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textOption(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextLength(Shiboken.Object):
    FixedLength: ... = PySide.QtGui.QTextLength.Type.FixedLength
    """
    """

    PercentageLength: ... = PySide.QtGui.QTextLength.Type.PercentageLength
    """
    """

    Type: ...
    """
    """

    VariableLength: ... = PySide.QtGui.QTextLength.Type.VariableLength
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def rawValue(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextLine(Shiboken.Object):
    CursorBetweenCharacters: ...
    """
    """

    CursorOnCharacter: ...
    """
    """

    CursorPosition: ...
    """
    """

    Edge: ...
    """
    """

    Leading: ... = PySide.QtGui.QTextLine.Edge.Leading
    """
    """

    Trailing: ... = PySide.QtGui.QTextLine.Edge.Trailing
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def ascent(self, *args, **kwargs):
        """
        """
        ...

    def cursorToX(self, *args, **kwargs):
        """
        """
        ...

    def descent(self, *args, **kwargs):
        """
        """
        ...

    def draw(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def horizontalAdvance(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def leading(self, *args, **kwargs):
        """
        """
        ...

    def leadingIncluded(self, *args, **kwargs):
        """
        """
        ...

    def lineNumber(self, *args, **kwargs):
        """
        """
        ...

    def naturalTextRect(self, *args, **kwargs):
        """
        """
        ...

    def naturalTextWidth(self, *args, **kwargs):
        """
        """
        ...

    def position(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def setLeadingIncluded(self, *args, **kwargs):
        """
        """
        ...

    def setLineWidth(self, *args, **kwargs):
        """
        """
        ...

    def setNumColumns(self, *args, **kwargs):
        """
        """
        ...

    def setPosition(self, *args, **kwargs):
        """
        """
        ...

    def textLength(self, *args, **kwargs):
        """
        """
        ...

    def textStart(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def xToCursor(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextList(QTextBlockGroup):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def add(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def item(self, *args, **kwargs):
        """
        """
        ...

    def itemNumber(self, *args, **kwargs):
        """
        """
        ...

    def itemText(self, *args, **kwargs):
        """
        """
        ...

    def remove(self, *args, **kwargs):
        """
        """
        ...

    def removeItem(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextListFormat(QTextFormat):
    ListCircle: ... = PySide.QtGui.QTextListFormat.Style.ListCircle
    """
    """

    ListDecimal: ... = PySide.QtGui.QTextListFormat.Style.ListDecimal
    """
    """

    ListDisc: ... = PySide.QtGui.QTextListFormat.Style.ListDisc
    """
    """

    ListLowerAlpha: ... = PySide.QtGui.QTextListFormat.Style.ListLowerAlpha
    """
    """

    ListLowerRoman: ... = PySide.QtGui.QTextListFormat.Style.ListLowerRoman
    """
    """

    ListSquare: ... = PySide.QtGui.QTextListFormat.Style.ListSquare
    """
    """

    ListStyleUndefined: ...
    """
    """

    ListUpperAlpha: ... = PySide.QtGui.QTextListFormat.Style.ListUpperAlpha
    """
    """

    ListUpperRoman: ... = PySide.QtGui.QTextListFormat.Style.ListUpperRoman
    """
    """

    Style: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def indent(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def numberPrefix(self, *args, **kwargs):
        """
        """
        ...

    def numberSuffix(self, *args, **kwargs):
        """
        """
        ...

    def setIndent(self, *args, **kwargs):
        """
        """
        ...

    def setNumberPrefix(self, *args, **kwargs):
        """
        """
        ...

    def setNumberSuffix(self, *args, **kwargs):
        """
        """
        ...

    def setStyle(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextObject(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def document(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def formatIndex(self, *args, **kwargs):
        """
        """
        ...

    def objectIndex(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextObjectInterface(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawObject(self, *args, **kwargs):
        """
        """
        ...

    def intrinsicSize(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextOption(Shiboken.Object):
    AddSpaceForLineAndParagraphSeparators: ...
    """
    """

    CenterTab: ... = PySide.QtGui.QTextOption.TabType.CenterTab
    """
    """

    DelimiterTab: ... = PySide.QtGui.QTextOption.TabType.DelimiterTab
    """
    """

    Flag: ...
    """
    """

    Flags: ...
    """
    """

    IncludeTrailingSpaces: ...
    """
    """

    LeftTab: ... = PySide.QtGui.QTextOption.TabType.LeftTab
    """
    """

    ManualWrap: ... = PySide.QtGui.QTextOption.WrapMode.ManualWrap
    """
    """

    NoWrap: ... = PySide.QtGui.QTextOption.WrapMode.NoWrap
    """
    """

    RightTab: ... = PySide.QtGui.QTextOption.TabType.RightTab
    """
    """

    ShowLineAndParagraphSeparators: ...
    """
    """

    ShowTabsAndSpaces: ... = PySide.QtGui.QTextOption.Flag.ShowTabsAndSpaces
    """
    """

    SuppressColors: ... = PySide.QtGui.QTextOption.Flag.SuppressColors
    """
    """

    Tab: ...
    """
    """

    TabType: ...
    """
    """

    WordWrap: ... = PySide.QtGui.QTextOption.WrapMode.WordWrap
    """
    """

    WrapAnywhere: ... = PySide.QtGui.QTextOption.WrapMode.WrapAnywhere
    """
    """

    WrapAtWordBoundaryOrAnywhere: ...
    """
    """

    WrapMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setFlags(self, *args, **kwargs):
        """
        """
        ...

    def setTabArray(self, *args, **kwargs):
        """
        """
        ...

    def setTabStop(self, *args, **kwargs):
        """
        """
        ...

    def setTabs(self, *args, **kwargs):
        """
        """
        ...

    def setTextDirection(self, *args, **kwargs):
        """
        """
        ...

    def setUseDesignMetrics(self, *args, **kwargs):
        """
        """
        ...

    def setWrapMode(self, *args, **kwargs):
        """
        """
        ...

    def tabArray(self, *args, **kwargs):
        """
        """
        ...

    def tabStop(self, *args, **kwargs):
        """
        """
        ...

    def tabs(self, *args, **kwargs):
        """
        """
        ...

    def textDirection(self, *args, **kwargs):
        """
        """
        ...

    def useDesignMetrics(self, *args, **kwargs):
        """
        """
        ...

    def wrapMode(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextTable(QTextFrame):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def appendColumns(self, *args, **kwargs):
        """
        """
        ...

    def appendRows(self, *args, **kwargs):
        """
        """
        ...

    def cellAt(self, *args, **kwargs):
        """
        """
        ...

    def columns(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def insertColumns(self, *args, **kwargs):
        """
        """
        ...

    def insertRows(self, *args, **kwargs):
        """
        """
        ...

    def mergeCells(self, *args, **kwargs):
        """
        """
        ...

    def removeColumns(self, *args, **kwargs):
        """
        """
        ...

    def removeRows(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def rowEnd(self, *args, **kwargs):
        """
        """
        ...

    def rowStart(self, *args, **kwargs):
        """
        """
        ...

    def rows(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def splitCell(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextTableCell(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def begin(self, *args, **kwargs):
        """
        """
        ...

    def column(self, *args, **kwargs):
        """
        """
        ...

    def columnSpan(self, *args, **kwargs):
        """
        """
        ...

    def end(self, *args, **kwargs):
        """
        """
        ...

    def firstCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def firstPosition(self, *args, **kwargs):
        """
        """
        ...

    def format(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def lastCursorPosition(self, *args, **kwargs):
        """
        """
        ...

    def lastPosition(self, *args, **kwargs):
        """
        """
        ...

    def row(self, *args, **kwargs):
        """
        """
        ...

    def rowSpan(self, *args, **kwargs):
        """
        """
        ...

    def setFormat(self, *args, **kwargs):
        """
        """
        ...

    def tableCellFormatIndex(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextTableCellFormat(QTextCharFormat):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def bottomPadding(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def leftPadding(self, *args, **kwargs):
        """
        """
        ...

    def rightPadding(self, *args, **kwargs):
        """
        """
        ...

    def setBottomPadding(self, *args, **kwargs):
        """
        """
        ...

    def setLeftPadding(self, *args, **kwargs):
        """
        """
        ...

    def setPadding(self, *args, **kwargs):
        """
        """
        ...

    def setRightPadding(self, *args, **kwargs):
        """
        """
        ...

    def setTopPadding(self, *args, **kwargs):
        """
        """
        ...

    def topPadding(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTextTableFormat(QTextFrameFormat):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def alignment(self, *args, **kwargs):
        """
        """
        ...

    def cellPadding(self, *args, **kwargs):
        """
        """
        ...

    def cellSpacing(self, *args, **kwargs):
        """
        """
        ...

    def clearColumnWidthConstraints(self, *args, **kwargs):
        """
        """
        ...

    def columnWidthConstraints(self, *args, **kwargs):
        """
        """
        ...

    def columns(self, *args, **kwargs):
        """
        """
        ...

    def headerRowCount(self, *args, **kwargs):
        """
        """
        ...

    def isValid(self, *args, **kwargs):
        """
        """
        ...

    def setAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setCellPadding(self, *args, **kwargs):
        """
        """
        ...

    def setCellSpacing(self, *args, **kwargs):
        """
        """
        ...

    def setColumnWidthConstraints(self, *args, **kwargs):
        """
        """
        ...

    def setColumns(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderRowCount(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTileRules(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QTimeEdit(QDateTimeEdit):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QToolBar(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    actionTriggered: ...
    """
    Signal
    """

    allowedAreasChanged: ...
    """
    Signal
    """

    iconSizeChanged: ...
    """
    Signal
    """

    movableChanged: ...
    """
    Signal
    """

    orientationChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    toolButtonStyleChanged: ...
    """
    Signal
    """

    topLevelChanged: ...
    """
    Signal
    """

    visibilityChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actionAt(self, *args, **kwargs):
        """
        """
        ...

    def actionEvent(self, *args, **kwargs):
        """
        """
        ...

    def actionGeometry(self, *args, **kwargs):
        """
        """
        ...

    def addAction(self, *args, **kwargs):
        """
        """
        ...

    def addSeparator(self, *args, **kwargs):
        """
        """
        ...

    def addWidget(self, *args, **kwargs):
        """
        """
        ...

    def allowedAreas(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def iconSize(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def insertSeparator(self, *args, **kwargs):
        """
        """
        ...

    def insertWidget(self, *args, **kwargs):
        """
        """
        ...

    def isAreaAllowed(self, *args, **kwargs):
        """
        """
        ...

    def isFloatable(self, *args, **kwargs):
        """
        """
        ...

    def isFloating(self, *args, **kwargs):
        """
        """
        ...

    def isMovable(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def setAllowedAreas(self, *args, **kwargs):
        """
        """
        ...

    def setFloatable(self, *args, **kwargs):
        """
        """
        ...

    def setIconSize(self, *args, **kwargs):
        """
        """
        ...

    def setMovable(self, *args, **kwargs):
        """
        """
        ...

    def setOrientation(self, *args, **kwargs):
        """
        """
        ...

    def setToolButtonStyle(self, *args, **kwargs):
        """
        """
        ...

    def toggleViewAction(self, *args, **kwargs):
        """
        """
        ...

    def toolButtonStyle(self, *args, **kwargs):
        """
        """
        ...

    def widgetForAction(self, *args, **kwargs):
        """
        """
        ...

    ...

class QToolBarChangeEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def toggle(self, *args, **kwargs):
        """
        """
        ...

    ...

class QToolBox(QFrame):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addItem(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def currentIndex(self, *args, **kwargs):
        """
        """
        ...

    def currentWidget(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def indexOf(self, *args, **kwargs):
        """
        """
        ...

    def insertItem(self, *args, **kwargs):
        """
        """
        ...

    def isItemEnabled(self, *args, **kwargs):
        """
        """
        ...

    def itemIcon(self, *args, **kwargs):
        """
        """
        ...

    def itemInserted(self, *args, **kwargs):
        """
        """
        ...

    def itemRemoved(self, *args, **kwargs):
        """
        """
        ...

    def itemText(self, *args, **kwargs):
        """
        """
        ...

    def itemToolTip(self, *args, **kwargs):
        """
        """
        ...

    def removeItem(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentIndex(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentWidget(self, *args, **kwargs):
        """
        """
        ...

    def setItemEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setItemIcon(self, *args, **kwargs):
        """
        """
        ...

    def setItemText(self, *args, **kwargs):
        """
        """
        ...

    def setItemToolTip(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QToolButton(QAbstractButton):
    DelayedPopup: ...
    """
    """

    InstantPopup: ...
    """
    """

    MenuButtonPopup: ...
    """
    """

    ToolButtonPopupMode: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    triggered: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actionEvent(self, *args, **kwargs):
        """
        """
        ...

    def arrowType(self, *args, **kwargs):
        """
        """
        ...

    def autoRaise(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def defaultAction(self, *args, **kwargs):
        """
        """
        ...

    def enterEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def hitButton(self, *args, **kwargs):
        """
        """
        ...

    def initStyleOption(self, *args, **kwargs):
        """
        """
        ...

    def leaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def menu(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def nextCheckState(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def popupMode(self, *args, **kwargs):
        """
        """
        ...

    def setArrowType(self, *args, **kwargs):
        """
        """
        ...

    def setAutoRaise(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultAction(self, *args, **kwargs):
        """
        """
        ...

    def setMenu(self, *args, **kwargs):
        """
        """
        ...

    def setPopupMode(self, *args, **kwargs):
        """
        """
        ...

    def setToolButtonStyle(self, *args, **kwargs):
        """
        """
        ...

    def showMenu(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def toolButtonStyle(self, *args, **kwargs):
        """
        """
        ...

    ...

class QToolTip(Shiboken.Object):
    @staticmethod
    def font(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def hideText(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def isVisible(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def palette(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setFont(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setPalette(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def showText(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def text(*args, **kwargs):
        """
        """
        ...

    ...

class QTouchEvent(QInputEvent):
    DeviceType: ...
    """
    """

    TouchPad: ... = PySide.QtGui.QTouchEvent.DeviceType.TouchPad
    """
    """

    TouchPoint: ...
    """
    """

    TouchScreen: ... = PySide.QtGui.QTouchEvent.DeviceType.TouchScreen
    """
    """

    def deviceType(self, *args, **kwargs):
        """
        """
        ...

    def setDeviceType(self, *args, **kwargs):
        """
        """
        ...

    def setTouchPoints(self, *args, **kwargs):
        """
        """
        ...

    def setWidget(self, *args, **kwargs):
        """
        """
        ...

    def touchPoints(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTransform(Shiboken.Object):
    TransformationType: ...
    """
    """

    TxNone: ... = PySide.QtGui.QTransform.TransformationType.TxNone
    """
    """

    TxProject: ... = PySide.QtGui.QTransform.TransformationType.TxProject
    """
    """

    TxRotate: ... = PySide.QtGui.QTransform.TransformationType.TxRotate
    """
    """

    TxScale: ... = PySide.QtGui.QTransform.TransformationType.TxScale
    """
    """

    TxShear: ... = PySide.QtGui.QTransform.TransformationType.TxShear
    """
    """

    TxTranslate: ... = PySide.QtGui.QTransform.TransformationType.TxTranslate
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def fromScale(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def fromTranslate(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def quadToQuad(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def quadToSquare(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def squareToQuad(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def adjoint(self, *args, **kwargs):
        """
        """
        ...

    def det(self, *args, **kwargs):
        """
        """
        ...

    def determinant(self, *args, **kwargs):
        """
        """
        ...

    def dx(self, *args, **kwargs):
        """
        """
        ...

    def dy(self, *args, **kwargs):
        """
        """
        ...

    def inverted(self, *args, **kwargs):
        """
        """
        ...

    def isAffine(self, *args, **kwargs):
        """
        """
        ...

    def isIdentity(self, *args, **kwargs):
        """
        """
        ...

    def isInvertible(self, *args, **kwargs):
        """
        """
        ...

    def isRotating(self, *args, **kwargs):
        """
        """
        ...

    def isScaling(self, *args, **kwargs):
        """
        """
        ...

    def isTranslating(self, *args, **kwargs):
        """
        """
        ...

    def m11(self, *args, **kwargs):
        """
        """
        ...

    def m12(self, *args, **kwargs):
        """
        """
        ...

    def m13(self, *args, **kwargs):
        """
        """
        ...

    def m21(self, *args, **kwargs):
        """
        """
        ...

    def m22(self, *args, **kwargs):
        """
        """
        ...

    def m23(self, *args, **kwargs):
        """
        """
        ...

    def m31(self, *args, **kwargs):
        """
        """
        ...

    def m32(self, *args, **kwargs):
        """
        """
        ...

    def m33(self, *args, **kwargs):
        """
        """
        ...

    def map(self, *args, **kwargs):
        """
        """
        ...

    def mapRect(self, *args, **kwargs):
        """
        """
        ...

    def mapToPolygon(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def rotate(self, *args, **kwargs):
        """
        """
        ...

    def rotateRadians(self, *args, **kwargs):
        """
        """
        ...

    def scale(self, *args, **kwargs):
        """
        """
        ...

    def setMatrix(self, *args, **kwargs):
        """
        """
        ...

    def shear(self, *args, **kwargs):
        """
        """
        ...

    def toAffine(self, *args, **kwargs):
        """
        """
        ...

    def translate(self, *args, **kwargs):
        """
        """
        ...

    def transposed(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTreeView(QAbstractItemView):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    collapsed: ...
    """
    Signal
    """

    expanded: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def allColumnsShowFocus(self, *args, **kwargs):
        """
        """
        ...

    def autoExpandDelay(self, *args, **kwargs):
        """
        """
        ...

    def collapse(self, *args, **kwargs):
        """
        """
        ...

    def collapseAll(self, *args, **kwargs):
        """
        """
        ...

    def columnAt(self, *args, **kwargs):
        """
        """
        ...

    def columnCountChanged(self, *args, **kwargs):
        """
        """
        ...

    def columnMoved(self, *args, **kwargs):
        """
        """
        ...

    def columnResized(self, *args, **kwargs):
        """
        """
        ...

    def columnViewportPosition(self, *args, **kwargs):
        """
        """
        ...

    def columnWidth(self, *args, **kwargs):
        """
        """
        ...

    def currentChanged(self, *args, **kwargs):
        """
        """
        ...

    def dataChanged(self, *args, **kwargs):
        """
        """
        ...

    def doItemsLayout(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def drawBranches(self, *args, **kwargs):
        """
        """
        ...

    def drawRow(self, *args, **kwargs):
        """
        """
        ...

    def drawTree(self, *args, **kwargs):
        """
        """
        ...

    def expand(self, *args, **kwargs):
        """
        """
        ...

    def expandAll(self, *args, **kwargs):
        """
        """
        ...

    def expandToDepth(self, *args, **kwargs):
        """
        """
        ...

    def expandsOnDoubleClick(self, *args, **kwargs):
        """
        """
        ...

    def header(self, *args, **kwargs):
        """
        """
        ...

    def hideColumn(self, *args, **kwargs):
        """
        """
        ...

    def horizontalOffset(self, *args, **kwargs):
        """
        """
        ...

    def horizontalScrollbarAction(self, *args, **kwargs):
        """
        """
        ...

    def indentation(self, *args, **kwargs):
        """
        """
        ...

    def indexAbove(self, *args, **kwargs):
        """
        """
        ...

    def indexAt(self, *args, **kwargs):
        """
        """
        ...

    def indexBelow(self, *args, **kwargs):
        """
        """
        ...

    def indexRowSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def isAnimated(self, *args, **kwargs):
        """
        """
        ...

    def isColumnHidden(self, *args, **kwargs):
        """
        """
        ...

    def isExpanded(self, *args, **kwargs):
        """
        """
        ...

    def isFirstColumnSpanned(self, *args, **kwargs):
        """
        """
        ...

    def isHeaderHidden(self, *args, **kwargs):
        """
        """
        ...

    def isIndexHidden(self, *args, **kwargs):
        """
        """
        ...

    def isRowHidden(self, *args, **kwargs):
        """
        """
        ...

    def isSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def itemsExpandable(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyboardSearch(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def moveCursor(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def reexpand(self, *args, **kwargs):
        """
        """
        ...

    def reset(self, *args, **kwargs):
        """
        """
        ...

    def resizeColumnToContents(self, *args, **kwargs):
        """
        """
        ...

    def rootIsDecorated(self, *args, **kwargs):
        """
        """
        ...

    def rowHeight(self, *args, **kwargs):
        """
        """
        ...

    def rowsAboutToBeRemoved(self, *args, **kwargs):
        """
        """
        ...

    def rowsInserted(self, *args, **kwargs):
        """
        """
        ...

    def rowsRemoved(self, *args, **kwargs):
        """
        """
        ...

    def scrollContentsBy(self, *args, **kwargs):
        """
        """
        ...

    def scrollTo(self, *args, **kwargs):
        """
        """
        ...

    def selectAll(self, *args, **kwargs):
        """
        """
        ...

    def selectedIndexes(self, *args, **kwargs):
        """
        """
        ...

    def selectionChanged(self, *args, **kwargs):
        """
        """
        ...

    def setAllColumnsShowFocus(self, *args, **kwargs):
        """
        """
        ...

    def setAnimated(self, *args, **kwargs):
        """
        """
        ...

    def setAutoExpandDelay(self, *args, **kwargs):
        """
        """
        ...

    def setColumnHidden(self, *args, **kwargs):
        """
        """
        ...

    def setColumnWidth(self, *args, **kwargs):
        """
        """
        ...

    def setExpanded(self, *args, **kwargs):
        """
        """
        ...

    def setExpandsOnDoubleClick(self, *args, **kwargs):
        """
        """
        ...

    def setFirstColumnSpanned(self, *args, **kwargs):
        """
        """
        ...

    def setHeader(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderHidden(self, *args, **kwargs):
        """
        """
        ...

    def setIndentation(self, *args, **kwargs):
        """
        """
        ...

    def setItemsExpandable(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setRootIndex(self, *args, **kwargs):
        """
        """
        ...

    def setRootIsDecorated(self, *args, **kwargs):
        """
        """
        ...

    def setRowHidden(self, *args, **kwargs):
        """
        """
        ...

    def setSelection(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionModel(self, *args, **kwargs):
        """
        """
        ...

    def setSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setUniformRowHeights(self, *args, **kwargs):
        """
        """
        ...

    def setWordWrap(self, *args, **kwargs):
        """
        """
        ...

    def showColumn(self, *args, **kwargs):
        """
        """
        ...

    def sizeHintForColumn(self, *args, **kwargs):
        """
        """
        ...

    def sortByColumn(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def uniformRowHeights(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometries(self, *args, **kwargs):
        """
        """
        ...

    def verticalOffset(self, *args, **kwargs):
        """
        """
        ...

    def viewportEvent(self, *args, **kwargs):
        """
        """
        ...

    def visualRect(self, *args, **kwargs):
        """
        """
        ...

    def visualRegionForSelection(self, *args, **kwargs):
        """
        """
        ...

    def wordWrap(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTreeWidget(QTreeView):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentItemChanged: ...
    """
    Signal
    """

    itemActivated: ...
    """
    Signal
    """

    itemChanged: ...
    """
    Signal
    """

    itemClicked: ...
    """
    Signal
    """

    itemCollapsed: ...
    """
    Signal
    """

    itemDoubleClicked: ...
    """
    Signal
    """

    itemEntered: ...
    """
    Signal
    """

    itemExpanded: ...
    """
    Signal
    """

    itemPressed: ...
    """
    Signal
    """

    itemSelectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addTopLevelItem(self, *args, **kwargs):
        """
        """
        ...

    def addTopLevelItems(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def closePersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def collapseItem(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def currentColumn(self, *args, **kwargs):
        """
        """
        ...

    def currentItem(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropMimeData(self, *args, **kwargs):
        """
        """
        ...

    def editItem(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def expandItem(self, *args, **kwargs):
        """
        """
        ...

    def findItems(self, *args, **kwargs):
        """
        """
        ...

    def headerItem(self, *args, **kwargs):
        """
        """
        ...

    def indexFromItem(self, *args, **kwargs):
        """
        """
        ...

    def indexOfTopLevelItem(self, *args, **kwargs):
        """
        """
        ...

    def insertTopLevelItem(self, *args, **kwargs):
        """
        """
        ...

    def insertTopLevelItems(self, *args, **kwargs):
        """
        """
        ...

    def invisibleRootItem(self, *args, **kwargs):
        """
        """
        ...

    def isFirstItemColumnSpanned(self, *args, **kwargs):
        """
        """
        ...

    def isItemExpanded(self, *args, **kwargs):
        """
        """
        ...

    def isItemHidden(self, *args, **kwargs):
        """
        """
        ...

    def isItemSelected(self, *args, **kwargs):
        """
        """
        ...

    def isSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def itemAbove(self, *args, **kwargs):
        """
        """
        ...

    def itemAt(self, *args, **kwargs):
        """
        """
        ...

    def itemBelow(self, *args, **kwargs):
        """
        """
        ...

    def itemFromIndex(self, *args, **kwargs):
        """
        """
        ...

    def itemWidget(self, *args, **kwargs):
        """
        """
        ...

    def mimeData(self, *args, **kwargs):
        """
        """
        ...

    def mimeTypes(self, *args, **kwargs):
        """
        """
        ...

    def openPersistentEditor(self, *args, **kwargs):
        """
        """
        ...

    def removeItemWidget(self, *args, **kwargs):
        """
        """
        ...

    def scrollToItem(self, *args, **kwargs):
        """
        """
        ...

    def selectedItems(self, *args, **kwargs):
        """
        """
        ...

    def setColumnCount(self, *args, **kwargs):
        """
        """
        ...

    def setCurrentItem(self, *args, **kwargs):
        """
        """
        ...

    def setFirstItemColumnSpanned(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderItem(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderLabel(self, *args, **kwargs):
        """
        """
        ...

    def setHeaderLabels(self, *args, **kwargs):
        """
        """
        ...

    def setItemExpanded(self, *args, **kwargs):
        """
        """
        ...

    def setItemHidden(self, *args, **kwargs):
        """
        """
        ...

    def setItemSelected(self, *args, **kwargs):
        """
        """
        ...

    def setItemWidget(self, *args, **kwargs):
        """
        """
        ...

    def setModel(self, *args, **kwargs):
        """
        """
        ...

    def setSelectionModel(self, *args, **kwargs):
        """
        """
        ...

    def setSortingEnabled(self, *args, **kwargs):
        """
        """
        ...

    def sortColumn(self, *args, **kwargs):
        """
        """
        ...

    def sortItems(self, *args, **kwargs):
        """
        """
        ...

    def supportedDropActions(self, *args, **kwargs):
        """
        """
        ...

    def takeTopLevelItem(self, *args, **kwargs):
        """
        """
        ...

    def topLevelItem(self, *args, **kwargs):
        """
        """
        ...

    def topLevelItemCount(self, *args, **kwargs):
        """
        """
        ...

    def visualItemRect(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTreeWidgetItem(Shiboken.Object):
    ChildIndicatorPolicy: ...
    """
    """

    DontShowIndicator: ...
    """
    """

    DontShowIndicatorWhenChildless: ...
    """
    """

    ItemType: ...
    """
    """

    ShowIndicator: ...
    """
    """

    Type: ... = PySide.QtGui.QTreeWidgetItem.ItemType.Type
    """
    """

    UserType: ... = PySide.QtGui.QTreeWidgetItem.ItemType.UserType
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def addChild(self, *args, **kwargs):
        """
        """
        ...

    def addChildren(self, *args, **kwargs):
        """
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def checkState(self, *args, **kwargs):
        """
        """
        ...

    def child(self, *args, **kwargs):
        """
        """
        ...

    def childCount(self, *args, **kwargs):
        """
        """
        ...

    def childIndicatorPolicy(self, *args, **kwargs):
        """
        """
        ...

    def clone(self, *args, **kwargs):
        """
        """
        ...

    def columnCount(self, *args, **kwargs):
        """
        """
        ...

    def data(self, *args, **kwargs):
        """
        """
        ...

    def emitDataChanged(self, *args, **kwargs):
        """
        """
        ...

    def flags(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def foreground(self, *args, **kwargs):
        """
        """
        ...

    def icon(self, *args, **kwargs):
        """
        """
        ...

    def indexOfChild(self, *args, **kwargs):
        """
        """
        ...

    def insertChild(self, *args, **kwargs):
        """
        """
        ...

    def insertChildren(self, *args, **kwargs):
        """
        """
        ...

    def isDisabled(self, *args, **kwargs):
        """
        """
        ...

    def isExpanded(self, *args, **kwargs):
        """
        """
        ...

    def isFirstColumnSpanned(self, *args, **kwargs):
        """
        """
        ...

    def isHidden(self, *args, **kwargs):
        """
        """
        ...

    def isSelected(self, *args, **kwargs):
        """
        """
        ...

    def parent(self, *args, **kwargs):
        """
        """
        ...

    def read(self, *args, **kwargs):
        """
        """
        ...

    def removeChild(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setCheckState(self, *args, **kwargs):
        """
        """
        ...

    def setChildIndicatorPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setData(self, *args, **kwargs):
        """
        """
        ...

    def setDisabled(self, *args, **kwargs):
        """
        """
        ...

    def setExpanded(self, *args, **kwargs):
        """
        """
        ...

    def setFirstColumnSpanned(self, *args, **kwargs):
        """
        """
        ...

    def setFlags(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setForeground(self, *args, **kwargs):
        """
        """
        ...

    def setHidden(self, *args, **kwargs):
        """
        """
        ...

    def setIcon(self, *args, **kwargs):
        """
        """
        ...

    def setSelected(self, *args, **kwargs):
        """
        """
        ...

    def setSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def setStatusTip(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def setTextAlignment(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sortChildren(self, *args, **kwargs):
        """
        """
        ...

    def statusTip(self, *args, **kwargs):
        """
        """
        ...

    def takeChild(self, *args, **kwargs):
        """
        """
        ...

    def takeChildren(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def textAlignment(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def treeWidget(self, *args, **kwargs):
        """
        """
        ...

    def type(self, *args, **kwargs):
        """
        """
        ...

    def whatsThis(self, *args, **kwargs):
        """
        """
        ...

    def write(self, *args, **kwargs):
        """
        """
        ...

    ...

class QTreeWidgetItemIterator(Shiboken.Object):
    All: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.All
    """
    """

    Checked: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.Checked
    """
    """

    Disabled: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.Disabled
    """
    """

    DragDisabled: ...
    """
    """

    DragEnabled: ...
    """
    """

    DropDisabled: ...
    """
    """

    DropEnabled: ...
    """
    """

    Editable: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.Editable
    """
    """

    Enabled: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.Enabled
    """
    """

    HasChildren: ...
    """
    """

    Hidden: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.Hidden
    """
    """

    IteratorFlag: ...
    """
    """

    IteratorFlags: ...
    """
    """

    NoChildren: ...
    """
    """

    NotChecked: ...
    """
    """

    NotEditable: ...
    """
    """

    NotHidden: ...
    """
    """

    NotSelectable: ...
    """
    """

    Selectable: ...
    """
    """

    Selected: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.Selected
    """
    """

    Unselected: ...
    """
    """

    UserFlag: ... = PySide.QtGui.QTreeWidgetItemIterator.IteratorFlag.UserFlag
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __iter__(self, *args, **kwargs):
        """
        x.__iter__() <==> iter(x)
        """
        ...

    def next(self, *args, **kwargs):
        """
        x.next() -> the next value, or raise StopIteration
        """
        ...

    def value(self, *args, **kwargs):
        """
        """
        ...

    ...

class QUndoCommand(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def actionText(self, *args, **kwargs):
        """
        """
        ...

    def child(self, *args, **kwargs):
        """
        """
        ...

    def childCount(self, *args, **kwargs):
        """
        """
        ...

    def id(self, *args, **kwargs):
        """
        """
        ...

    def mergeWith(self, *args, **kwargs):
        """
        """
        ...

    def redo(self, *args, **kwargs):
        """
        """
        ...

    def setText(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def undo(self, *args, **kwargs):
        """
        """
        ...

    ...

class QUndoGroup(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activeStackChanged: ...
    """
    Signal
    """

    canRedoChanged: ...
    """
    Signal
    """

    canUndoChanged: ...
    """
    Signal
    """

    cleanChanged: ...
    """
    Signal
    """

    indexChanged: ...
    """
    Signal
    """

    redoTextChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    undoTextChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def activeStack(self, *args, **kwargs):
        """
        """
        ...

    def addStack(self, *args, **kwargs):
        """
        """
        ...

    def canRedo(self, *args, **kwargs):
        """
        """
        ...

    def canUndo(self, *args, **kwargs):
        """
        """
        ...

    def createRedoAction(self, *args, **kwargs):
        """
        """
        ...

    def createUndoAction(self, *args, **kwargs):
        """
        """
        ...

    def isClean(self, *args, **kwargs):
        """
        """
        ...

    def redo(self, *args, **kwargs):
        """
        """
        ...

    def redoText(self, *args, **kwargs):
        """
        """
        ...

    def removeStack(self, *args, **kwargs):
        """
        """
        ...

    def setActiveStack(self, *args, **kwargs):
        """
        """
        ...

    def stacks(self, *args, **kwargs):
        """
        """
        ...

    def undo(self, *args, **kwargs):
        """
        """
        ...

    def undoText(self, *args, **kwargs):
        """
        """
        ...

    ...

class QUndoStack(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    canRedoChanged: ...
    """
    Signal
    """

    canUndoChanged: ...
    """
    Signal
    """

    cleanChanged: ...
    """
    Signal
    """

    indexChanged: ...
    """
    Signal
    """

    redoTextChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    undoTextChanged: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def beginMacro(self, *args, **kwargs):
        """
        """
        ...

    def canRedo(self, *args, **kwargs):
        """
        """
        ...

    def canUndo(self, *args, **kwargs):
        """
        """
        ...

    def cleanIndex(self, *args, **kwargs):
        """
        """
        ...

    def clear(self, *args, **kwargs):
        """
        """
        ...

    def command(self, *args, **kwargs):
        """
        """
        ...

    def count(self, *args, **kwargs):
        """
        """
        ...

    def createRedoAction(self, *args, **kwargs):
        """
        """
        ...

    def createUndoAction(self, *args, **kwargs):
        """
        """
        ...

    def endMacro(self, *args, **kwargs):
        """
        """
        ...

    def index(self, *args, **kwargs):
        """
        """
        ...

    def isActive(self, *args, **kwargs):
        """
        """
        ...

    def isClean(self, *args, **kwargs):
        """
        """
        ...

    def push(self, *args, **kwargs):
        """
        """
        ...

    def redo(self, *args, **kwargs):
        """
        """
        ...

    def redoText(self, *args, **kwargs):
        """
        """
        ...

    def setActive(self, *args, **kwargs):
        """
        """
        ...

    def setClean(self, *args, **kwargs):
        """
        """
        ...

    def setIndex(self, *args, **kwargs):
        """
        """
        ...

    def setUndoLimit(self, *args, **kwargs):
        """
        """
        ...

    def text(self, *args, **kwargs):
        """
        """
        ...

    def undo(self, *args, **kwargs):
        """
        """
        ...

    def undoLimit(self, *args, **kwargs):
        """
        """
        ...

    def undoText(self, *args, **kwargs):
        """
        """
        ...

    ...

class QUndoView(QListView):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def cleanIcon(self, *args, **kwargs):
        """
        """
        ...

    def emptyLabel(self, *args, **kwargs):
        """
        """
        ...

    def group(self, *args, **kwargs):
        """
        """
        ...

    def setCleanIcon(self, *args, **kwargs):
        """
        """
        ...

    def setEmptyLabel(self, *args, **kwargs):
        """
        """
        ...

    def setGroup(self, *args, **kwargs):
        """
        """
        ...

    def setStack(self, *args, **kwargs):
        """
        """
        ...

    def stack(self, *args, **kwargs):
        """
        """
        ...

    ...

class QVBoxLayout(QBoxLayout):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    ...

class QValidator(PySide.QtCore.QObject):
    Acceptable: ... = PySide.QtGui.QValidator.State.Acceptable
    """
    """

    Intermediate: ... = PySide.QtGui.QValidator.State.Intermediate
    """
    """

    Invalid: ... = PySide.QtGui.QValidator.State.Invalid
    """
    """

    State: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def fixup(self, *args, **kwargs):
        """
        """
        ...

    def locale(self, *args, **kwargs):
        """
        """
        ...

    def setLocale(self, *args, **kwargs):
        """
        """
        ...

    def validate(self, *args, **kwargs):
        """
        """
        ...

    ...

class QVector2D(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def dotProduct(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def lengthSquared(self, *args, **kwargs):
        """
        """
        ...

    def normalize(self, *args, **kwargs):
        """
        """
        ...

    def normalized(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def toPoint(self, *args, **kwargs):
        """
        """
        ...

    def toPointF(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def toVector3D(self, *args, **kwargs):
        """
        """
        ...

    def toVector4D(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QVector3D(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def crossProduct(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def dotProduct(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def normal(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def distanceToLine(self, *args, **kwargs):
        """
        """
        ...

    def distanceToPlane(self, *args, **kwargs):
        """
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def lengthSquared(self, *args, **kwargs):
        """
        """
        ...

    def normalize(self, *args, **kwargs):
        """
        """
        ...

    def normalized(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def setZ(self, *args, **kwargs):
        """
        """
        ...

    def toPoint(self, *args, **kwargs):
        """
        """
        ...

    def toPointF(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def toVector2D(self, *args, **kwargs):
        """
        """
        ...

    def toVector4D(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    def z(self, *args, **kwargs):
        """
        """
        ...

    ...

class QVector4D(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    @staticmethod
    def dotProduct(*args, **kwargs):
        """
        """
        ...

    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...

    def __copy__(self, *args, **kwargs):
        """
        """
        ...

    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...

    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...

    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...

    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...

    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...

    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...

    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...

    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...

    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...

    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...

    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...

    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...

    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...

    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...

    def __reduce__(self, *args, **kwargs):
        """
        """
        ...

    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...

    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...

    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...

    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...

    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...

    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...

    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...

    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...

    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...

    def isNull(self, *args, **kwargs):
        """
        """
        ...

    def length(self, *args, **kwargs):
        """
        """
        ...

    def lengthSquared(self, *args, **kwargs):
        """
        """
        ...

    def normalize(self, *args, **kwargs):
        """
        """
        ...

    def normalized(self, *args, **kwargs):
        """
        """
        ...

    def setW(self, *args, **kwargs):
        """
        """
        ...

    def setX(self, *args, **kwargs):
        """
        """
        ...

    def setY(self, *args, **kwargs):
        """
        """
        ...

    def setZ(self, *args, **kwargs):
        """
        """
        ...

    def toPoint(self, *args, **kwargs):
        """
        """
        ...

    def toPointF(self, *args, **kwargs):
        """
        """
        ...

    def toTuple(self, *args, **kwargs):
        """
        """
        ...

    def toVector2D(self, *args, **kwargs):
        """
        """
        ...

    def toVector2DAffine(self, *args, **kwargs):
        """
        """
        ...

    def toVector3D(self, *args, **kwargs):
        """
        """
        ...

    def toVector3DAffine(self, *args, **kwargs):
        """
        """
        ...

    def w(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    def z(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWhatsThis(Shiboken.Object):
    @staticmethod
    def createAction(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def enterWhatsThisMode(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def hideText(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def inWhatsThisMode(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def leaveWhatsThisMode(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def showText(*args, **kwargs):
        """
        """
        ...

    ...

class QWhatsThisClickedEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def href(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWheelEvent(QInputEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def buttons(self, *args, **kwargs):
        """
        """
        ...

    def delta(self, *args, **kwargs):
        """
        """
        ...

    def globalPos(self, *args, **kwargs):
        """
        """
        ...

    def globalX(self, *args, **kwargs):
        """
        """
        ...

    def globalY(self, *args, **kwargs):
        """
        """
        ...

    def orientation(self, *args, **kwargs):
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWidget(PySide.QtCore.QObject, QPaintDevice):
    DrawChildren: ... = PySide.QtGui.QWidget.RenderFlag.DrawChildren
    """
    """

    DrawWindowBackground: ...
    """
    """

    IgnoreMask: ... = PySide.QtGui.QWidget.RenderFlag.IgnoreMask
    """
    """

    RenderFlag: ...
    """
    """

    RenderFlags: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    customContextMenuRequested: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    @staticmethod
    def keyboardGrabber(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def mouseGrabber(*args, **kwargs):
        """
        """
        ...

    @staticmethod
    def setTabOrder(*args, **kwargs):
        """
        """
        ...

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def acceptDrops(self, *args, **kwargs):
        """
        """
        ...

    def accessibleDescription(self, *args, **kwargs):
        """
        """
        ...

    def accessibleName(self, *args, **kwargs):
        """
        """
        ...

    def actionEvent(self, *args, **kwargs):
        """
        """
        ...

    def actions(self, *args, **kwargs):
        """
        """
        ...

    def activateWindow(self, *args, **kwargs):
        """
        """
        ...

    def addAction(self, *args, **kwargs):
        """
        """
        ...

    def addActions(self, *args, **kwargs):
        """
        """
        ...

    def adjustSize(self, *args, **kwargs):
        """
        """
        ...

    def autoFillBackground(self, *args, **kwargs):
        """
        """
        ...

    def backgroundRole(self, *args, **kwargs):
        """
        """
        ...

    def baseSize(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def childAt(self, *args, **kwargs):
        """
        """
        ...

    def childrenRect(self, *args, **kwargs):
        """
        """
        ...

    def childrenRegion(self, *args, **kwargs):
        """
        """
        ...

    def clearFocus(self, *args, **kwargs):
        """
        """
        ...

    def clearMask(self, *args, **kwargs):
        """
        """
        ...

    def close(self, *args, **kwargs):
        """
        """
        ...

    def closeEvent(self, *args, **kwargs):
        """
        """
        ...

    def contentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def contentsRect(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuEvent(self, *args, **kwargs):
        """
        """
        ...

    def contextMenuPolicy(self, *args, **kwargs):
        """
        """
        ...

    def createWinId(self, *args, **kwargs):
        """
        """
        ...

    def cursor(self, *args, **kwargs):
        """
        """
        ...

    def destroy(self, *args, **kwargs):
        """
        """
        ...

    def devType(self, *args, **kwargs):
        """
        """
        ...

    def dragEnterEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragLeaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dragMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def dropEvent(self, *args, **kwargs):
        """
        """
        ...

    def effectiveWinId(self, *args, **kwargs):
        """
        """
        ...

    def ensurePolished(self, *args, **kwargs):
        """
        """
        ...

    def enterEvent(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def focusInEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusNextChild(self, *args, **kwargs):
        """
        """
        ...

    def focusNextPrevChild(self, *args, **kwargs):
        """
        """
        ...

    def focusOutEvent(self, *args, **kwargs):
        """
        """
        ...

    def focusPolicy(self, *args, **kwargs):
        """
        """
        ...

    def focusPreviousChild(self, *args, **kwargs):
        """
        """
        ...

    def focusProxy(self, *args, **kwargs):
        """
        """
        ...

    def focusWidget(self, *args, **kwargs):
        """
        """
        ...

    def font(self, *args, **kwargs):
        """
        """
        ...

    def fontInfo(self, *args, **kwargs):
        """
        """
        ...

    def fontMetrics(self, *args, **kwargs):
        """
        """
        ...

    def foregroundRole(self, *args, **kwargs):
        """
        """
        ...

    def frameGeometry(self, *args, **kwargs):
        """
        """
        ...

    def frameSize(self, *args, **kwargs):
        """
        """
        ...

    def geometry(self, *args, **kwargs):
        """
        """
        ...

    def getContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def grabGesture(self, *args, **kwargs):
        """
        """
        ...

    def grabKeyboard(self, *args, **kwargs):
        """
        """
        ...

    def grabMouse(self, *args, **kwargs):
        """
        """
        ...

    def grabShortcut(self, *args, **kwargs):
        """
        """
        ...

    def graphicsEffect(self, *args, **kwargs):
        """
        """
        ...

    def graphicsProxyWidget(self, *args, **kwargs):
        """
        """
        ...

    def hasFocus(self, *args, **kwargs):
        """
        """
        ...

    def hasMouseTracking(self, *args, **kwargs):
        """
        """
        ...

    def height(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def hide(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputContext(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodEvent(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodHints(self, *args, **kwargs):
        """
        """
        ...

    def inputMethodQuery(self, *args, **kwargs):
        """
        """
        ...

    def insertAction(self, *args, **kwargs):
        """
        """
        ...

    def insertActions(self, *args, **kwargs):
        """
        """
        ...

    def isActiveWindow(self, *args, **kwargs):
        """
        """
        ...

    def isAncestorOf(self, *args, **kwargs):
        """
        """
        ...

    def isEnabled(self, *args, **kwargs):
        """
        """
        ...

    def isEnabledTo(self, *args, **kwargs):
        """
        """
        ...

    def isFullScreen(self, *args, **kwargs):
        """
        """
        ...

    def isHidden(self, *args, **kwargs):
        """
        """
        ...

    def isLeftToRight(self, *args, **kwargs):
        """
        """
        ...

    def isMaximized(self, *args, **kwargs):
        """
        """
        ...

    def isMinimized(self, *args, **kwargs):
        """
        """
        ...

    def isModal(self, *args, **kwargs):
        """
        """
        ...

    def isRightToLeft(self, *args, **kwargs):
        """
        """
        ...

    def isVisible(self, *args, **kwargs):
        """
        """
        ...

    def isVisibleTo(self, *args, **kwargs):
        """
        """
        ...

    def isWindow(self, *args, **kwargs):
        """
        """
        ...

    def isWindowModified(self, *args, **kwargs):
        """
        """
        ...

    def keyPressEvent(self, *args, **kwargs):
        """
        """
        ...

    def keyReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def languageChange(self, *args, **kwargs):
        """
        """
        ...

    def layout(self, *args, **kwargs):
        """
        """
        ...

    def layoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def leaveEvent(self, *args, **kwargs):
        """
        """
        ...

    def locale(self, *args, **kwargs):
        """
        """
        ...

    def lower(self, *args, **kwargs):
        """
        """
        ...

    def mapFrom(self, *args, **kwargs):
        """
        """
        ...

    def mapFromGlobal(self, *args, **kwargs):
        """
        """
        ...

    def mapFromParent(self, *args, **kwargs):
        """
        """
        ...

    def mapTo(self, *args, **kwargs):
        """
        """
        ...

    def mapToGlobal(self, *args, **kwargs):
        """
        """
        ...

    def mapToParent(self, *args, **kwargs):
        """
        """
        ...

    def mask(self, *args, **kwargs):
        """
        """
        ...

    def maximumHeight(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def maximumWidth(self, *args, **kwargs):
        """
        """
        ...

    def metric(self, *args, **kwargs):
        """
        """
        ...

    def minimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumSizeHint(self, *args, **kwargs):
        """
        """
        ...

    def minimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def mouseDoubleClickEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseMoveEvent(self, *args, **kwargs):
        """
        """
        ...

    def mousePressEvent(self, *args, **kwargs):
        """
        """
        ...

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        """
        ...

    def move(self, *args, **kwargs):
        """
        """
        ...

    def moveEvent(self, *args, **kwargs):
        """
        """
        ...

    def nativeParentWidget(self, *args, **kwargs):
        """
        """
        ...

    def nextInFocusChain(self, *args, **kwargs):
        """
        """
        ...

    def normalGeometry(self, *args, **kwargs):
        """
        """
        ...

    def overrideWindowFlags(self, *args, **kwargs):
        """
        """
        ...

    def overrideWindowState(self, *args, **kwargs):
        """
        """
        ...

    def paintEngine(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def palette(self, *args, **kwargs):
        """
        """
        ...

    def parentWidget(self) -> QWidget:
        """
        """
        ...

    def pos(self, *args, **kwargs):
        """
        """
        ...

    def previousInFocusChain(self, *args, **kwargs):
        """
        """
        ...

    def raise_(self, *args, **kwargs):
        """
        """
        ...

    def rect(self, *args, **kwargs):
        """
        """
        ...

    def releaseKeyboard(self, *args, **kwargs):
        """
        """
        ...

    def releaseMouse(self, *args, **kwargs):
        """
        """
        ...

    def releaseShortcut(self, *args, **kwargs):
        """
        """
        ...

    def removeAction(self, action: QAction) -> None:
        """
        """
        ...

    def render(self, *args, **kwargs):
        """
        """
        ...

    def repaint(self, *args, **kwargs):
        """
        """
        ...

    def resetInputContext(self, *args, **kwargs):
        """
        """
        ...

    def resize(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def restoreGeometry(self, *args, **kwargs):
        """
        """
        ...

    def saveGeometry(self, *args, **kwargs):
        """
        """
        ...

    def scroll(self, *args, **kwargs):
        """
        """
        ...

    def setAcceptDrops(self, *args, **kwargs):
        """
        """
        ...

    def setAccessibleDescription(self, *args, **kwargs):
        """
        """
        ...

    def setAccessibleName(self, *args, **kwargs):
        """
        """
        ...

    def setAttribute(self, *args, **kwargs):
        """
        """
        ...

    def setAutoFillBackground(self, *args, **kwargs):
        """
        """
        ...

    def setBackgroundRole(self, *args, **kwargs):
        """
        """
        ...

    def setBaseSize(self, *args, **kwargs):
        """
        """
        ...

    def setContentsMargins(self, *args, **kwargs):
        """
        """
        ...

    def setContextMenuPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setCursor(self, *args, **kwargs):
        """
        """
        ...

    def setDisabled(self, *args, **kwargs):
        """
        """
        ...

    def setEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setFixedHeight(self, *args, **kwargs):
        """
        """
        ...

    def setFixedSize(self, *args, **kwargs):
        """
        """
        ...

    def setFixedWidth(self, *args, **kwargs):
        """
        """
        ...

    def setFocus(self, *args, **kwargs):
        """
        """
        ...

    def setFocusPolicy(self, *args, **kwargs):
        """
        """
        ...

    def setFocusProxy(self, *args, **kwargs):
        """
        """
        ...

    def setFont(self, *args, **kwargs):
        """
        """
        ...

    def setForegroundRole(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def setGraphicsEffect(self, *args, **kwargs):
        """
        """
        ...

    def setHidden(self, *args, **kwargs):
        """
        """
        ...

    def setInputContext(self, *args, **kwargs):
        """
        """
        ...

    def setInputMethodHints(self, *args, **kwargs):
        """
        """
        ...

    def setLayout(self, *args, **kwargs):
        """
        """
        ...

    def setLayoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def setLocale(self, *args, **kwargs):
        """
        """
        ...

    def setMask(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumHeight(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumSize(self, *args, **kwargs):
        """
        """
        ...

    def setMaximumWidth(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumHeight(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumSize(self, *args, **kwargs):
        """
        """
        ...

    def setMinimumWidth(self, *args, **kwargs):
        """
        """
        ...

    def setMouseTracking(self, *args, **kwargs):
        """
        """
        ...

    def setPalette(self, *args, **kwargs):
        """
        """
        ...

    def setParent(self, *args, **kwargs):
        """
        """
        ...

    def setShortcutAutoRepeat(self, *args, **kwargs):
        """
        """
        ...

    def setShortcutEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setSizeIncrement(self, *args, **kwargs):
        """
        """
        ...

    def setSizePolicy(self, *args, **kwargs):
        """
        """
        ...

    def setStatusTip(self, *args, **kwargs):
        """
        """
        ...

    def setStyle(self, *args, **kwargs):
        """
        """
        ...

    def setStyleSheet(self, *args, **kwargs):
        """
        """
        ...

    def setToolTip(self, *args, **kwargs):
        """
        """
        ...

    def setUpdatesEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def setWhatsThis(self, *args, **kwargs):
        """
        """
        ...

    def setWindowFilePath(self, *args, **kwargs):
        """
        """
        ...

    def setWindowFlags(self, *args, **kwargs):
        """
        """
        ...

    def setWindowIcon(self, *args, **kwargs):
        """
        """
        ...

    def setWindowIconText(self, *args, **kwargs):
        """
        """
        ...

    def setWindowModality(self, *args, **kwargs):
        """
        """
        ...

    def setWindowModified(self, *args, **kwargs):
        """
        """
        ...

    def setWindowOpacity(self, *args, **kwargs):
        """
        """
        ...

    def setWindowRole(self, *args, **kwargs):
        """
        """
        ...

    def setWindowState(self, *args, **kwargs):
        """
        """
        ...

    def setWindowTitle(self, *args, **kwargs):
        """
        """
        ...

    def show(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def showFullScreen(self, *args, **kwargs):
        """
        """
        ...

    def showMaximized(self, *args, **kwargs):
        """
        """
        ...

    def showMinimized(self, *args, **kwargs):
        """
        """
        ...

    def showNormal(self, *args, **kwargs):
        """
        """
        ...

    def size(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def sizeIncrement(self, *args, **kwargs):
        """
        """
        ...

    def sizePolicy(self, *args, **kwargs):
        """
        """
        ...

    def stackUnder(self, *args, **kwargs):
        """
        """
        ...

    def statusTip(self, *args, **kwargs):
        """
        """
        ...

    def style(self, *args, **kwargs):
        """
        """
        ...

    def styleSheet(self, *args, **kwargs):
        """
        """
        ...

    def tabletEvent(self, *args, **kwargs):
        """
        """
        ...

    def testAttribute(self, *args, **kwargs):
        """
        """
        ...

    def toolTip(self, *args, **kwargs):
        """
        """
        ...

    def underMouse(self, *args, **kwargs):
        """
        """
        ...

    def ungrabGesture(self, *args, **kwargs):
        """
        """
        ...

    def unsetCursor(self, *args, **kwargs):
        """
        """
        ...

    def unsetLayoutDirection(self, *args, **kwargs):
        """
        """
        ...

    def unsetLocale(self, *args, **kwargs):
        """
        """
        ...

    def update(self, *args, **kwargs):
        """
        """
        ...

    def updateGeometry(self, *args, **kwargs):
        """
        """
        ...

    def updateMicroFocus(self, *args, **kwargs):
        """
        """
        ...

    def updatesEnabled(self, *args, **kwargs):
        """
        """
        ...

    def visibleRegion(self, *args, **kwargs):
        """
        """
        ...

    def whatsThis(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def width(self, *args, **kwargs):
        """
        """
        ...

    def winEvent(self, *args, **kwargs):
        """
        """
        ...

    def winId(self, *args, **kwargs):
        """
        """
        ...

    def window(self, *args, **kwargs):
        """
        """
        ...

    def windowFilePath(self, *args, **kwargs):
        """
        """
        ...

    def windowFlags(self, *args, **kwargs):
        """
        """
        ...

    def windowIcon(self, *args, **kwargs):
        """
        """
        ...

    def windowIconText(self, *args, **kwargs):
        """
        """
        ...

    def windowModality(self, *args, **kwargs):
        """
        """
        ...

    def windowOpacity(self, *args, **kwargs):
        """
        """
        ...

    def windowRole(self, *args, **kwargs):
        """
        """
        ...

    def windowState(self, *args, **kwargs):
        """
        """
        ...

    def windowTitle(self, *args, **kwargs):
        """
        """
        ...

    def windowType(self, *args, **kwargs):
        """
        """
        ...

    def x(self, *args, **kwargs):
        """
        """
        ...

    def y(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWidgetAction(QAction):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def createWidget(self, *args, **kwargs):
        """
        """
        ...

    def createdWidgets(self, *args, **kwargs):
        """
        """
        ...

    def defaultWidget(self, *args, **kwargs):
        """
        """
        ...

    def deleteWidget(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def releaseWidget(self, *args, **kwargs):
        """
        """
        ...

    def requestWidget(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultWidget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWidgetItem(QLayoutItem):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def expandingDirections(self, *args, **kwargs):
        """
        """
        ...

    def geometry(self, *args, **kwargs):
        """
        """
        ...

    def hasHeightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def heightForWidth(self, *args, **kwargs):
        """
        """
        ...

    def isEmpty(self, *args, **kwargs):
        """
        """
        ...

    def maximumSize(self, *args, **kwargs):
        """
        """
        ...

    def minimumSize(self, *args, **kwargs):
        """
        """
        ...

    def setGeometry(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def widget(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWindowStateChangeEvent(PySide.QtCore.QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def isOverride(self, *args, **kwargs):
        """
        """
        ...

    def oldState(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWindowsStyle(QCommonStyle):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def drawComplexControl(self, *args, **kwargs):
        """
        """
        ...

    def drawControl(self, *args, **kwargs):
        """
        """
        ...

    def drawPrimitive(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def pixelMetric(self, *args, **kwargs):
        """
        """
        ...

    def polish(self, *args, **kwargs):
        """
        """
        ...

    def sizeFromContents(self, *args, **kwargs):
        """
        """
        ...

    def standardIconImplementation(self, *args, **kwargs):
        """
        """
        ...

    def styleHint(self, *args, **kwargs):
        """
        """
        ...

    def subElementRect(self, *args, **kwargs):
        """
        """
        ...

    def timerEvent(self, *args, **kwargs):
        """
        """
        ...

    def unpolish(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWizard(QDialog):
    AeroStyle: ... = PySide.QtGui.QWizard.WizardStyle.AeroStyle
    """
    """

    BackButton: ... = PySide.QtGui.QWizard.WizardButton.BackButton
    """
    """

    BackgroundPixmap: ... = PySide.QtGui.QWizard.WizardPixmap.BackgroundPixmap
    """
    """

    BannerPixmap: ... = PySide.QtGui.QWizard.WizardPixmap.BannerPixmap
    """
    """

    CancelButton: ... = PySide.QtGui.QWizard.WizardButton.CancelButton
    """
    """

    CancelButtonOnLeft: ...
    """
    """

    ClassicStyle: ... = PySide.QtGui.QWizard.WizardStyle.ClassicStyle
    """
    """

    CommitButton: ... = PySide.QtGui.QWizard.WizardButton.CommitButton
    """
    """

    CustomButton1: ... = PySide.QtGui.QWizard.WizardButton.CustomButton1
    """
    """

    CustomButton2: ... = PySide.QtGui.QWizard.WizardButton.CustomButton2
    """
    """

    CustomButton3: ... = PySide.QtGui.QWizard.WizardButton.CustomButton3
    """
    """

    DisabledBackButtonOnLastPage: ...
    """
    """

    ExtendedWatermarkPixmap: ...
    """
    """

    FinishButton: ... = PySide.QtGui.QWizard.WizardButton.FinishButton
    """
    """

    HaveCustomButton1: ...
    """
    """

    HaveCustomButton2: ...
    """
    """

    HaveCustomButton3: ...
    """
    """

    HaveFinishButtonOnEarlyPages: ...
    """
    """

    HaveHelpButton: ... = PySide.QtGui.QWizard.WizardOption.HaveHelpButton
    """
    """

    HaveNextButtonOnLastPage: ...
    """
    """

    HelpButton: ... = PySide.QtGui.QWizard.WizardButton.HelpButton
    """
    """

    HelpButtonOnRight: ...
    """
    """

    IgnoreSubTitles: ... = PySide.QtGui.QWizard.WizardOption.IgnoreSubTitles
    """
    """

    IndependentPages: ... = PySide.QtGui.QWizard.WizardOption.IndependentPages
    """
    """

    LogoPixmap: ... = PySide.QtGui.QWizard.WizardPixmap.LogoPixmap
    """
    """

    MacStyle: ... = PySide.QtGui.QWizard.WizardStyle.MacStyle
    """
    """

    ModernStyle: ... = PySide.QtGui.QWizard.WizardStyle.ModernStyle
    """
    """

    NButtons: ... = PySide.QtGui.QWizard.WizardButton.NButtons
    """
    """

    NPixmaps: ... = PySide.QtGui.QWizard.WizardPixmap.NPixmaps
    """
    """

    NStandardButtons: ... = PySide.QtGui.QWizard.WizardButton.NStandardButtons
    """
    """

    NStyles: ... = PySide.QtGui.QWizard.WizardStyle.NStyles
    """
    """

    NextButton: ... = PySide.QtGui.QWizard.WizardButton.NextButton
    """
    """

    NoBackButtonOnLastPage: ...
    """
    """

    NoBackButtonOnStartPage: ...
    """
    """

    NoButton: ... = PySide.QtGui.QWizard.WizardButton.NoButton
    """
    """

    NoCancelButton: ... = PySide.QtGui.QWizard.WizardOption.NoCancelButton
    """
    """

    NoDefaultButton: ... = PySide.QtGui.QWizard.WizardOption.NoDefaultButton
    """
    """

    Stretch: ... = PySide.QtGui.QWizard.WizardButton.Stretch
    """
    """

    WatermarkPixmap: ... = PySide.QtGui.QWizard.WizardPixmap.WatermarkPixmap
    """
    """

    WizardButton: ...
    """
    """

    WizardOption: ...
    """
    """

    WizardOptions: ...
    """
    """

    WizardPixmap: ...
    """
    """

    WizardStyle: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentIdChanged: ...
    """
    Signal
    """

    customButtonClicked: ...
    """
    Signal
    """

    helpRequested: ...
    """
    Signal
    """

    pageAdded: ...
    """
    Signal
    """

    pageRemoved: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def addPage(self, *args, **kwargs):
        """
        """
        ...

    def back(self, *args, **kwargs):
        """
        """
        ...

    def button(self, *args, **kwargs):
        """
        """
        ...

    def buttonText(self, *args, **kwargs):
        """
        """
        ...

    def cleanupPage(self, *args, **kwargs):
        """
        """
        ...

    def currentId(self, *args, **kwargs):
        """
        """
        ...

    def currentPage(self, *args, **kwargs):
        """
        """
        ...

    def done(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def field(self, *args, **kwargs):
        """
        """
        ...

    def hasVisitedPage(self, *args, **kwargs):
        """
        """
        ...

    def initializePage(self, *args, **kwargs):
        """
        """
        ...

    def next(self, *args, **kwargs):
        """
        """
        ...

    def nextId(self, *args, **kwargs):
        """
        """
        ...

    def options(self, *args, **kwargs):
        """
        """
        ...

    def page(self, *args, **kwargs):
        """
        """
        ...

    def pageIds(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def removePage(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def restart(self, *args, **kwargs):
        """
        """
        ...

    def setButton(self, *args, **kwargs):
        """
        """
        ...

    def setButtonLayout(self, *args, **kwargs):
        """
        """
        ...

    def setButtonText(self, *args, **kwargs):
        """
        """
        ...

    def setDefaultProperty(self, *args, **kwargs):
        """
        """
        ...

    def setField(self, *args, **kwargs):
        """
        """
        ...

    def setOption(self, *args, **kwargs):
        """
        """
        ...

    def setOptions(self, *args, **kwargs):
        """
        """
        ...

    def setPage(self, *args, **kwargs):
        """
        """
        ...

    def setPixmap(self, *args, **kwargs):
        """
        """
        ...

    def setSideWidget(self, *args, **kwargs):
        """
        """
        ...

    def setStartId(self, *args, **kwargs):
        """
        """
        ...

    def setSubTitleFormat(self, *args, **kwargs):
        """
        """
        ...

    def setTitleFormat(self, *args, **kwargs):
        """
        """
        ...

    def setVisible(self, *args, **kwargs):
        """
        """
        ...

    def setWizardStyle(self, *args, **kwargs):
        """
        """
        ...

    def sideWidget(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def startId(self, *args, **kwargs):
        """
        """
        ...

    def subTitleFormat(self, *args, **kwargs):
        """
        """
        ...

    def testOption(self, *args, **kwargs):
        """
        """
        ...

    def titleFormat(self, *args, **kwargs):
        """
        """
        ...

    def validateCurrentPage(self, *args, **kwargs):
        """
        """
        ...

    def visitedPages(self, *args, **kwargs):
        """
        """
        ...

    def winEvent(self, *args, **kwargs):
        """
        """
        ...

    def wizardStyle(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWizardPage(QWidget):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    completeChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def buttonText(self, *args, **kwargs):
        """
        """
        ...

    def cleanupPage(self, *args, **kwargs):
        """
        """
        ...

    def field(self, *args, **kwargs):
        """
        """
        ...

    def initializePage(self, *args, **kwargs):
        """
        """
        ...

    def isCommitPage(self, *args, **kwargs):
        """
        """
        ...

    def isComplete(self, *args, **kwargs):
        """
        """
        ...

    def isFinalPage(self, *args, **kwargs):
        """
        """
        ...

    def nextId(self, *args, **kwargs):
        """
        """
        ...

    def pixmap(self, *args, **kwargs):
        """
        """
        ...

    def registerField(self, *args, **kwargs):
        """
        """
        ...

    def setButtonText(self, *args, **kwargs):
        """
        """
        ...

    def setCommitPage(self, *args, **kwargs):
        """
        """
        ...

    def setField(self, *args, **kwargs):
        """
        """
        ...

    def setFinalPage(self, *args, **kwargs):
        """
        """
        ...

    def setPixmap(self, *args, **kwargs):
        """
        """
        ...

    def setSubTitle(self, *args, **kwargs):
        """
        """
        ...

    def setTitle(self, *args, **kwargs):
        """
        """
        ...

    def subTitle(self, *args, **kwargs):
        """
        """
        ...

    def title(self, *args, **kwargs):
        """
        """
        ...

    def validatePage(self, *args, **kwargs):
        """
        """
        ...

    def wizard(self, *args, **kwargs):
        """
        """
        ...

    ...

class QWorkspace(QWidget):
    CreationOrder: ... = PySide.QtGui.QWorkspace.WindowOrder.CreationOrder
    """
    """

    StackingOrder: ... = PySide.QtGui.QWorkspace.WindowOrder.StackingOrder
    """
    """

    WindowOrder: ...
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    """

    windowActivated: ...
    """
    Signal
    """

    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...

    def activateNextWindow(self, *args, **kwargs):
        """
        """
        ...

    def activatePreviousWindow(self, *args, **kwargs):
        """
        """
        ...

    def activeWindow(self, *args, **kwargs):
        """
        """
        ...

    def addWindow(self, *args, **kwargs):
        """
        """
        ...

    def arrangeIcons(self, *args, **kwargs):
        """
        """
        ...

    def background(self, *args, **kwargs):
        """
        """
        ...

    def cascade(self, *args, **kwargs):
        """
        """
        ...

    def changeEvent(self, *args, **kwargs):
        """
        """
        ...

    def childEvent(self, *args, **kwargs):
        """
        """
        ...

    def closeActiveWindow(self, *args, **kwargs):
        """
        """
        ...

    def closeAllWindows(self, *args, **kwargs):
        """
        """
        ...

    def event(self, *args, **kwargs):
        """
        """
        ...

    def eventFilter(self, *args, **kwargs):
        """
        """
        ...

    def hideEvent(self, *args, **kwargs):
        """
        """
        ...

    def paintEvent(self, *args, **kwargs):
        """
        """
        ...

    def resizeEvent(self, *args, **kwargs):
        """
        """
        ...

    def scrollBarsEnabled(self, *args, **kwargs):
        """
        """
        ...

    def setActiveWindow(self, *args, **kwargs):
        """
        """
        ...

    def setBackground(self, *args, **kwargs):
        """
        """
        ...

    def setScrollBarsEnabled(self, *args, **kwargs):
        """
        """
        ...

    def showEvent(self, *args, **kwargs):
        """
        """
        ...

    def sizeHint(self, *args, **kwargs):
        """
        """
        ...

    def tile(self, *args, **kwargs):
        """
        """
        ...

    def wheelEvent(self, *args, **kwargs):
        """
        """
        ...

    def windowList(self, *args, **kwargs):
        """
        """
        ...

    ...

def qAlpha(*args, **kwargs):
    """
    """
    ...


def qBlue(*args, **kwargs):
    """
    """
    ...


def qGray(*args, **kwargs):
    """
    """
    ...


def qGreen(*args, **kwargs):
    """
    """
    ...


def qIsGray(*args, **kwargs):
    """
    """
    ...


def qRed(*args, **kwargs):
    """
    """
    ...


def qRgb(*args, **kwargs):
    """
    """
    ...


def qRgba(*args, **kwargs):
    """
    """
    ...


__all__: ...
"""
['QAbstractButton', 'QAbstractGraphicsShapeItem', 'QAbstract...
"""

qApp: ...
"""
<PySide.QtGui.QApplication object>
"""

