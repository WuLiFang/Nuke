# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
# pyright: reportUndefinedVariable=information,reportUnusedImport=false
"""
hiero.core.events - # Event registration and dispatching

"""

import typing

from wulifang.vendor.Qt.QtWidgets import QMenu

class Callback:
    """
    # Represents an event handler
    """

    def __init__(self, method, connection=1, *args, **kwargs):
        """ """
        ...
    ...

class Connection:
    """
    Execute callback always, no matter how the event is triggered.
    """

    kAny: ... = 1
    """
    """

    kDirect: ... = 2
    """
    """

    ...

class Event:
    """
    The class which is passed to event handlers
    """

    def __init__(self, type=None, subtype=None, **kwargs):
        """ """
        ...
    def accept(self):
        """ """
        ...
    def ignore(self):
        """ """
        ...
    def isAccepted(self):
        """ """
        ...
    menu: QMenu
    ...

class EventType:
    """
    # An enum of all registered event types
    """

    kAfterNewProjectCreated: ...
    """
    """

    kAfterProjectClose: ...
    """
    """

    kAfterProjectLoad: ...
    """
    """

    kAfterProjectSave: ...
    """
    """

    kAny: ...
    """
    """

    kAutoSaveTriggered: ...
    """
    """

    kBeforeNewProjectCreated: ...
    """
    """

    kBeforeProjectClose: ...
    """
    """

    kBeforeProjectLoad: ...
    """
    """

    kBeforeProjectSave: ...
    """
    """

    kBin: ...
    """
    """

    kContextChanged: ...
    """
    """

    kDoubleClick: ...
    """
    """

    kDrop: ...
    """
    """

    kExportDialog: ...
    """
    """

    kPlayback: ...
    """
    """

    kPlaybackClipChanged: ...
    """
    """

    kPlaybackStarted: ...
    """
    """

    kPlaybackStopped: ...
    """
    """

    kPlayheadAtEnd: ...
    """
    """

    kPlayheadAtStart: ...
    """
    """

    kSelectionChanged: ...
    """
    """

    kSequenceFormatChanged: ...
    """
    """

    kShowContextMenu: ...
    """
    """

    kShutdown: ...
    """
    """

    kShutdownFinal: ...
    """
    """

    kSpreadsheet: ...
    """
    """

    kStartup: ...
    """
    """

    kTimeline: ...
    """
    """

    ...

def _callCallbacks(event, callbacks, connectionTypeFlags):
    """ """
    ...

def _dispatchEvent(event, connectionTypeFlags):
    """ """
    ...

def _dispatchQueuedEvents():
    """ """
    ...

def _postEvent(event):
    """
    Post an event to the event queue. This only calls listeners registered with connection = kQueued or connection = kAny.
    """
    ...

def _sendEvent(event):
    """
    Send an event immediately. The caller will block until the event has been handled.
    This only calls listeners registered with connection = kDirect or connection = kAny.
    """
    ...

def _signalEvent(event):
    """
    Send an event to all registered listeners, either directly (for those registered with connection = kDirect) or through the
    event queue (for those registered with connection = kQueued or connection = kAny).
    """
    ...

def _splitType(type, methodName):
    """ """
    ...

def postEvent(type, subtype, **kwargs):
    """
    Post an event to the event queue. This only calls listeners registered with connection = kQueued or connection = kAny.
    """
    ...

def registerEventType(name):
    """
    Register a new event type. The type should be a string (suitable as an attribute name) describing the event, e.g. 'kStartup'.
    """
    ...

def registerInterest(
    type: typing.Text,
    callback: typing.Callable[[Event], None],
    connection: int = 1,
) -> None:
    """
    Register interest in an event type. The callback will be called whenever an event of the given type is dispatched.
    """
    ...

def sendEvent(type, subtype, **kwargs):
    """
    Send an event immediately. The caller will block until the event has been handled.
    This only calls listeners registered with connection = kDirect or connection = kAny.
    """
    ...

def signalEvent(type, subtype, **kwargs):
    """
    Send an event to all registered listeners, either directly (for those registered with connection = kDirect) or through the
    event queue (for those registered with connection = kQueued or connection = kAny).
    """
    ...

def unregisterEventType(name):
    """
    Unregister an event type.
    """
    ...

def unregisterInterest(type: typing.Text, callback: typing.Callable[[Event], None]) -> None:
    """
    Unregister interest in an event type. The callback will no longer be called whenever an event of the given type is dispatched.
    """
    ...

__all__: ...
"""
['Callback', 'Connection', 'Event', 'EventType', 'PySide', '...
"""

_eventHandlers: ...
"""
{'kAfterProjectLoad': {'*': [<hiero.core.events.Callb...
"""

_eventQueue: ...
"""
<Queue.Queue instance>
"""

eventDispatcher: ...
"""
<PySide.QtCore.QAbstractEventDispatcher object>
"""
