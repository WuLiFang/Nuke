# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
# pyright: reportUndefinedVariable=information,reportUnusedImport=false
"""
wulifang.vendor.pyblish.compat - Compatibility module

"""

import typing

Conformer = Integrator

Selector = Collector

def add(*args, **kwargs):
    """
    """
    ...


def create_asset(*args, **kwargs):
    """
    """
    ...


def deregister_all(*args, **kwargs):
    """
    """
    ...


def format_filename(*args, **kwargs):
    """
    """
    ...


def format_filename2(*args, **kwargs):
    """
    """
    ...


def has_data(*args, **kwargs):
    """
    DEPRECATED - USE .data DICTIONARY DIRECTLY
    Check if entity has key
    Arguments:
        key (str): Key to check
    Return:
        True if it exists, False otherwise
    """
    ...


def process(*args, **kwargs):
    """
    Primary processing logic
    Takes callables and data as input, and performs
    logical operations on them until the currently
    registered test fails.
    If `plugins` is a callable, it is called early, before
    processing begins. If `context` is a callable, it will
    be called once per plug-in.
    Arguments:
        func (callable): Callable taking three arguments;
             plugin(Plugin), context(Context) and optional
             instance(Instance). Each must provide a matching
             interface to their corresponding objects.
        plugins (list, callable): Plug-ins to process. If a
            callable is provided, the return value is used
            as plug-ins. It is called with no arguments.
        context (Context, callable): Context whose instances
            are to be processed. If a callable is provided,
            the return value is used as context. It is called
            with no arguments.
        test (callable, optional): Provide custom test, defaults
            to the currently registered test.
    Yields:
        A result per complete process. If test fails,
        a TestFailed exception is returned, containing the
        variables used in the test. Finally, any exception
        thrown by `func` is yielded. Note that this is
        considered a bug in *your* code as you are the one
        supplying it.
    """
    ...


def remove(*args, **kwargs):
    """
    DEPRECATED - USE .pop
    Remove member from self
    This is to mimic the interface of set()
    """
    ...


def remove_data(*args, **kwargs):
    """
    DEPRECATED - USE .data DICTIONARY DIRECTLY
    Remove data from entity
    Arguments;
        key (str): Name of data to remove
    """
    ...


def set_data(*args, **kwargs):
    """
    DEPRECATED - USE .data DICTIONARY DIRECTLY
    Modify/insert data into entity
    Arguments:
        key (str): Name of data to add
        value (object): Value of data to add
    """
    ...


def sort(*args, **kwargs):
    """
    """
    ...


__all__: ...
"""
['Conformer', 'Selector', '__builtins__', '__doc__', '__file...
"""

_filename_ascii_strip_re: ...
"""
<_sre.SRE_Pattern object>
"""

_windows_device_files: ...
"""
('CON', 'AUX', 'COM1', 'COM2', 'COM3', 'COM4',...
"""

