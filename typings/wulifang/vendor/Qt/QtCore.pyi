# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
"""
Qt.QtCore
"""

import PySide
import Shiboken
from typing import Any, Optional, TypeVar, Optional, Union, Callable, Type
from wulifang._compat.str import Str

class Property:
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def getter(self, *args, **kwargs):
        """ """
        ...
    def read(self, *args, **kwargs):
        """ """
        ...
    def setter(self, *args, **kwargs):
        """ """
        ...
    def write(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractAnimation(QObject):
    Backward: ... = QAbstractAnimation.Direction.Backward
    """
    """

    DeleteWhenStopped: ...
    """
    QAbstractAnimation.DeletionPolicy.De...
    """

    DeletionPolicy: ...
    """
    <type 'QAbstractAnimation.DeletionPolic...
    """

    Direction: ...
    """
    <type 'QAbstractAnimation.Direction'>
    """

    Forward: ... = QAbstractAnimation.Direction.Forward
    """
    """

    KeepWhenStopped: ...
    """
    QAbstractAnimation.DeletionPolicy.Keep...
    """

    Paused: ... = QAbstractAnimation.State.Paused
    """
    """

    Running: ... = QAbstractAnimation.State.Running
    """
    """

    State: ...
    """
    <type 'QAbstractAnimation.State'>
    """

    Stopped: ... = QAbstractAnimation.State.Stopped
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentLoopChanged: ...
    """
    Signal
    """

    directionChanged: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def currentLoop(self, *args, **kwargs):
        """ """
        ...
    def currentLoopTime(self, *args, **kwargs):
        """ """
        ...
    def currentTime(self, *args, **kwargs):
        """ """
        ...
    def direction(self, *args, **kwargs):
        """ """
        ...
    def duration(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def group(self, *args, **kwargs):
        """ """
        ...
    def loopCount(self, *args, **kwargs):
        """ """
        ...
    def pause(self, *args, **kwargs):
        """ """
        ...
    def resume(self, *args, **kwargs):
        """ """
        ...
    def setCurrentTime(self, *args, **kwargs):
        """ """
        ...
    def setDirection(self, *args, **kwargs):
        """ """
        ...
    def setLoopCount(self, *args, **kwargs):
        """ """
        ...
    def setPaused(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def state(self, *args, **kwargs):
        """ """
        ...
    def stop(self, *args, **kwargs):
        """ """
        ...
    def totalDuration(self, *args, **kwargs):
        """ """
        ...
    def updateCurrentTime(self, *args, **kwargs):
        """ """
        ...
    def updateDirection(self, *args, **kwargs):
        """ """
        ...
    def updateState(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractEventDispatcher(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToBlock: ...
    """
    Signal
    """

    awake: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def instance(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def closingDown(self, *args, **kwargs):
        """ """
        ...
    def flush(self, *args, **kwargs):
        """ """
        ...
    def hasPendingEvents(self, *args, **kwargs):
        """ """
        ...
    def interrupt(self, *args, **kwargs):
        """ """
        ...
    def processEvents(self, *args, **kwargs):
        """ """
        ...
    def registerSocketNotifier(self, *args, **kwargs):
        """ """
        ...
    def registerTimer(self, *args, **kwargs):
        """ """
        ...
    def registeredTimers(self, *args, **kwargs):
        """ """
        ...
    def startingUp(self, *args, **kwargs):
        """ """
        ...
    def unregisterSocketNotifier(self, *args, **kwargs):
        """ """
        ...
    def unregisterTimer(self, *args, **kwargs):
        """ """
        ...
    def unregisterTimers(self, *args, **kwargs):
        """ """
        ...
    def wakeUp(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractItemModel(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    columnsAboutToBeInserted: ...
    """
    Signal
    """

    columnsAboutToBeMoved: ...
    """
    Signal
    """

    columnsAboutToBeRemoved: ...
    """
    Signal
    """

    columnsInserted: ...
    """
    Signal
    """

    columnsMoved: ...
    """
    Signal
    """

    columnsRemoved: ...
    """
    Signal
    """

    dataChanged: ...
    """
    Signal
    """

    headerDataChanged: ...
    """
    Signal
    """

    layoutAboutToBeChanged: ...
    """
    Signal
    """

    layoutChanged: ...
    """
    Signal
    """

    modelAboutToBeReset: ...
    """
    Signal
    """

    modelReset: ...
    """
    Signal
    """

    rowsAboutToBeInserted: ...
    """
    Signal
    """

    rowsAboutToBeMoved: ...
    """
    Signal
    """

    rowsAboutToBeRemoved: ...
    """
    Signal
    """

    rowsInserted: ...
    """
    Signal
    """

    rowsMoved: ...
    """
    Signal
    """

    rowsRemoved: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def beginInsertColumns(self, *args, **kwargs):
        """ """
        ...
    def beginInsertRows(self, *args, **kwargs):
        """ """
        ...
    def beginMoveColumns(self, *args, **kwargs):
        """ """
        ...
    def beginMoveRows(self, *args, **kwargs):
        """ """
        ...
    def beginRemoveColumns(self, *args, **kwargs):
        """ """
        ...
    def beginRemoveRows(self, *args, **kwargs):
        """ """
        ...
    def beginResetModel(self, *args, **kwargs):
        """ """
        ...
    def buddy(self, *args, **kwargs):
        """ """
        ...
    def canFetchMore(self, *args, **kwargs):
        """ """
        ...
    def changePersistentIndex(self, *args, **kwargs):
        """ """
        ...
    def changePersistentIndexList(self, *args, **kwargs):
        """ """
        ...
    def columnCount(self, *args, **kwargs):
        """ """
        ...
    def createIndex(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def decodeData(self, *args, **kwargs):
        """ """
        ...
    def dropMimeData(self, *args, **kwargs):
        """ """
        ...
    def encodeData(self, *args, **kwargs):
        """ """
        ...
    def endInsertColumns(self, *args, **kwargs):
        """ """
        ...
    def endInsertRows(self, *args, **kwargs):
        """ """
        ...
    def endMoveColumns(self, *args, **kwargs):
        """ """
        ...
    def endMoveRows(self, *args, **kwargs):
        """ """
        ...
    def endRemoveColumns(self, *args, **kwargs):
        """ """
        ...
    def endRemoveRows(self, *args, **kwargs):
        """ """
        ...
    def endResetModel(self, *args, **kwargs):
        """ """
        ...
    def fetchMore(self, *args, **kwargs):
        """ """
        ...
    def flags(self, *args, **kwargs):
        """ """
        ...
    def hasChildren(self, *args, **kwargs):
        """ """
        ...
    def hasIndex(self, *args, **kwargs):
        """ """
        ...
    def headerData(self, *args, **kwargs):
        """ """
        ...
    def index(self, *args, **kwargs):
        """ """
        ...
    def insertColumn(self, *args, **kwargs):
        """ """
        ...
    def insertColumns(self, *args, **kwargs):
        """ """
        ...
    def insertRow(self, *args, **kwargs):
        """ """
        ...
    def insertRows(self, *args, **kwargs):
        """ """
        ...
    def itemData(self, *args, **kwargs):
        """ """
        ...
    def match(self, *args, **kwargs):
        """ """
        ...
    def mimeData(self, *args, **kwargs):
        """ """
        ...
    def mimeTypes(self, *args, **kwargs):
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    def persistentIndexList(self, *args, **kwargs):
        """ """
        ...
    def removeColumn(self, *args, **kwargs):
        """ """
        ...
    def removeColumns(self, *args, **kwargs):
        """ """
        ...
    def removeRow(self, *args, **kwargs):
        """ """
        ...
    def removeRows(self, *args, **kwargs):
        """ """
        ...
    def reset(self, *args, **kwargs):
        """ """
        ...
    def resetInternalData(self, *args, **kwargs):
        """ """
        ...
    def revert(self, *args, **kwargs):
        """ """
        ...
    def roleNames(self, *args, **kwargs):
        """ """
        ...
    def rowCount(self, *args, **kwargs):
        """ """
        ...
    def setData(self, *args, **kwargs):
        """ """
        ...
    def setHeaderData(self, *args, **kwargs):
        """ """
        ...
    def setItemData(self, *args, **kwargs):
        """ """
        ...
    def setRoleNames(self, *args, **kwargs):
        """ """
        ...
    def setSupportedDragActions(self, *args, **kwargs):
        """ """
        ...
    def sibling(self, *args, **kwargs):
        """ """
        ...
    def sort(self, *args, **kwargs):
        """ """
        ...
    def span(self, *args, **kwargs):
        """ """
        ...
    def submit(self, *args, **kwargs):
        """ """
        ...
    def supportedDragActions(self, *args, **kwargs):
        """ """
        ...
    def supportedDropActions(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractListModel(QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def columnCount(self, *args, **kwargs):
        """ """
        ...
    def dropMimeData(self, *args, **kwargs):
        """ """
        ...
    def hasChildren(self, *args, **kwargs):
        """ """
        ...
    def index(self, *args, **kwargs):
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractProxyModel(QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def buddy(self, *args, **kwargs):
        """ """
        ...
    def canFetchMore(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def fetchMore(self, *args, **kwargs):
        """ """
        ...
    def flags(self, *args, **kwargs):
        """ """
        ...
    def hasChildren(self, *args, **kwargs):
        """ """
        ...
    def headerData(self, *args, **kwargs):
        """ """
        ...
    def itemData(self, *args, **kwargs):
        """ """
        ...
    def mapFromSource(self, *args, **kwargs):
        """ """
        ...
    def mapSelectionFromSource(self, *args, **kwargs):
        """ """
        ...
    def mapSelectionToSource(self, *args, **kwargs):
        """ """
        ...
    def mapToSource(self, *args, **kwargs):
        """ """
        ...
    def mimeData(self, *args, **kwargs):
        """ """
        ...
    def mimeTypes(self, *args, **kwargs):
        """ """
        ...
    def revert(self, *args, **kwargs):
        """ """
        ...
    def setData(self, *args, **kwargs):
        """ """
        ...
    def setHeaderData(self, *args, **kwargs):
        """ """
        ...
    def setItemData(self, *args, **kwargs):
        """ """
        ...
    def setSourceModel(self, *args, **kwargs):
        """ """
        ...
    def sort(self, *args, **kwargs):
        """ """
        ...
    def sourceModel(self, *args, **kwargs):
        """ """
        ...
    def span(self, *args, **kwargs):
        """ """
        ...
    def submit(self, *args, **kwargs):
        """ """
        ...
    def supportedDropActions(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractState(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    entered: ...
    """
    Signal
    """

    exited: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def machine(self, *args, **kwargs):
        """ """
        ...
    def onEntry(self, *args, **kwargs):
        """ """
        ...
    def onExit(self, *args, **kwargs):
        """ """
        ...
    def parentState(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractTableModel(QAbstractItemModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def dropMimeData(self, *args, **kwargs):
        """ """
        ...
    def hasChildren(self, *args, **kwargs):
        """ """
        ...
    def index(self, *args, **kwargs):
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractTransition(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """

    triggered: Signal
    """
    Signal
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addAnimation(self, *args, **kwargs):
        """ """
        ...
    def animations(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def eventTest(self, *args, **kwargs):
        """ """
        ...
    def machine(self, *args, **kwargs):
        """ """
        ...
    def onTransition(self, *args, **kwargs):
        """ """
        ...
    def removeAnimation(self, *args, **kwargs):
        """ """
        ...
    def setTargetState(self, *args, **kwargs):
        """ """
        ...
    def setTargetStates(self, *args, **kwargs):
        """ """
        ...
    def sourceState(self, *args, **kwargs):
        """ """
        ...
    def targetState(self, *args, **kwargs):
        """ """
        ...
    def targetStates(self, *args, **kwargs):
        """ """
        ...
    ...

class QAnimationGroup(QAbstractAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addAnimation(self, *args, **kwargs):
        """ """
        ...
    def animationAt(self, *args, **kwargs):
        """ """
        ...
    def animationCount(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def indexOfAnimation(self, *args, **kwargs):
        """ """
        ...
    def insertAnimation(self, *args, **kwargs):
        """ """
        ...
    def removeAnimation(self, *args, **kwargs):
        """ """
        ...
    def takeAnimation(self, *args, **kwargs):
        """ """
        ...
    ...

class QBasicTimer(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def isActive(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def stop(self, *args, **kwargs):
        """ """
        ...
    def timerId(self, *args, **kwargs):
        """ """
        ...
    ...

class QBitArray(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __iand__(self, *args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __invert__(self, *args, **kwargs):
        """
        x.__invert__() <==> ~x
        """
        ...
    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...
    def __ixor__(self, *args, **kwargs):
        """
        x.__ixor__(y) <==> x^=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...
    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...
    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...
    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...
    def at(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def clearBit(self, *args, **kwargs):
        """ """
        ...
    def count(self, *args, **kwargs):
        """ """
        ...
    def fill(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def resize(self, *args, **kwargs):
        """ """
        ...
    def setBit(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def swap(self, *args, **kwargs):
        """ """
        ...
    def testBit(self, *args, **kwargs):
        """ """
        ...
    def toggleBit(self, *args, **kwargs):
        """ """
        ...
    def truncate(self, *args, **kwargs):
        """ """
        ...
    ...

class QBuffer(QIODevice):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def buffer(self, *args, **kwargs):
        """ """
        ...
    def canReadLine(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def connectNotify(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def disconnectNotify(self, *args, **kwargs):
        """ """
        ...
    def open(self, *args, **kwargs):
        """ """
        ...
    def pos(self, *args, **kwargs):
        """ """
        ...
    def readData(self, *args, **kwargs):
        """ """
        ...
    def seek(self, *args, **kwargs):
        """ """
        ...
    def setBuffer(self, *args, **kwargs):
        """ """
        ...
    def setData(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def writeData(self, *args, **kwargs):
        """ """
        ...
    ...

class QByteArray(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def fromBase64(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromHex(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromPercentEncoding(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromRawData(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def number(*args, **kwargs):
        """ """
        ...
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __getslice__(self, *args, **kwargs):
        """
        x.__getslice__(i, j) <==> x[i:j]

        Use of negative indices is not supported.
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...
    def append(self, *args, **kwargs):
        """ """
        ...
    def at(self, *args, **kwargs):
        """ """
        ...
    def capacity(self, *args, **kwargs):
        """ """
        ...
    def chop(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def count(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def endsWith(self, *args, **kwargs):
        """ """
        ...
    def fill(self, *args, **kwargs):
        """ """
        ...
    def indexOf(self, *args, **kwargs):
        """ """
        ...
    def insert(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def isSharedWith(self, *args, **kwargs):
        """ """
        ...
    def lastIndexOf(self, *args, **kwargs):
        """ """
        ...
    def left(self, *args, **kwargs):
        """ """
        ...
    def leftJustified(self, *args, **kwargs):
        """ """
        ...
    def length(self, *args, **kwargs):
        """ """
        ...
    def mid(self, *args, **kwargs):
        """ """
        ...
    def prepend(self, *args, **kwargs):
        """ """
        ...
    def remove(self, *args, **kwargs):
        """ """
        ...
    def repeated(self, *args, **kwargs):
        """ """
        ...
    def replace(self, *args, **kwargs):
        """ """
        ...
    def reserve(self, *args, **kwargs):
        """ """
        ...
    def resize(self, *args, **kwargs):
        """ """
        ...
    def right(self, *args, **kwargs):
        """ """
        ...
    def rightJustified(self, *args, **kwargs):
        """ """
        ...
    def setNum(self, *args, **kwargs):
        """ """
        ...
    def setRawData(self, *args, **kwargs):
        """ """
        ...
    def simplified(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def split(self, *args, **kwargs):
        """ """
        ...
    def squeeze(self, *args, **kwargs):
        """ """
        ...
    def startsWith(self, *args, **kwargs):
        """ """
        ...
    def swap(self, *args, **kwargs):
        """ """
        ...
    def toBase64(self, *args, **kwargs):
        """ """
        ...
    def toDouble(self, *args, **kwargs):
        """ """
        ...
    def toFloat(self, *args, **kwargs):
        """ """
        ...
    def toHex(self, *args, **kwargs):
        """ """
        ...
    def toInt(self, *args, **kwargs):
        """ """
        ...
    def toLong(self, *args, **kwargs):
        """ """
        ...
    def toLongLong(self, *args, **kwargs):
        """ """
        ...
    def toLower(self, *args, **kwargs):
        """ """
        ...
    def toPercentEncoding(self, *args, **kwargs):
        """ """
        ...
    def toShort(self, *args, **kwargs):
        """ """
        ...
    def toUInt(self, *args, **kwargs):
        """ """
        ...
    def toULong(self, *args, **kwargs):
        """ """
        ...
    def toULongLong(self, *args, **kwargs):
        """ """
        ...
    def toUShort(self, *args, **kwargs):
        """ """
        ...
    def toUpper(self, *args, **kwargs):
        """ """
        ...
    def trimmed(self, *args, **kwargs):
        """ """
        ...
    def truncate(self, *args, **kwargs):
        """ """
        ...
    ...

class QByteArrayMatcher(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def indexIn(self, *args, **kwargs):
        """ """
        ...
    def pattern(self, *args, **kwargs):
        """ """
        ...
    def setPattern(self, *args, **kwargs):
        """ """
        ...
    ...

class QChildEvent(QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def added(self, *args, **kwargs):
        """ """
        ...
    def child(self, *args, **kwargs):
        """ """
        ...
    def polished(self, *args, **kwargs):
        """ """
        ...
    def removed(self, *args, **kwargs):
        """ """
        ...
    ...

class QCoreApplication(QObject):
    ApplicationFlags: ... = 17041413
    """
    """

    CodecForTr: ... = QCoreApplication.Encoding.CodecForTr
    """
    """

    DefaultCodec: ... = QCoreApplication.Encoding.DefaultCodec
    """
    """

    Encoding: ...
    """
    <type 'QCoreApplication.Encoding'>
    """

    UnicodeUTF8: ... = QCoreApplication.Encoding.UnicodeUTF8
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToQuit: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """

    unixSignal: ...
    """
    Signal
    """
    @staticmethod
    def addLibraryPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def applicationDirPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def applicationFilePath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def applicationName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def applicationPid(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def applicationVersion(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def arguments(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def closingDown(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def exec_(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def exit(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def flush(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def hasPendingEvents(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def installTranslator(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def instance() -> Optional[QCoreApplication]:
        """ """
        ...
    @staticmethod
    def libraryPaths(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def organizationDomain(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def organizationName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def postEvent(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def processEvents() -> None:
        """ """
        ...
    @staticmethod
    def quit(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def removeLibraryPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def removePostedEvents(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def removeTranslator(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def sendEvent(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def sendPostedEvents(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setApplicationName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setApplicationVersion(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setAttribute(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setLibraryPaths(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setOrganizationDomain(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setOrganizationName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def startingUp(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def testAttribute(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def translate(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def notify(self, obj: QObject, event: QEvent, /) -> None: ...
    def winEventFilter(self, *args, **kwargs):
        """ """
        ...
    ...

class QCryptographicHash(Shiboken.Object):
    Algorithm: ...
    """
    <type 'QCryptographicHash.Algorithm'>
    """

    Md4: ... = QCryptographicHash.Algorithm.Md4
    """
    """

    Md5: ... = QCryptographicHash.Algorithm.Md5
    """
    """

    Sha1: ... = QCryptographicHash.Algorithm.Sha1
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def hash(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addData(self, *args, **kwargs):
        """ """
        ...
    def reset(self, *args, **kwargs):
        """ """
        ...
    def result(self, *args, **kwargs):
        """ """
        ...
    ...

class QDataStream(Shiboken.Object):
    BigEndian: ... = QDataStream.ByteOrder.BigEndian
    """
    """

    ByteOrder: ...
    """
    <type 'QDataStream.ByteOrder'>
    """

    DoublePrecision: ...
    """
    QDataStream.FloatingPointPrecision.Dou...
    """

    FloatingPointPrecision: ...
    """
    <type 'QDataStream.FloatingPoin...
    """

    LittleEndian: ... = QDataStream.ByteOrder.LittleEndian
    """
    """

    Ok: ... = QDataStream.Status.Ok
    """
    """

    Qt_1_0: ... = QDataStream.Version.Qt_1_0
    """
    """

    Qt_2_0: ... = QDataStream.Version.Qt_2_0
    """
    """

    Qt_2_1: ... = QDataStream.Version.Qt_2_1
    """
    """

    Qt_3_0: ... = QDataStream.Version.Qt_3_0
    """
    """

    Qt_3_1: ... = QDataStream.Version.Qt_3_1
    """
    """

    Qt_3_3: ... = QDataStream.Version.Qt_3_3
    """
    """

    Qt_4_0: ... = QDataStream.Version.Qt_4_0
    """
    """

    Qt_4_1: ... = QDataStream.Version.Qt_4_1
    """
    """

    Qt_4_2: ... = QDataStream.Version.Qt_4_2
    """
    """

    Qt_4_3: ... = QDataStream.Version.Qt_4_3
    """
    """

    Qt_4_4: ... = QDataStream.Version.Qt_4_4
    """
    """

    Qt_4_5: ... = QDataStream.Version.Qt_4_5
    """
    """

    Qt_4_6: ... = QDataStream.Version.Qt_4_6
    """
    """

    Qt_4_7: ... = QDataStream.Version.Qt_4_7
    """
    """

    Qt_4_8: ... = QDataStream.Version.Qt_4_8
    """
    """

    ReadCorruptData: ... = QDataStream.Status.ReadCorruptData
    """
    """

    ReadPastEnd: ... = QDataStream.Status.ReadPastEnd
    """
    """

    SinglePrecision: ...
    """
    QDataStream.FloatingPointPrecision.Sin...
    """

    Status: ...
    """
    <type 'QDataStream.Status'>
    """

    Version: ...
    """
    <type 'QDataStream.Version'>
    """

    WriteFailed: ... = QDataStream.Status.WriteFailed
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def byteOrder(self, *args, **kwargs):
        """ """
        ...
    def device(self, *args, **kwargs):
        """ """
        ...
    def floatingPointPrecision(self, *args, **kwargs):
        """ """
        ...
    def readBool(self, *args, **kwargs):
        """ """
        ...
    def readDouble(self, *args, **kwargs):
        """ """
        ...
    def readFloat(self, *args, **kwargs):
        """ """
        ...
    def readInt16(self, *args, **kwargs):
        """ """
        ...
    def readInt32(self, *args, **kwargs):
        """ """
        ...
    def readInt64(self, *args, **kwargs):
        """ """
        ...
    def readInt8(self, *args, **kwargs):
        """ """
        ...
    def readQChar(self, *args, **kwargs):
        """ """
        ...
    def readQString(self, *args, **kwargs):
        """ """
        ...
    def readQStringList(self, *args, **kwargs):
        """ """
        ...
    def readQVariant(self, *args, **kwargs):
        """ """
        ...
    def readRawData(self, *args, **kwargs):
        """ """
        ...
    def readString(self, *args, **kwargs):
        """ """
        ...
    def readUInt16(self, *args, **kwargs):
        """ """
        ...
    def readUInt32(self, *args, **kwargs):
        """ """
        ...
    def readUInt64(self, *args, **kwargs):
        """ """
        ...
    def readUInt8(self, *args, **kwargs):
        """ """
        ...
    def resetStatus(self, *args, **kwargs):
        """ """
        ...
    def setByteOrder(self, *args, **kwargs):
        """ """
        ...
    def setDevice(self, *args, **kwargs):
        """ """
        ...
    def setFloatingPointPrecision(self, *args, **kwargs):
        """ """
        ...
    def setStatus(self, *args, **kwargs):
        """ """
        ...
    def setVersion(self, *args, **kwargs):
        """ """
        ...
    def skipRawData(self, *args, **kwargs):
        """ """
        ...
    def status(self, *args, **kwargs):
        """ """
        ...
    def unsetDevice(self, *args, **kwargs):
        """ """
        ...
    def version(self, *args, **kwargs):
        """ """
        ...
    def writeBool(self, *args, **kwargs):
        """ """
        ...
    def writeDouble(self, *args, **kwargs):
        """ """
        ...
    def writeFloat(self, *args, **kwargs):
        """ """
        ...
    def writeInt16(self, *args, **kwargs):
        """ """
        ...
    def writeInt32(self, *args, **kwargs):
        """ """
        ...
    def writeInt64(self, *args, **kwargs):
        """ """
        ...
    def writeInt8(self, *args, **kwargs):
        """ """
        ...
    def writeQChar(self, *args, **kwargs):
        """ """
        ...
    def writeQString(self, *args, **kwargs):
        """ """
        ...
    def writeQStringList(self, *args, **kwargs):
        """ """
        ...
    def writeQVariant(self, *args, **kwargs):
        """ """
        ...
    def writeRawData(self, *args, **kwargs):
        """ """
        ...
    def writeString(self, *args, **kwargs):
        """ """
        ...
    def writeUInt16(self, *args, **kwargs):
        """ """
        ...
    def writeUInt32(self, *args, **kwargs):
        """ """
        ...
    def writeUInt64(self, *args, **kwargs):
        """ """
        ...
    def writeUInt8(self, *args, **kwargs):
        """ """
        ...
    ...

class QDate(Shiboken.Object):
    DateFormat: ... = QDate.MonthNameType.DateFormat
    """
    """

    MonthNameType: ...
    """
    <type 'QDate.MonthNameType'>
    """

    StandaloneFormat: ... = QDate.MonthNameType.StandaloneFormat
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def currentDate(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromJulianDay(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromString(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def gregorianToJulian(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def isLeapYear(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def isValid(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def longDayName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def longMonthName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def shortDayName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def shortMonthName(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def addDays(self, *args, **kwargs):
        """ """
        ...
    def addMonths(self, *args, **kwargs):
        """ """
        ...
    def addYears(self, *args, **kwargs):
        """ """
        ...
    def day(self, *args, **kwargs):
        """ """
        ...
    def dayOfWeek(self, *args, **kwargs):
        """ """
        ...
    def dayOfYear(self, *args, **kwargs):
        """ """
        ...
    def daysInMonth(self, *args, **kwargs):
        """ """
        ...
    def daysInYear(self, *args, **kwargs):
        """ """
        ...
    def daysTo(self, *args, **kwargs):
        """ """
        ...
    def getDate(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def month(self, *args, **kwargs):
        """ """
        ...
    def setDate(self, *args, **kwargs):
        """ """
        ...
    def setYMD(self, *args, **kwargs):
        """ """
        ...
    def toJulianDay(self, *args, **kwargs):
        """ """
        ...
    def toPython(self, *args, **kwargs):
        """ """
        ...
    def toString(self, *args, **kwargs):
        """ """
        ...
    def weekNumber(self, *args, **kwargs):
        """ """
        ...
    def year(self, *args, **kwargs):
        """ """
        ...
    ...

class QDateTime(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def currentDateTime(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def currentDateTimeUtc(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def currentMSecsSinceEpoch(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromMSecsSinceEpoch(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromString(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromTime_t(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def addDays(self, *args, **kwargs):
        """ """
        ...
    def addMSecs(self, *args, **kwargs):
        """ """
        ...
    def addMonths(self, *args, **kwargs):
        """ """
        ...
    def addSecs(self, *args, **kwargs):
        """ """
        ...
    def addYears(self, *args, **kwargs):
        """ """
        ...
    def date(self, *args, **kwargs):
        """ """
        ...
    def daysTo(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def msecsTo(self, *args, **kwargs):
        """ """
        ...
    def secsTo(self, *args, **kwargs):
        """ """
        ...
    def setDate(self, *args, **kwargs):
        """ """
        ...
    def setMSecsSinceEpoch(self, *args, **kwargs):
        """ """
        ...
    def setTime(self, *args, **kwargs):
        """ """
        ...
    def setTimeSpec(self, *args, **kwargs):
        """ """
        ...
    def setTime_t(self, *args, **kwargs):
        """ """
        ...
    def setUtcOffset(self, *args, **kwargs):
        """ """
        ...
    def time(self, *args, **kwargs):
        """ """
        ...
    def timeSpec(self, *args, **kwargs):
        """ """
        ...
    def toLocalTime(self, *args, **kwargs):
        """ """
        ...
    def toMSecsSinceEpoch(self, *args, **kwargs):
        """ """
        ...
    def toPython(self, *args, **kwargs):
        """ """
        ...
    def toString(self, *args, **kwargs):
        """ """
        ...
    def toTimeSpec(self, *args, **kwargs):
        """ """
        ...
    def toTime_t(self, *args, **kwargs):
        """ """
        ...
    def toUTC(self, *args, **kwargs):
        """ """
        ...
    def utcOffset(self, *args, **kwargs):
        """ """
        ...
    ...

class QDir(Shiboken.Object):
    AccessMask: ... = QDir.Filter.AccessMask
    """
    """

    AllDirs: ... = QDir.Filter.AllDirs
    """
    """

    AllEntries: ... = QDir.Filter.AllEntries
    """
    """

    CaseSensitive: ... = QDir.Filter.CaseSensitive
    """
    """

    Dirs: ... = QDir.Filter.Dirs
    """
    """

    DirsFirst: ... = QDir.SortFlag.DirsFirst
    """
    """

    DirsLast: ... = QDir.SortFlag.DirsLast
    """
    """

    Drives: ... = QDir.Filter.Drives
    """
    """

    Executable: ... = QDir.Filter.Executable
    """
    """

    Files: ... = QDir.Filter.Files
    """
    """

    Filter: ...
    """
    <type 'QDir.Filter'>
    """

    Filters: ...
    """
    <type 'Filters'>
    """

    Hidden: ... = QDir.Filter.Hidden
    """
    """

    IgnoreCase: ... = QDir.SortFlag.IgnoreCase
    """
    """

    LocaleAware: ... = QDir.SortFlag.LocaleAware
    """
    """

    Modified: ... = QDir.Filter.Modified
    """
    """

    Name: ... = QDir.SortFlag.Name
    """
    """

    NoDot: ... = QDir.Filter.NoDot
    """
    """

    NoDotAndDotDot: ... = QDir.Filter.NoDotAndDotDot
    """
    """

    NoDotDot: ... = QDir.Filter.NoDotDot
    """
    """

    NoFilter: ... = QDir.Filter.NoFilter
    """
    """

    NoSort: ... = QDir.SortFlag.NoSort
    """
    """

    NoSymLinks: ... = QDir.Filter.NoSymLinks
    """
    """

    PermissionMask: ... = QDir.Filter.PermissionMask
    """
    """

    Readable: ... = QDir.Filter.Readable
    """
    """

    Reversed: ... = QDir.SortFlag.Reversed
    """
    """

    Size: ... = QDir.SortFlag.Size
    """
    """

    SortByMask: ... = QDir.SortFlag.SortByMask
    """
    """

    SortFlag: ...
    """
    <type 'QDir.SortFlag'>
    """

    SortFlags: ...
    """
    <type 'SortFlags'>
    """

    System: ... = QDir.Filter.System
    """
    """

    Time: ... = QDir.SortFlag.Time
    """
    """

    Type: ... = QDir.SortFlag.Type
    """
    """

    TypeMask: ... = QDir.Filter.TypeMask
    """
    """

    Unsorted: ... = QDir.SortFlag.Unsorted
    """
    """

    Writable: ... = QDir.Filter.Writable
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def addResourceSearchPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def addSearchPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def cleanPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def convertSeparators(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def current(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def currentPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def drives(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromNativeSeparators(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def home(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def homePath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def isAbsolutePath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def isRelativePath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def match(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def nameFiltersFromString(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def root(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def rootPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def searchPaths(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def separator(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setCurrent(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setSearchPaths(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def temp(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def tempPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def toNativeSeparators(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def absoluteFilePath(self, *args, **kwargs):
        """ """
        ...
    def absolutePath(self, *args, **kwargs):
        """ """
        ...
    def canonicalPath(self, *args, **kwargs):
        """ """
        ...
    def cd(self, *args, **kwargs):
        """ """
        ...
    def cdUp(self, *args, **kwargs):
        """ """
        ...
    def count(self, *args, **kwargs):
        """ """
        ...
    def dirName(self, *args, **kwargs):
        """ """
        ...
    def entryInfoList(self, *args, **kwargs):
        """ """
        ...
    def entryList(self, *args, **kwargs):
        """ """
        ...
    def exists(self, *args, **kwargs):
        """ """
        ...
    def filePath(self, *args, **kwargs):
        """ """
        ...
    def filter(self, *args, **kwargs):
        """ """
        ...
    def isAbsolute(self, *args, **kwargs):
        """ """
        ...
    def isReadable(self, *args, **kwargs):
        """ """
        ...
    def isRelative(self, *args, **kwargs):
        """ """
        ...
    def isRoot(self, *args, **kwargs):
        """ """
        ...
    def makeAbsolute(self, *args, **kwargs):
        """ """
        ...
    def mkdir(self, *args, **kwargs):
        """ """
        ...
    def mkpath(self, *args, **kwargs):
        """ """
        ...
    def nameFilters(self, *args, **kwargs):
        """ """
        ...
    def path(self, *args, **kwargs):
        """ """
        ...
    def refresh(self, *args, **kwargs):
        """ """
        ...
    def relativeFilePath(self, *args, **kwargs):
        """ """
        ...
    def remove(self, *args, **kwargs):
        """ """
        ...
    def rename(self, *args, **kwargs):
        """ """
        ...
    def rmdir(self, *args, **kwargs):
        """ """
        ...
    def rmpath(self, *args, **kwargs):
        """ """
        ...
    def setFilter(self, *args, **kwargs):
        """ """
        ...
    def setNameFilters(self, *args, **kwargs):
        """ """
        ...
    def setPath(self, *args, **kwargs):
        """ """
        ...
    def setSorting(self, *args, **kwargs):
        """ """
        ...
    def sorting(self, *args, **kwargs):
        """ """
        ...
    ...

class QDirIterator(Shiboken.Object):
    FollowSymlinks: ...
    """
    QDirIterator.IteratorFlag.FollowSymlink...
    """

    IteratorFlag: ...
    """
    <type 'QDirIterator.IteratorFlag'>
    """

    IteratorFlags: ...
    """
    <type 'IteratorFlags'>
    """

    NoIteratorFlags: ...
    """
    QDirIterator.IteratorFlag.NoIteratorFl...
    """

    Subdirectories: ...
    """
    QDirIterator.IteratorFlag.Subdirectorie...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def fileInfo(self, *args, **kwargs):
        """ """
        ...
    def fileName(self, *args, **kwargs):
        """ """
        ...
    def filePath(self, *args, **kwargs):
        """ """
        ...
    def hasNext(self, *args, **kwargs):
        """ """
        ...
    def next(self, *args, **kwargs):
        """ """
        ...
    def path(self, *args, **kwargs):
        """ """
        ...
    ...

class QDynamicPropertyChangeEvent(QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def propertyName(self, *args, **kwargs):
        """ """
        ...
    ...

class QEasingCurve(Shiboken.Object):
    CosineCurve: ... = QEasingCurve.Type.CosineCurve
    """
    """

    Custom: ... = QEasingCurve.Type.Custom
    """
    """

    InBack: ... = QEasingCurve.Type.InBack
    """
    """

    InBounce: ... = QEasingCurve.Type.InBounce
    """
    """

    InCirc: ... = QEasingCurve.Type.InCirc
    """
    """

    InCubic: ... = QEasingCurve.Type.InCubic
    """
    """

    InCurve: ... = QEasingCurve.Type.InCurve
    """
    """

    InElastic: ... = QEasingCurve.Type.InElastic
    """
    """

    InExpo: ... = QEasingCurve.Type.InExpo
    """
    """

    InOutBack: ... = QEasingCurve.Type.InOutBack
    """
    """

    InOutBounce: ... = QEasingCurve.Type.InOutBounce
    """
    """

    InOutCirc: ... = QEasingCurve.Type.InOutCirc
    """
    """

    InOutCubic: ... = QEasingCurve.Type.InOutCubic
    """
    """

    InOutElastic: ... = QEasingCurve.Type.InOutElastic
    """
    """

    InOutExpo: ... = QEasingCurve.Type.InOutExpo
    """
    """

    InOutQuad: ... = QEasingCurve.Type.InOutQuad
    """
    """

    InOutQuart: ... = QEasingCurve.Type.InOutQuart
    """
    """

    InOutQuint: ... = QEasingCurve.Type.InOutQuint
    """
    """

    InOutSine: ... = QEasingCurve.Type.InOutSine
    """
    """

    InQuad: ... = QEasingCurve.Type.InQuad
    """
    """

    InQuart: ... = QEasingCurve.Type.InQuart
    """
    """

    InQuint: ... = QEasingCurve.Type.InQuint
    """
    """

    InSine: ... = QEasingCurve.Type.InSine
    """
    """

    Linear: ... = QEasingCurve.Type.Linear
    """
    """

    NCurveTypes: ... = QEasingCurve.Type.NCurveTypes
    """
    """

    OutBack: ... = QEasingCurve.Type.OutBack
    """
    """

    OutBounce: ... = QEasingCurve.Type.OutBounce
    """
    """

    OutCirc: ... = QEasingCurve.Type.OutCirc
    """
    """

    OutCubic: ... = QEasingCurve.Type.OutCubic
    """
    """

    OutCurve: ... = QEasingCurve.Type.OutCurve
    """
    """

    OutElastic: ... = QEasingCurve.Type.OutElastic
    """
    """

    OutExpo: ... = QEasingCurve.Type.OutExpo
    """
    """

    OutInBack: ... = QEasingCurve.Type.OutInBack
    """
    """

    OutInBounce: ... = QEasingCurve.Type.OutInBounce
    """
    """

    OutInCirc: ... = QEasingCurve.Type.OutInCirc
    """
    """

    OutInCubic: ... = QEasingCurve.Type.OutInCubic
    """
    """

    OutInElastic: ... = QEasingCurve.Type.OutInElastic
    """
    """

    OutInExpo: ... = QEasingCurve.Type.OutInExpo
    """
    """

    OutInQuad: ... = QEasingCurve.Type.OutInQuad
    """
    """

    OutInQuart: ... = QEasingCurve.Type.OutInQuart
    """
    """

    OutInQuint: ... = QEasingCurve.Type.OutInQuint
    """
    """

    OutInSine: ... = QEasingCurve.Type.OutInSine
    """
    """

    OutQuad: ... = QEasingCurve.Type.OutQuad
    """
    """

    OutQuart: ... = QEasingCurve.Type.OutQuart
    """
    """

    OutQuint: ... = QEasingCurve.Type.OutQuint
    """
    """

    OutSine: ... = QEasingCurve.Type.OutSine
    """
    """

    SineCurve: ... = QEasingCurve.Type.SineCurve
    """
    """

    Type: ...
    """
    <type 'QEasingCurve.Type'>
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def amplitude(self, *args, **kwargs):
        """ """
        ...
    def customType(self, *args, **kwargs):
        """ """
        ...
    def overshoot(self, *args, **kwargs):
        """ """
        ...
    def period(self, *args, **kwargs):
        """ """
        ...
    def setAmplitude(self, *args, **kwargs):
        """ """
        ...
    def setCustomType(self, *args, **kwargs):
        """ """
        ...
    def setOvershoot(self, *args, **kwargs):
        """ """
        ...
    def setPeriod(self, *args, **kwargs):
        """ """
        ...
    def setType(self, *args, **kwargs):
        """ """
        ...
    def type(self, *args, **kwargs):
        """ """
        ...
    def valueForProgress(self, *args, **kwargs):
        """ """
        ...
    ...

class QElapsedTimer(Shiboken.Object):
    ClockType: ...
    """
    <type 'QElapsedTimer.ClockType'>
    """

    MachAbsoluteTime: ...
    """
    QElapsedTimer.ClockType.MachAbsoluteT...
    """

    MonotonicClock: ... = QElapsedTimer.ClockType.MonotonicClock
    """
    """

    PerformanceCounter: ...
    """
    QElapsedTimer.ClockType.Performance...
    """

    SystemTime: ... = QElapsedTimer.ClockType.SystemTime
    """
    """

    TickCounter: ... = QElapsedTimer.ClockType.TickCounter
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def clockType(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def isMonotonic(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def elapsed(self, *args, **kwargs):
        """ """
        ...
    def hasExpired(self, *args, **kwargs):
        """ """
        ...
    def invalidate(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def msecsSinceReference(self, *args, **kwargs):
        """ """
        ...
    def msecsTo(self, *args, **kwargs):
        """ """
        ...
    def nsecsElapsed(self, *args, **kwargs):
        """ """
        ...
    def restart(self, *args, **kwargs):
        """ """
        ...
    def secsTo(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    ...

class QEvent(Shiboken.Object):
    AcceptDropsChange: QEvent.Type
    """
    """

    AccessibilityDescription: ...
    """
    QEvent.Type.AccessibilityDesc...
    """

    AccessibilityHelp: QEvent.Type
    """
    """

    AccessibilityPrepare: QEvent.Type
    """
    """

    ActionAdded: QEvent.Type
    """
    """

    ActionChanged: QEvent.Type
    """
    """

    ActionRemoved: QEvent.Type
    """
    """

    ActivateControl: QEvent.Type
    """
    """

    ActivationChange: QEvent.Type
    """
    """

    ApplicationActivate: QEvent.Type
    """
    """

    ApplicationActivated: QEvent.Type
    """
    """

    ApplicationDeactivate: ...
    """
    QEvent.Type.ApplicationDeactivat...
    """

    ApplicationDeactivated: ...
    """
    QEvent.Type.ApplicationDeactiva...
    """

    ApplicationFontChange: ...
    """
    QEvent.Type.ApplicationFontChang...
    """

    ApplicationLayoutDirectionChange: ...
    """
    QEvent.Type.Applicati...
    """

    ApplicationPaletteChange: ...
    """
    QEvent.Type.ApplicationPalett...
    """

    ApplicationWindowIconChange: ...
    """
    QEvent.Type.ApplicationWin...
    """

    ChildAdded: QEvent.Type
    """
    """

    ChildPolished: QEvent.Type
    """
    """

    ChildRemoved: QEvent.Type
    """
    """

    Clipboard: QEvent.Type
    """
    """

    Close: QEvent.Type
    """
    """

    CloseSoftwareInputPanel: ...
    """
    QEvent.Type.CloseSoftwareInput...
    """

    ContentsRectChange: QEvent.Type
    """
    """

    ContextMenu: QEvent.Type
    """
    """

    Create: QEvent.Type
    """
    """

    CursorChange: QEvent.Type
    """
    """

    DeactivateControl: QEvent.Type
    """
    """

    DeferredDelete: QEvent.Type
    """
    """

    Destroy: QEvent.Type
    """
    """

    DragEnter: QEvent.Type
    """
    """

    DragLeave: QEvent.Type
    """
    """

    DragMove: QEvent.Type
    """
    """

    DragResponse: QEvent.Type
    """
    """

    Drop: QEvent.Type
    """
    """

    DynamicPropertyChange: ...
    """
    QEvent.Type.DynamicPropertyChang...
    """

    EmbeddingControl: QEvent.Type
    """
    """

    EnabledChange: QEvent.Type
    """
    """

    Enter: QEvent.Type
    """
    """

    EnterWhatsThisMode: QEvent.Type
    """
    """

    FileOpen: QEvent.Type
    """
    """

    FocusIn: QEvent.Type
    """
    """

    FocusOut: QEvent.Type
    """
    """

    FontChange: QEvent.Type
    """
    """

    FutureCallOut: QEvent.Type
    """
    """

    Gesture: QEvent.Type
    """
    """

    GestureOverride: QEvent.Type
    """
    """

    GrabKeyboard: QEvent.Type
    """
    """

    GrabMouse: QEvent.Type
    """
    """

    GraphicsSceneContextMenu: ...
    """
    QEvent.Type.GraphicsSceneCont...
    """

    GraphicsSceneDragEnter: ...
    """
    QEvent.Type.GraphicsSceneDragEn...
    """

    GraphicsSceneDragLeave: ...
    """
    QEvent.Type.GraphicsSceneDragLe...
    """

    GraphicsSceneDragMove: ...
    """
    QEvent.Type.GraphicsSceneDragMov...
    """

    GraphicsSceneDrop: QEvent.Type
    """
    """

    GraphicsSceneHelp: QEvent.Type
    """
    """

    GraphicsSceneHoverEnter: ...
    """
    QEvent.Type.GraphicsSceneHover...
    """

    GraphicsSceneHoverLeave: ...
    """
    QEvent.Type.GraphicsSceneHover...
    """

    GraphicsSceneHoverMove: ...
    """
    QEvent.Type.GraphicsSceneHoverM...
    """

    GraphicsSceneMouseDoubleClick: ...
    """
    QEvent.Type.GraphicsScen...
    """

    GraphicsSceneMouseMove: ...
    """
    QEvent.Type.GraphicsSceneMouseM...
    """

    GraphicsSceneMousePress: ...
    """
    QEvent.Type.GraphicsSceneMouse...
    """

    GraphicsSceneMouseRelease: ...
    """
    QEvent.Type.GraphicsSceneMou...
    """

    GraphicsSceneMove: ... = QEvent.Type
    """
    """

    GraphicsSceneResize: ... = QEvent.Type
    """
    """

    GraphicsSceneWheel: ... = QEvent.Type
    """
    """

    HelpRequest: ... = QEvent.Type
    """
    """

    Hide: ... = QEvent.Type
    """
    """

    HideToParent: ... = QEvent.Type
    """
    """

    HoverEnter: ... = QEvent.Type
    """
    """

    HoverLeave: ... = QEvent.Type
    """
    """

    HoverMove: ... = QEvent.Type
    """
    """

    IconDrag: ... = QEvent.Type
    """
    """

    IconStrChange: ... = QEvent.Type
    """
    """

    InputMethod: ... = QEvent.Type
    """
    """

    KeyPress: QEvent.Type
    """
    """

    KeyRelease: QEvent.Type
    """
    """

    KeyboardLayoutChange: QEvent.Type
    """
    """

    LanguageChange: QEvent.Type
    """
    """

    LayoutDirectionChange: QEvent.Type

    LayoutRequest: QEvent.Type
    """
    """

    Leave: QEvent.Type
    """
    """

    LeaveWhatsThisMode: QEvent.Type
    """
    """

    LocaleChange: QEvent.Type
    """
    """

    MacGLClearDrawable: QEvent.Type
    """
    """

    MacGLWindowChange: QEvent.Type
    """
    """

    MacSizeChange: QEvent.Type
    """
    """

    MaxUser: QEvent.Type
    """
    """

    MenubarUpdated: QEvent.Type
    """
    """

    MetaCall: QEvent.Type
    """
    """

    ModifiedChange: QEvent.Type
    """
    """

    MouseButtonDblClick: QEvent.Type
    """
    """

    MouseButtonPress: QEvent.Type
    """
    """

    MouseButtonRelease: QEvent.Type
    """
    """

    MouseMove: QEvent.Type
    """
    """

    MouseTrackingChange: QEvent.Type
    """
    """

    Move: QEvent.Type
    """
    """

    NativeGesture: QEvent.Type
    """
    """

    NetworkReplyUpdated: QEvent.Type
    """
    """

    NonClientAreaMouseButtonDblClick: ...
    """
    QEvent.Type.NonClient...
    """

    NonClientAreaMouseButtonPress: ...
    """
    QEvent.Type.NonClientAre...
    """

    NonClientAreaMouseButtonRelease: ...
    """
    QEvent.Type.NonClientA...
    """

    NonClientAreaMouseMove: ...
    """
    QEvent.Type.NonClientAreaMouseM...
    """

    # None : QEvent.Type
    """
    """

    OkRequest: QEvent.Type
    """
    """

    Paint: QEvent.Type
    """
    """

    PaletteChange: QEvent.Type
    """
    """

    ParentAboutToChange: QEvent.Type
    """
    """

    ParentChange: QEvent.Type
    """
    """

    PlatformPanel: QEvent.Type
    """
    """

    Polish: QEvent.Type
    """
    """

    PolishRequest: QEvent.Type
    """
    """

    QueryWhatsThis: QEvent.Type
    """
    """

    Quit: QEvent.Type
    """
    """

    RequestSoftwareInputPanel: ...
    """
    QEvent.Type.RequestSoftwareI...
    """

    Resize: QEvent.Type
    """
    """

    Shortcut: QEvent.Type
    """
    """

    ShortcutOverride: QEvent.Type
    """
    """

    Show: QEvent.Type
    """
    """

    ShowToParent: QEvent.Type
    """
    """

    ShowWindowRequest: QEvent.Type
    """
    """

    SockAct: QEvent.Type
    """
    """

    Speech: QEvent.Type
    """
    """

    StateMachineSignal: QEvent.Type
    """
    """

    StateMachineWrapped: QEvent.Type
    """
    """

    StatusTip: QEvent.Type
    """
    """

    Style: QEvent.Type
    """
    """

    StyleChange: QEvent.Type
    """
    """

    TabletEnterProximity: QEvent.Type
    """
    """

    TabletLeaveProximity: QEvent.Type
    """
    """

    TabletMove: QEvent.Type
    """
    """

    TabletPress: QEvent.Type
    """
    """

    TabletRelease: QEvent.Type
    """
    """

    ThreadChange: QEvent.Type
    """
    """

    Timer: QEvent.Type
    """
    """

    ToolBarChange: QEvent.Type
    """
    """

    ToolTip: QEvent.Type
    """
    """

    ToolTipChange: QEvent.Type
    """
    """

    TouchBegin: QEvent.Type
    """
    """

    TouchEnd: QEvent.Type
    """
    """

    TouchUpdate: QEvent.Type
    """
    """

    class Type:
        """
        <type 'QEvent.Type'>
        """

    UngrabKeyboard: QEvent.Type
    """
    """

    UngrabMouse: QEvent.Type
    """
    """

    UpdateLater: QEvent.Type
    """
    """

    UpdateRequest: QEvent.Type
    """
    """

    UpdateSoftKeys: QEvent.Type
    """
    """

    User: QEvent.Type
    """
    """

    WhatsThis: QEvent.Type
    """
    """

    WhatsThisClicked: QEvent.Type
    """
    """

    Wheel: QEvent.Type
    """
    """

    WinEventAct: QEvent.Type
    """
    """

    WinIdChange: QEvent.Type
    """
    """

    WindowActivate: QEvent.Type
    """
    """

    WindowBlocked: QEvent.Type
    """
    """

    WindowDeactivate: QEvent.Type
    """
    """

    WindowIconChange: QEvent.Type
    """
    """

    WindowStateChange: QEvent.Type
    """
    """

    WindowTitleChange: QEvent.Type
    """
    """

    WindowUnblocked: QEvent.Type
    """
    """

    ZOrderChange: QEvent.Type
    """
    """

    ZeroTimerEvent: QEvent.Type
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def registerEventType(*args: Any, **kwargs: Any) -> QEvent.Type: ...
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def accept(self, *args, **kwargs):
        """ """
        ...
    def ignore(self, *args, **kwargs):
        """ """
        ...
    def isAccepted(self, *args, **kwargs):
        """ """
        ...
    def setAccepted(self, *args, **kwargs):
        """ """
        ...
    def spontaneous(self, *args, **kwargs):
        """ """
        ...
    def type(self) -> QEvent.Type: ...
    ...

class QEventLoop(QObject):
    AllEvents: ... = QEventLoop.ProcessEventsFlag.AllEvents
    """
    """

    DeferredDeletion: ...
    """
    QEventLoop.ProcessEventsFlag.Deferred...
    """

    DialogExec: ... = QEventLoop.ProcessEventsFlag.DialogExec
    """
    """

    EventLoopExec: ...
    """
    QEventLoop.ProcessEventsFlag.EventLoopEx...
    """

    ExcludeSocketNotifiers: ...
    """
    QEventLoop.ProcessEventsFlag.Ex...
    """

    ExcludeUserInputEvents: ...
    """
    QEventLoop.ProcessEventsFlag.Ex...
    """

    ProcessEventsFlag: ...
    """
    <type 'QEventLoop.ProcessEventsFlag'...
    """

    ProcessEventsFlags: ...
    """
    <type 'ProcessEventsFlags'>
    """

    WaitForMoreEvents: ...
    """
    QEventLoop.ProcessEventsFlag.WaitFor...
    """

    X11ExcludeTimers: ...
    """
    QEventLoop.ProcessEventsFlag.X11Exclu...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def exec_(self, *args, **kwargs):
        """ """
        ...
    def exit(self, *args, **kwargs):
        """ """
        ...
    def isRunning(self, *args, **kwargs):
        """ """
        ...
    def processEvents(self, *args, **kwargs):
        """ """
        ...
    def quit(self, *args, **kwargs):
        """ """
        ...
    def wakeUp(self, *args, **kwargs):
        """ """
        ...
    ...

class QEventTransition(QAbstractTransition):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def eventSource(self, *args, **kwargs):
        """ """
        ...
    def eventTest(self, *args, **kwargs):
        """ """
        ...
    def eventType(self, *args, **kwargs):
        """ """
        ...
    def onTransition(self, *args, **kwargs):
        """ """
        ...
    def setEventSource(self, *args, **kwargs):
        """ """
        ...
    def setEventType(self, *args, **kwargs):
        """ """
        ...
    ...

class QFile(QIODevice):
    AbortError: ... = QFile.FileError.AbortError
    """
    """

    AutoCloseHandle: ... = QFile.FileHandleFlag.AutoCloseHandle
    """
    """

    CopyError: ... = QFile.FileError.CopyError
    """
    """

    DontCloseHandle: ... = QFile.FileHandleFlag.DontCloseHandle
    """
    """

    ExeGroup: ... = QFile.Permission.ExeGroup
    """
    """

    ExeOther: ... = QFile.Permission.ExeOther
    """
    """

    ExeOwner: ... = QFile.Permission.ExeOwner
    """
    """

    ExeUser: ... = QFile.Permission.ExeUser
    """
    """

    FatalError: ... = QFile.FileError.FatalError
    """
    """

    FileError: ...
    """
    <type 'QFile.FileError'>
    """

    FileHandleFlag: ...
    """
    <type 'QFile.FileHandleFlag'>
    """

    FileHandleFlags: ...
    """
    <type 'FileHandleFlags'>
    """

    MemoryMapFlags: ...
    """
    <type 'QFile.MemoryMapFlags'>
    """

    NoError: ... = QFile.FileError.NoError
    """
    """

    NoOptions: ... = QFile.MemoryMapFlags.NoOptions
    """
    """

    OpenError: ... = QFile.FileError.OpenError
    """
    """

    Permission: ...
    """
    <type 'QFile.Permission'>
    """

    Permissions: ...
    """
    <type 'Permissions'>
    """

    PermissionsError: ... = QFile.FileError.PermissionsError
    """
    """

    PositionError: ... = QFile.FileError.PositionError
    """
    """

    ReadError: ... = QFile.FileError.ReadError
    """
    """

    ReadGroup: ... = QFile.Permission.ReadGroup
    """
    """

    ReadOther: ... = QFile.Permission.ReadOther
    """
    """

    ReadOwner: ... = QFile.Permission.ReadOwner
    """
    """

    ReadUser: ... = QFile.Permission.ReadUser
    """
    """

    RemoveError: ... = QFile.FileError.RemoveError
    """
    """

    RenameError: ... = QFile.FileError.RenameError
    """
    """

    ResizeError: ... = QFile.FileError.ResizeError
    """
    """

    ResourceError: ... = QFile.FileError.ResourceError
    """
    """

    TimeOutError: ... = QFile.FileError.TimeOutError
    """
    """

    UnspecifiedError: ... = QFile.FileError.UnspecifiedError
    """
    """

    WriteError: ... = QFile.FileError.WriteError
    """
    """

    WriteGroup: ... = QFile.Permission.WriteGroup
    """
    """

    WriteOther: ... = QFile.Permission.WriteOther
    """
    """

    WriteOwner: ... = QFile.Permission.WriteOwner
    """
    """

    WriteUser: ... = QFile.Permission.WriteUser
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def copy(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def decodeName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def encodeName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def exists(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def link(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def permissions(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def readLink(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def remove(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def rename(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def resize(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setPermissions(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def symLinkTarget(*args, **kwargs):
        """ """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def error(self, *args, **kwargs):
        """ """
        ...
    def fileEngine(self, *args, **kwargs):
        """ """
        ...
    def fileName(self, *args, **kwargs):
        """ """
        ...
    def flush(self, *args, **kwargs):
        """ """
        ...
    def handle(self, *args, **kwargs):
        """ """
        ...
    def isSequential(self, *args, **kwargs):
        """ """
        ...
    def map(self, *args, **kwargs):
        """ """
        ...
    def open(self, *args, **kwargs):
        """ """
        ...
    def pos(self, *args, **kwargs):
        """ """
        ...
    def readData(self, *args, **kwargs):
        """ """
        ...
    def readLineData(self, *args, **kwargs):
        """ """
        ...
    def seek(self, *args, **kwargs):
        """ """
        ...
    def setFileName(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def unmap(self, *args, **kwargs):
        """ """
        ...
    def unsetError(self, *args, **kwargs):
        """ """
        ...
    def writeData(self, *args, **kwargs):
        """ """
        ...
    ...

class QFileInfo(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def absoluteDir(self, *args, **kwargs):
        """ """
        ...
    def absoluteFilePath(self, *args, **kwargs):
        """ """
        ...
    def absolutePath(self, *args, **kwargs):
        """ """
        ...
    def baseName(self, *args, **kwargs):
        """ """
        ...
    def bundleName(self, *args, **kwargs):
        """ """
        ...
    def caching(self, *args, **kwargs):
        """ """
        ...
    def canonicalFilePath(self, *args, **kwargs):
        """ """
        ...
    def canonicalPath(self, *args, **kwargs):
        """ """
        ...
    def completeBaseName(self, *args, **kwargs):
        """ """
        ...
    def completeSuffix(self, *args, **kwargs):
        """ """
        ...
    def created(self, *args, **kwargs):
        """ """
        ...
    def dir(self, *args, **kwargs):
        """ """
        ...
    def exists(self, *args, **kwargs):
        """ """
        ...
    def fileName(self, *args, **kwargs):
        """ """
        ...
    def filePath(self, *args, **kwargs):
        """ """
        ...
    def group(self, *args, **kwargs):
        """ """
        ...
    def groupId(self, *args, **kwargs):
        """ """
        ...
    def isAbsolute(self, *args, **kwargs):
        """ """
        ...
    def isBundle(self, *args, **kwargs):
        """ """
        ...
    def isDir(self, *args, **kwargs):
        """ """
        ...
    def isExecutable(self, *args, **kwargs):
        """ """
        ...
    def isFile(self, *args, **kwargs):
        """ """
        ...
    def isHidden(self, *args, **kwargs):
        """ """
        ...
    def isReadable(self, *args, **kwargs):
        """ """
        ...
    def isRelative(self, *args, **kwargs):
        """ """
        ...
    def isRoot(self, *args, **kwargs):
        """ """
        ...
    def isSymLink(self, *args, **kwargs):
        """ """
        ...
    def isWritable(self, *args, **kwargs):
        """ """
        ...
    def lastModified(self, *args, **kwargs):
        """ """
        ...
    def lastRead(self, *args, **kwargs):
        """ """
        ...
    def makeAbsolute(self, *args, **kwargs):
        """ """
        ...
    def owner(self, *args, **kwargs):
        """ """
        ...
    def ownerId(self, *args, **kwargs):
        """ """
        ...
    def path(self, *args, **kwargs):
        """ """
        ...
    def permission(self, *args, **kwargs):
        """ """
        ...
    def permissions(self, *args, **kwargs):
        """ """
        ...
    def readLink(self, *args, **kwargs):
        """ """
        ...
    def refresh(self, *args, **kwargs):
        """ """
        ...
    def setCaching(self, *args, **kwargs):
        """ """
        ...
    def setFile(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def suffix(self, *args, **kwargs):
        """ """
        ...
    def symLinkTarget(self, *args, **kwargs):
        """ """
        ...
    ...

class QFileSystemWatcher(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    directoryChanged: ...
    """
    Signal
    """

    fileChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addPath(self, *args, **kwargs):
        """ """
        ...
    def addPaths(self, *args, **kwargs):
        """ """
        ...
    def directories(self, *args, **kwargs):
        """ """
        ...
    def files(self, *args, **kwargs):
        """ """
        ...
    def removePath(self, *args, **kwargs):
        """ """
        ...
    def removePaths(self, *args, **kwargs):
        """ """
        ...
    ...

class QFinalState(QAbstractState):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def onEntry(self, *args, **kwargs):
        """ """
        ...
    def onExit(self, *args, **kwargs):
        """ """
        ...
    ...

class QGenericArgument(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    ...

class QGenericReturnArgument(QGenericArgument):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    ...

class QHistoryState(QAbstractState):
    DeepHistory: ... = QHistoryState.HistoryType.DeepHistory
    """
    """

    HistoryType: ...
    """
    <type 'QHistoryState.HistoryType'>
    """

    ShallowHistory: ...
    """
    QHistoryState.HistoryType.ShallowHistor...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def defaultState(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def historyType(self, *args, **kwargs):
        """ """
        ...
    def onEntry(self, *args, **kwargs):
        """ """
        ...
    def onExit(self, *args, **kwargs):
        """ """
        ...
    def setDefaultState(self, *args, **kwargs):
        """ """
        ...
    def setHistoryType(self, *args, **kwargs):
        """ """
        ...
    ...

class QIODevice(QObject):
    Append: ... = QIODevice.OpenModeFlag.Append
    """
    """

    NotOpen: ... = QIODevice.OpenModeFlag.NotOpen
    """
    """

    OpenMode: ...
    """
    <type 'OpenMode'>
    """

    OpenModeFlag: ...
    """
    <type 'QIODevice.OpenModeFlag'>
    """

    ReadOnly: ... = QIODevice.OpenModeFlag.ReadOnly
    """
    """

    ReadWrite: ... = QIODevice.OpenModeFlag.ReadWrite
    """
    """

    Str: ... = QIODevice.OpenModeFlag.Str
    """
    """

    Truncate: ... = QIODevice.OpenModeFlag.Truncate
    """
    """

    Unbuffered: ... = QIODevice.OpenModeFlag.Unbuffered
    """
    """

    WriteOnly: ... = QIODevice.OpenModeFlag.WriteOnly
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    aboutToClose: ...
    """
    Signal
    """

    bytesWritten: ...
    """
    Signal
    """

    readChannelFinished: ...
    """
    Signal
    """

    readyRead: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def bytesAvailable(self, *args, **kwargs):
        """ """
        ...
    def bytesToWrite(self, *args, **kwargs):
        """ """
        ...
    def canReadLine(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def getChar(self, *args, **kwargs):
        """ """
        ...
    def isOpen(self, *args, **kwargs):
        """ """
        ...
    def isReadable(self, *args, **kwargs):
        """ """
        ...
    def isSequential(self, *args, **kwargs):
        """ """
        ...
    def isStrModeEnabled(self, *args, **kwargs):
        """ """
        ...
    def isWritable(self, *args, **kwargs):
        """ """
        ...
    def open(self, *args, **kwargs):
        """ """
        ...
    def openMode(self, *args, **kwargs):
        """ """
        ...
    def peek(self, *args, **kwargs):
        """ """
        ...
    def pos(self, *args, **kwargs):
        """ """
        ...
    def putChar(self, *args, **kwargs):
        """ """
        ...
    def read(self, *args, **kwargs):
        """ """
        ...
    def readAll(self, *args, **kwargs):
        """ """
        ...
    def readData(self, *args, **kwargs):
        """ """
        ...
    def readLine(self, *args, **kwargs):
        """ """
        ...
    def readLineData(self, *args, **kwargs):
        """ """
        ...
    def reset(self, *args, **kwargs):
        """ """
        ...
    def seek(self, *args, **kwargs):
        """ """
        ...
    def setErrorString(self, *args, **kwargs):
        """ """
        ...
    def setOpenMode(self, *args, **kwargs):
        """ """
        ...
    def setStrModeEnabled(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def ungetChar(self, *args, **kwargs):
        """ """
        ...
    def waitForBytesWritten(self, *args, **kwargs):
        """ """
        ...
    def waitForReadyRead(self, *args, **kwargs):
        """ """
        ...
    def write(self, *args, **kwargs):
        """ """
        ...
    def writeData(self, *args, **kwargs):
        """ """
        ...
    ...

class QItemSelection(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def fromSet(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromVector(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def split(*args, **kwargs):
        """ """
        ...
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def append(self, *args, **kwargs):
        """ """
        ...
    def at(self, *args, **kwargs):
        """ """
        ...
    def back(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def count(self, *args, **kwargs):
        """ """
        ...
    def detachShared(self, *args, **kwargs):
        """ """
        ...
    def empty(self, *args, **kwargs):
        """ """
        ...
    def endsWith(self, *args, **kwargs):
        """ """
        ...
    def first(self, *args, **kwargs):
        """ """
        ...
    def front(self, *args, **kwargs):
        """ """
        ...
    def indexOf(self, *args, **kwargs):
        """ """
        ...
    def indexes(self, *args, **kwargs):
        """ """
        ...
    def insert(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isSharedWith(self, *args, **kwargs):
        """ """
        ...
    def last(self, *args, **kwargs):
        """ """
        ...
    def lastIndexOf(self, *args, **kwargs):
        """ """
        ...
    def length(self, *args, **kwargs):
        """ """
        ...
    def merge(self, *args, **kwargs):
        """ """
        ...
    def mid(self, *args, **kwargs):
        """ """
        ...
    def move(self, *args, **kwargs):
        """ """
        ...
    def pop_back(self, *args, **kwargs):
        """ """
        ...
    def pop_front(self, *args, **kwargs):
        """ """
        ...
    def prepend(self, *args, **kwargs):
        """ """
        ...
    def push_back(self, *args, **kwargs):
        """ """
        ...
    def push_front(self, *args, **kwargs):
        """ """
        ...
    def removeAll(self, *args, **kwargs):
        """ """
        ...
    def removeAt(self, *args, **kwargs):
        """ """
        ...
    def removeFirst(self, *args, **kwargs):
        """ """
        ...
    def removeLast(self, *args, **kwargs):
        """ """
        ...
    def removeOne(self, *args, **kwargs):
        """ """
        ...
    def replace(self, *args, **kwargs):
        """ """
        ...
    def reserve(self, *args, **kwargs):
        """ """
        ...
    def select(self, *args, **kwargs):
        """ """
        ...
    def setSharable(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def startsWith(self, *args, **kwargs):
        """ """
        ...
    def swap(self, *args, **kwargs):
        """ """
        ...
    def takeAt(self, *args, **kwargs):
        """ """
        ...
    def takeFirst(self, *args, **kwargs):
        """ """
        ...
    def takeLast(self, *args, **kwargs):
        """ """
        ...
    def toSet(self, *args, **kwargs):
        """ """
        ...
    def toVector(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QItemSelectionModel(QObject):
    Clear: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Clear
    """
    """

    ClearAndSelect: ...
    """
    PySide.QtGui.QItemSelectionModel.SelectionFlag.ClearA...
    """

    Columns: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Columns
    """
    """

    Current: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Current
    """
    """

    Deselect: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Deselect
    """
    """

    NoUpdate: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.NoUpdate
    """
    """

    Rows: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Rows
    """
    """

    Select: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Select
    """
    """

    SelectCurrent: ...
    """
    PySide.QtGui.QItemSelectionModel.SelectionFlag.SelectC...
    """

    SelectionFlag: ...
    """
    <type 'PySide.QtGui.QItemSelectionModel.SelectionFlag'...
    """

    SelectionFlags: ...
    """
    <type 'SelectionFlags'>
    """

    Toggle: ... = PySide.QtGui.QItemSelectionModel.SelectionFlag.Toggle
    """
    """

    ToggleCurrent: ...
    """
    PySide.QtGui.QItemSelectionModel.SelectionFlag.ToggleC...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentChanged: ...
    """
    Signal
    """

    currentColumnChanged: ...
    """
    Signal
    """

    currentRowChanged: ...
    """
    Signal
    """

    selectionChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def clearSelection(self, *args, **kwargs):
        """ """
        ...
    def columnIntersectsSelection(self, *args, **kwargs):
        """ """
        ...
    def currentIndex(self, *args, **kwargs):
        """ """
        ...
    def emitSelectionChanged(self, *args, **kwargs):
        """ """
        ...
    def hasSelection(self, *args, **kwargs):
        """ """
        ...
    def isColumnSelected(self, *args, **kwargs):
        """ """
        ...
    def isRowSelected(self, *args, **kwargs):
        """ """
        ...
    def isSelected(self, *args, **kwargs):
        """ """
        ...
    def model(self, *args, **kwargs):
        """ """
        ...
    def reset(self, *args, **kwargs):
        """ """
        ...
    def rowIntersectsSelection(self, *args, **kwargs):
        """ """
        ...
    def select(self, *args, **kwargs):
        """ """
        ...
    def selectedColumns(self, *args, **kwargs):
        """ """
        ...
    def selectedIndexes(self, *args, **kwargs):
        """ """
        ...
    def selectedRows(self, *args, **kwargs):
        """ """
        ...
    def selection(self, *args, **kwargs):
        """ """
        ...
    def setCurrentIndex(self, *args, **kwargs):
        """ """
        ...
    ...

class QItemSelectionRange(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def bottom(self, *args, **kwargs):
        """ """
        ...
    def bottomRight(self, *args, **kwargs):
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def height(self, *args, **kwargs):
        """ """
        ...
    def indexes(self, *args, **kwargs):
        """ """
        ...
    def intersected(self, *args, **kwargs):
        """ """
        ...
    def intersects(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def left(self, *args, **kwargs):
        """ """
        ...
    def model(self, *args, **kwargs):
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    def right(self, *args, **kwargs):
        """ """
        ...
    def top(self, *args, **kwargs):
        """ """
        ...
    def topLeft(self, *args, **kwargs):
        """ """
        ...
    def width(self, *args, **kwargs):
        """ """
        ...
    ...

class QLibraryInfo(Shiboken.Object):
    BinariesPath: ... = QLibraryInfo.LibraryLocation.BinariesPath
    """
    """

    DataPath: ... = QLibraryInfo.LibraryLocation.DataPath
    """
    """

    DemosPath: ... = QLibraryInfo.LibraryLocation.DemosPath
    """
    """

    DocumentationPath: ...
    """
    QLibraryInfo.LibraryLocation.Documen...
    """

    ExamplesPath: ... = QLibraryInfo.LibraryLocation.ExamplesPath
    """
    """

    HeadersPath: ... = QLibraryInfo.LibraryLocation.HeadersPath
    """
    """

    ImportsPath: ... = QLibraryInfo.LibraryLocation.ImportsPath
    """
    """

    LibrariesPath: ...
    """
    QLibraryInfo.LibraryLocation.LibrariesPa...
    """

    LibraryLocation: ...
    """
    <type 'QLibraryInfo.LibraryLocation'>
    """

    PluginsPath: ... = QLibraryInfo.LibraryLocation.PluginsPath
    """
    """

    PrefixPath: ... = QLibraryInfo.LibraryLocation.PrefixPath
    """
    """

    SettingsPath: ... = QLibraryInfo.LibraryLocation.SettingsPath
    """
    """

    TranslationsPath: ...
    """
    QLibraryInfo.LibraryLocation.Translat...
    """
    @staticmethod
    def buildDate(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def buildKey(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def licensedProducts(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def licensee(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def location(*args, **kwargs):
        """ """
        ...
    ...

class QLine(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def dx(self, *args, **kwargs):
        """ """
        ...
    def dy(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def p1(self, *args, **kwargs):
        """ """
        ...
    def p2(self, *args, **kwargs):
        """ """
        ...
    def setLine(self, *args, **kwargs):
        """ """
        ...
    def setP1(self, *args, **kwargs):
        """ """
        ...
    def setP2(self, *args, **kwargs):
        """ """
        ...
    def setPoints(self, *args, **kwargs):
        """ """
        ...
    def toTuple(self, *args, **kwargs):
        """ """
        ...
    def translate(self, *args, **kwargs):
        """ """
        ...
    def translated(self, *args, **kwargs):
        """ """
        ...
    def x1(self, *args, **kwargs):
        """ """
        ...
    def x2(self, *args, **kwargs):
        """ """
        ...
    def y1(self, *args, **kwargs):
        """ """
        ...
    def y2(self, *args, **kwargs):
        """ """
        ...
    ...

class QLineF(Shiboken.Object):
    BoundedIntersection: ...
    """
    QLineF.IntersectType.BoundedInters...
    """

    IntersectType: ...
    """
    <type 'QLineF.IntersectType'>
    """

    NoIntersection: ... = QLineF.IntersectType.NoIntersection
    """
    """

    UnboundedIntersection: ...
    """
    QLineF.IntersectType.UnboundedIn...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def fromPolar(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def angle(self, *args, **kwargs):
        """ """
        ...
    def angleTo(self, *args, **kwargs):
        """ """
        ...
    def dx(self, *args, **kwargs):
        """ """
        ...
    def dy(self, *args, **kwargs):
        """ """
        ...
    def intersect(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def length(self, *args, **kwargs):
        """ """
        ...
    def normalVector(self, *args, **kwargs):
        """ """
        ...
    def p1(self, *args, **kwargs):
        """ """
        ...
    def p2(self, *args, **kwargs):
        """ """
        ...
    def pointAt(self, *args, **kwargs):
        """ """
        ...
    def setAngle(self, *args, **kwargs):
        """ """
        ...
    def setLength(self, *args, **kwargs):
        """ """
        ...
    def setLine(self, *args, **kwargs):
        """ """
        ...
    def setP1(self, *args, **kwargs):
        """ """
        ...
    def setP2(self, *args, **kwargs):
        """ """
        ...
    def setPoints(self, *args, **kwargs):
        """ """
        ...
    def toLine(self, *args, **kwargs):
        """ """
        ...
    def toTuple(self, *args, **kwargs):
        """ """
        ...
    def translate(self, *args, **kwargs):
        """ """
        ...
    def translated(self, *args, **kwargs):
        """ """
        ...
    def unitVector(self, *args, **kwargs):
        """ """
        ...
    def x1(self, *args, **kwargs):
        """ """
        ...
    def x2(self, *args, **kwargs):
        """ """
        ...
    def y1(self, *args, **kwargs):
        """ """
        ...
    def y2(self, *args, **kwargs):
        """ """
        ...
    ...

class QLocale(Shiboken.Object):
    Abkhazian: ... = QLocale.Language.Abkhazian
    """
    """

    Afan: ... = QLocale.Language.Afan
    """
    """

    Afar: ... = QLocale.Language.Afar
    """
    """

    Afghanistan: ... = QLocale.Country.Afghanistan
    """
    """

    Afrikaans: ... = QLocale.Language.Afrikaans
    """
    """

    Aghem: ... = QLocale.Language.Aghem
    """
    """

    Akan: ... = QLocale.Language.Akan
    """
    """

    Albania: ... = QLocale.Country.Albania
    """
    """

    Albanian: ... = QLocale.Language.Albanian
    """
    """

    Algeria: ... = QLocale.Country.Algeria
    """
    """

    AlternateQuotation: ...
    """
    QLocale.QuotationStyle.AlternateQuo...
    """

    AmericanSamoa: ... = QLocale.Country.AmericanSamoa
    """
    """

    Amharic: ... = QLocale.Language.Amharic
    """
    """

    Andorra: ... = QLocale.Country.Andorra
    """
    """

    Angola: ... = QLocale.Country.Angola
    """
    """

    Anguilla: ... = QLocale.Country.Anguilla
    """
    """

    Antarctica: ... = QLocale.Country.Antarctica
    """
    """

    AntiguaAndBarbuda: ... = QLocale.Country.AntiguaAndBarbuda
    """
    """

    AnyCountry: ... = QLocale.Country.AnyCountry
    """
    """

    AnyLanguage: ... = QLocale.Language.AnyLanguage
    """
    """

    AnyScript: ... = QLocale.Script.AnyScript
    """
    """

    Arabic: ... = QLocale.Language.Arabic
    """
    """

    ArabicScript: ... = QLocale.Script.ArabicScript
    """
    """

    Argentina: ... = QLocale.Country.Argentina
    """
    """

    Armenia: ... = QLocale.Country.Armenia
    """
    """

    Armenian: ... = QLocale.Language.Armenian
    """
    """

    Aruba: ... = QLocale.Country.Aruba
    """
    """

    Assamese: ... = QLocale.Language.Assamese
    """
    """

    Asu: ... = QLocale.Language.Asu
    """
    """

    Atsam: ... = QLocale.Language.Atsam
    """
    """

    Australia: ... = QLocale.Country.Australia
    """
    """

    Austria: ... = QLocale.Country.Austria
    """
    """

    Aymara: ... = QLocale.Language.Aymara
    """
    """

    Azerbaijan: ... = QLocale.Country.Azerbaijan
    """
    """

    Azerbaijani: ... = QLocale.Language.Azerbaijani
    """
    """

    Bafia: ... = QLocale.Language.Bafia
    """
    """

    Bahamas: ... = QLocale.Country.Bahamas
    """
    """

    Bahrain: ... = QLocale.Country.Bahrain
    """
    """

    Bambara: ... = QLocale.Language.Bambara
    """
    """

    Bangladesh: ... = QLocale.Country.Bangladesh
    """
    """

    Barbados: ... = QLocale.Country.Barbados
    """
    """

    Basaa: ... = QLocale.Language.Basaa
    """
    """

    Bashkir: ... = QLocale.Language.Bashkir
    """
    """

    Basque: ... = QLocale.Language.Basque
    """
    """

    Belarus: ... = QLocale.Country.Belarus
    """
    """

    Belgium: ... = QLocale.Country.Belgium
    """
    """

    Belize: ... = QLocale.Country.Belize
    """
    """

    Bemba: ... = QLocale.Language.Bemba
    """
    """

    Bena: ... = QLocale.Language.Bena
    """
    """

    Bengali: ... = QLocale.Language.Bengali
    """
    """

    Benin: ... = QLocale.Country.Benin
    """
    """

    Bermuda: ... = QLocale.Country.Bermuda
    """
    """

    Bhutan: ... = QLocale.Country.Bhutan
    """
    """

    Bhutani: ... = QLocale.Language.Bhutani
    """
    """

    Bihari: ... = QLocale.Language.Bihari
    """
    """

    Bislama: ... = QLocale.Language.Bislama
    """
    """

    Blin: ... = QLocale.Language.Blin
    """
    """

    Bodo: ... = QLocale.Language.Bodo
    """
    """

    Bolivia: ... = QLocale.Country.Bolivia
    """
    """

    BosniaAndHerzegowina: ...
    """
    QLocale.Country.BosniaAndHerzegow...
    """

    Bosnian: ... = QLocale.Language.Bosnian
    """
    """

    Botswana: ... = QLocale.Country.Botswana
    """
    """

    BouvetIsland: ... = QLocale.Country.BouvetIsland
    """
    """

    Brazil: ... = QLocale.Country.Brazil
    """
    """

    Breton: ... = QLocale.Language.Breton
    """
    """

    BritishIndianOceanTerritory: ...
    """
    QLocale.Country.BritishInd...
    """

    BritishVirginIslands: ...
    """
    QLocale.Country.BritishVirginIsla...
    """

    BruneiDarussalam: ... = QLocale.Country.BruneiDarussalam
    """
    """

    Bulgaria: ... = QLocale.Country.Bulgaria
    """
    """

    Bulgarian: ... = QLocale.Language.Bulgarian
    """
    """

    BurkinaFaso: ... = QLocale.Country.BurkinaFaso
    """
    """

    Burmese: ... = QLocale.Language.Burmese
    """
    """

    Burundi: ... = QLocale.Country.Burundi
    """
    """

    Byelorussian: ... = QLocale.Language.Byelorussian
    """
    """

    C: ... = QLocale.Language.C
    """
    """

    Cambodia: ... = QLocale.Country.Cambodia
    """
    """

    Cambodian: ... = QLocale.Language.Cambodian
    """
    """

    Cameroon: ... = QLocale.Country.Cameroon
    """
    """

    Canada: ... = QLocale.Country.Canada
    """
    """

    CapeVerde: ... = QLocale.Country.CapeVerde
    """
    """

    Catalan: ... = QLocale.Language.Catalan
    """
    """

    CaymanIslands: ... = QLocale.Country.CaymanIslands
    """
    """

    CentralAfricanRepublic: ...
    """
    QLocale.Country.CentralAfricanR...
    """

    CentralMoroccoTamazight: ...
    """
    QLocale.Language.CentralMorocc...
    """

    Chad: ... = QLocale.Country.Chad
    """
    """

    Cherokee: ... = QLocale.Language.Cherokee
    """
    """

    Chewa: ... = QLocale.Language.Chewa
    """
    """

    Chiga: ... = QLocale.Language.Chiga
    """
    """

    Chile: ... = QLocale.Country.Chile
    """
    """

    China: ... = QLocale.Country.China
    """
    """

    Chinese: ... = QLocale.Language.Chinese
    """
    """

    ChristmasIsland: ... = QLocale.Country.ChristmasIsland
    """
    """

    CocosIslands: ... = QLocale.Country.CocosIslands
    """
    """

    Colognian: ... = QLocale.Language.Colognian
    """
    """

    Colombia: ... = QLocale.Country.Colombia
    """
    """

    Comoros: ... = QLocale.Country.Comoros
    """
    """

    CongoSwahili: ... = QLocale.Language.CongoSwahili
    """
    """

    CookIslands: ... = QLocale.Country.CookIslands
    """
    """

    Cornish: ... = QLocale.Language.Cornish
    """
    """

    Corsican: ... = QLocale.Language.Corsican
    """
    """

    CostaRica: ... = QLocale.Country.CostaRica
    """
    """

    Country: ...
    """
    <type 'QLocale.Country'>
    """

    Croatia: ... = QLocale.Country.Croatia
    """
    """

    Croatian: ... = QLocale.Language.Croatian
    """
    """

    Cuba: ... = QLocale.Country.Cuba
    """
    """

    CurrencyDisplayName: ...
    """
    QLocale.CurrencySymbolFormat.Curre...
    """

    CurrencyIsoCode: ...
    """
    QLocale.CurrencySymbolFormat.CurrencyI...
    """

    CurrencySymbol: ...
    """
    QLocale.CurrencySymbolFormat.CurrencySy...
    """

    CurrencySymbolFormat: ...
    """
    <type 'QLocale.CurrencySymbolForm...
    """

    Cyprus: ... = QLocale.Country.Cyprus
    """
    """

    CyrillicScript: ... = QLocale.Script.CyrillicScript
    """
    """

    Czech: ... = QLocale.Language.Czech
    """
    """

    CzechRepublic: ... = QLocale.Country.CzechRepublic
    """
    """

    Danish: ... = QLocale.Language.Danish
    """
    """

    DemocraticRepublicOfCongo: ...
    """
    QLocale.Country.DemocraticRe...
    """

    DemocraticRepublicOfKorea: ...
    """
    QLocale.Country.DemocraticRe...
    """

    Denmark: ... = QLocale.Country.Denmark
    """
    """

    DeseretScript: ... = QLocale.Script.DeseretScript
    """
    """

    Divehi: ... = QLocale.Language.Divehi
    """
    """

    Djibouti: ... = QLocale.Country.Djibouti
    """
    """

    Dominica: ... = QLocale.Country.Dominica
    """
    """

    DominicanRepublic: ... = QLocale.Country.DominicanRepublic
    """
    """

    Duala: ... = QLocale.Language.Duala
    """
    """

    Dutch: ... = QLocale.Language.Dutch
    """
    """

    EastTimor: ... = QLocale.Country.EastTimor
    """
    """

    Ecuador: ... = QLocale.Country.Ecuador
    """
    """

    Egypt: ... = QLocale.Country.Egypt
    """
    """

    ElSalvador: ... = QLocale.Country.ElSalvador
    """
    """

    Embu: ... = QLocale.Language.Embu
    """
    """

    English: ... = QLocale.Language.English
    """
    """

    EquatorialGuinea: ... = QLocale.Country.EquatorialGuinea
    """
    """

    Eritrea: ... = QLocale.Country.Eritrea
    """
    """

    Esperanto: ... = QLocale.Language.Esperanto
    """
    """

    Estonia: ... = QLocale.Country.Estonia
    """
    """

    Estonian: ... = QLocale.Language.Estonian
    """
    """

    Ethiopia: ... = QLocale.Country.Ethiopia
    """
    """

    Ewe: ... = QLocale.Language.Ewe
    """
    """

    Ewondo: ... = QLocale.Language.Ewondo
    """
    """

    FalklandIslands: ... = QLocale.Country.FalklandIslands
    """
    """

    FaroeIslands: ... = QLocale.Country.FaroeIslands
    """
    """

    Faroese: ... = QLocale.Language.Faroese
    """
    """

    FijiCountry: ... = QLocale.Country.FijiCountry
    """
    """

    FijiLanguage: ... = QLocale.Language.FijiLanguage
    """
    """

    Filipino: ... = QLocale.Language.Filipino
    """
    """

    Finland: ... = QLocale.Country.Finland
    """
    """

    Finnish: ... = QLocale.Language.Finnish
    """
    """

    FormatType: ...
    """
    <type 'QLocale.FormatType'>
    """

    France: ... = QLocale.Country.France
    """
    """

    French: ... = QLocale.Language.French
    """
    """

    FrenchGuiana: ... = QLocale.Country.FrenchGuiana
    """
    """

    FrenchPolynesia: ... = QLocale.Country.FrenchPolynesia
    """
    """

    FrenchSouthernTerritories: ...
    """
    QLocale.Country.FrenchSouthe...
    """

    Frisian: ... = QLocale.Language.Frisian
    """
    """

    Friulian: ... = QLocale.Language.Friulian
    """
    """

    Fulah: ... = QLocale.Language.Fulah
    """
    """

    Ga: ... = QLocale.Language.Ga
    """
    """

    Gabon: ... = QLocale.Country.Gabon
    """
    """

    Gaelic: ... = QLocale.Language.Gaelic
    """
    """

    Galician: ... = QLocale.Language.Galician
    """
    """

    Gambia: ... = QLocale.Country.Gambia
    """
    """

    Ganda: ... = QLocale.Language.Ganda
    """
    """

    Geez: ... = QLocale.Language.Geez
    """
    """

    Georgia: ... = QLocale.Country.Georgia
    """
    """

    Georgian: ... = QLocale.Language.Georgian
    """
    """

    German: ... = QLocale.Language.German
    """
    """

    Germany: ... = QLocale.Country.Germany
    """
    """

    Ghana: ... = QLocale.Country.Ghana
    """
    """

    Gibraltar: ... = QLocale.Country.Gibraltar
    """
    """

    Greece: ... = QLocale.Country.Greece
    """
    """

    Greek: ... = QLocale.Language.Greek
    """
    """

    Greenland: ... = QLocale.Country.Greenland
    """
    """

    Greenlandic: ... = QLocale.Language.Greenlandic
    """
    """

    Grenada: ... = QLocale.Country.Grenada
    """
    """

    Guadeloupe: ... = QLocale.Country.Guadeloupe
    """
    """

    Guam: ... = QLocale.Country.Guam
    """
    """

    Guarani: ... = QLocale.Language.Guarani
    """
    """

    Guatemala: ... = QLocale.Country.Guatemala
    """
    """

    Guinea: ... = QLocale.Country.Guinea
    """
    """

    GuineaBissau: ... = QLocale.Country.GuineaBissau
    """
    """

    Gujarati: ... = QLocale.Language.Gujarati
    """
    """

    GurmukhiScript: ... = QLocale.Script.GurmukhiScript
    """
    """

    Gusii: ... = QLocale.Language.Gusii
    """
    """

    Guyana: ... = QLocale.Country.Guyana
    """
    """

    Haiti: ... = QLocale.Country.Haiti
    """
    """

    Hausa: ... = QLocale.Language.Hausa
    """
    """

    Hawaiian: ... = QLocale.Language.Hawaiian
    """
    """

    HeardAndMcDonaldIslands: ...
    """
    QLocale.Country.HeardAndMcDona...
    """

    Hebrew: ... = QLocale.Language.Hebrew
    """
    """

    Hindi: ... = QLocale.Language.Hindi
    """
    """

    Honduras: ... = QLocale.Country.Honduras
    """
    """

    HongKong: ... = QLocale.Country.HongKong
    """
    """

    Hungarian: ... = QLocale.Language.Hungarian
    """
    """

    Hungary: ... = QLocale.Country.Hungary
    """
    """

    Iceland: ... = QLocale.Country.Iceland
    """
    """

    Icelandic: ... = QLocale.Language.Icelandic
    """
    """

    Igbo: ... = QLocale.Language.Igbo
    """
    """

    ImperialSystem: ...
    """
    QLocale.MeasurementSystem.ImperialSyste...
    """

    India: ... = QLocale.Country.India
    """
    """

    Indonesia: ... = QLocale.Country.Indonesia
    """
    """

    Indonesian: ... = QLocale.Language.Indonesian
    """
    """

    Interlingua: ... = QLocale.Language.Interlingua
    """
    """

    Interlingue: ... = QLocale.Language.Interlingue
    """
    """

    Inuktitut: ... = QLocale.Language.Inuktitut
    """
    """

    Inupiak: ... = QLocale.Language.Inupiak
    """
    """

    Iran: ... = QLocale.Country.Iran
    """
    """

    Iraq: ... = QLocale.Country.Iraq
    """
    """

    Ireland: ... = QLocale.Country.Ireland
    """
    """

    Irish: ... = QLocale.Language.Irish
    """
    """

    Israel: ... = QLocale.Country.Israel
    """
    """

    Italian: ... = QLocale.Language.Italian
    """
    """

    Italy: ... = QLocale.Country.Italy
    """
    """

    IvoryCoast: ... = QLocale.Country.IvoryCoast
    """
    """

    Jamaica: ... = QLocale.Country.Jamaica
    """
    """

    Japan: ... = QLocale.Country.Japan
    """
    """

    Japanese: ... = QLocale.Language.Japanese
    """
    """

    Javanese: ... = QLocale.Language.Javanese
    """
    """

    Jju: ... = QLocale.Language.Jju
    """
    """

    JolaFonyi: ... = QLocale.Language.JolaFonyi
    """
    """

    Jordan: ... = QLocale.Country.Jordan
    """
    """

    Kabuverdianu: ... = QLocale.Language.Kabuverdianu
    """
    """

    Kabyle: ... = QLocale.Language.Kabyle
    """
    """

    Kalenjin: ... = QLocale.Language.Kalenjin
    """
    """

    Kamba: ... = QLocale.Language.Kamba
    """
    """

    Kannada: ... = QLocale.Language.Kannada
    """
    """

    Kashmiri: ... = QLocale.Language.Kashmiri
    """
    """

    Kazakh: ... = QLocale.Language.Kazakh
    """
    """

    Kazakhstan: ... = QLocale.Country.Kazakhstan
    """
    """

    Kenya: ... = QLocale.Country.Kenya
    """
    """

    Kikuyu: ... = QLocale.Language.Kikuyu
    """
    """

    Kinyarwanda: ... = QLocale.Language.Kinyarwanda
    """
    """

    Kirghiz: ... = QLocale.Language.Kirghiz
    """
    """

    Kiribati: ... = QLocale.Country.Kiribati
    """
    """

    Konkani: ... = QLocale.Language.Konkani
    """
    """

    Korean: ... = QLocale.Language.Korean
    """
    """

    Koro: ... = QLocale.Language.Koro
    """
    """

    KoyraChiini: ... = QLocale.Language.KoyraChiini
    """
    """

    KoyraboroSenni: ... = QLocale.Language.KoyraboroSenni
    """
    """

    Kpelle: ... = QLocale.Language.Kpelle
    """
    """

    Kurdish: ... = QLocale.Language.Kurdish
    """
    """

    Kurundi: ... = QLocale.Language.Kurundi
    """
    """

    Kuwait: ... = QLocale.Country.Kuwait
    """
    """

    Kwasio: ... = QLocale.Language.Kwasio
    """
    """

    Kyrgyzstan: ... = QLocale.Country.Kyrgyzstan
    """
    """

    Langi: ... = QLocale.Language.Langi
    """
    """

    Language: ...
    """
    <type 'QLocale.Language'>
    """

    Lao: ... = QLocale.Country.Lao
    """
    """

    Laothian: ... = QLocale.Language.Laothian
    """
    """

    LastCountry: ... = QLocale.Country.LastCountry
    """
    """

    LastLanguage: ... = QLocale.Language.LastLanguage
    """
    """

    LastScript: ... = QLocale.Script.LastScript
    """
    """

    Latin: ... = QLocale.Language.Latin
    """
    """

    LatinAmericaAndTheCaribbean: ...
    """
    QLocale.Country.LatinAmeri...
    """

    LatinScript: ... = QLocale.Script.LatinScript
    """
    """

    Latvia: ... = QLocale.Country.Latvia
    """
    """

    Latvian: ... = QLocale.Language.Latvian
    """
    """

    Lebanon: ... = QLocale.Country.Lebanon
    """
    """

    Lesotho: ... = QLocale.Country.Lesotho
    """
    """

    Liberia: ... = QLocale.Country.Liberia
    """
    """

    LibyanArabJamahiriya: ...
    """
    QLocale.Country.LibyanArabJamahir...
    """

    Liechtenstein: ... = QLocale.Country.Liechtenstein
    """
    """

    Lingala: ... = QLocale.Language.Lingala
    """
    """

    Lithuania: ... = QLocale.Country.Lithuania
    """
    """

    Lithuanian: ... = QLocale.Language.Lithuanian
    """
    """

    LongFormat: ... = QLocale.FormatType.LongFormat
    """
    """

    LowGerman: ... = QLocale.Language.LowGerman
    """
    """

    LubaKatanga: ... = QLocale.Language.LubaKatanga
    """
    """

    Luo: ... = QLocale.Language.Luo
    """
    """

    Luxembourg: ... = QLocale.Country.Luxembourg
    """
    """

    Luyia: ... = QLocale.Language.Luyia
    """
    """

    Macau: ... = QLocale.Country.Macau
    """
    """

    Macedonia: ... = QLocale.Country.Macedonia
    """
    """

    Macedonian: ... = QLocale.Language.Macedonian
    """
    """

    Machame: ... = QLocale.Language.Machame
    """
    """

    Madagascar: ... = QLocale.Country.Madagascar
    """
    """

    MakhuwaMeetto: ... = QLocale.Language.MakhuwaMeetto
    """
    """

    Makonde: ... = QLocale.Language.Makonde
    """
    """

    Malagasy: ... = QLocale.Language.Malagasy
    """
    """

    Malawi: ... = QLocale.Country.Malawi
    """
    """

    Malay: ... = QLocale.Language.Malay
    """
    """

    Malayalam: ... = QLocale.Language.Malayalam
    """
    """

    Malaysia: ... = QLocale.Country.Malaysia
    """
    """

    Maldives: ... = QLocale.Country.Maldives
    """
    """

    Mali: ... = QLocale.Country.Mali
    """
    """

    Malta: ... = QLocale.Country.Malta
    """
    """

    Maltese: ... = QLocale.Language.Maltese
    """
    """

    Manx: ... = QLocale.Language.Manx
    """
    """

    Maori: ... = QLocale.Language.Maori
    """
    """

    Marathi: ... = QLocale.Language.Marathi
    """
    """

    MarshallIslands: ... = QLocale.Country.MarshallIslands
    """
    """

    Martinique: ... = QLocale.Country.Martinique
    """
    """

    Masai: ... = QLocale.Language.Masai
    """
    """

    Mauritania: ... = QLocale.Country.Mauritania
    """
    """

    Mauritius: ... = QLocale.Country.Mauritius
    """
    """

    Mayotte: ... = QLocale.Country.Mayotte
    """
    """

    MeasurementSystem: ...
    """
    <type 'QLocale.MeasurementSystem'>
    """

    Meru: ... = QLocale.Language.Meru
    """
    """

    MetricSystem: ... = QLocale.MeasurementSystem.MetricSystem
    """
    """

    MetropolitanFrance: ... = QLocale.Country.MetropolitanFrance
    """
    """

    Mexico: ... = QLocale.Country.Mexico
    """
    """

    Micronesia: ... = QLocale.Country.Micronesia
    """
    """

    Moldavian: ... = QLocale.Language.Moldavian
    """
    """

    Moldova: ... = QLocale.Country.Moldova
    """
    """

    Monaco: ... = QLocale.Country.Monaco
    """
    """

    Mongolia: ... = QLocale.Country.Mongolia
    """
    """

    Mongolian: ... = QLocale.Language.Mongolian
    """
    """

    MongolianScript: ... = QLocale.Script.MongolianScript
    """
    """

    Montenegro: ... = QLocale.Country.Montenegro
    """
    """

    Montserrat: ... = QLocale.Country.Montserrat
    """
    """

    Morisyen: ... = QLocale.Language.Morisyen
    """
    """

    Morocco: ... = QLocale.Country.Morocco
    """
    """

    Mozambique: ... = QLocale.Country.Mozambique
    """
    """

    Mundang: ... = QLocale.Language.Mundang
    """
    """

    Myanmar: ... = QLocale.Country.Myanmar
    """
    """

    Nama: ... = QLocale.Language.Nama
    """
    """

    Namibia: ... = QLocale.Country.Namibia
    """
    """

    NarrowFormat: ... = QLocale.FormatType.NarrowFormat
    """
    """

    NauruCountry: ... = QLocale.Country.NauruCountry
    """
    """

    NauruLanguage: ... = QLocale.Language.NauruLanguage
    """
    """

    Nepal: ... = QLocale.Country.Nepal
    """
    """

    Nepali: ... = QLocale.Language.Nepali
    """
    """

    Netherlands: ... = QLocale.Country.Netherlands
    """
    """

    NetherlandsAntilles: ...
    """
    QLocale.Country.NetherlandsAntille...
    """

    NewCaledonia: ... = QLocale.Country.NewCaledonia
    """
    """

    NewZealand: ... = QLocale.Country.NewZealand
    """
    """

    Nicaragua: ... = QLocale.Country.Nicaragua
    """
    """

    Niger: ... = QLocale.Country.Niger
    """
    """

    Nigeria: ... = QLocale.Country.Nigeria
    """
    """

    Niue: ... = QLocale.Country.Niue
    """
    """

    NorfolkIsland: ... = QLocale.Country.NorfolkIsland
    """
    """

    NorthNdebele: ... = QLocale.Language.NorthNdebele
    """
    """

    NorthernMarianaIslands: ...
    """
    QLocale.Country.NorthernMariana...
    """

    NorthernSami: ... = QLocale.Language.NorthernSami
    """
    """

    NorthernSotho: ... = QLocale.Language.NorthernSotho
    """
    """

    Norway: ... = QLocale.Country.Norway
    """
    """

    Norwegian: ... = QLocale.Language.Norwegian
    """
    """

    NorwegianBokmal: ... = QLocale.Language.NorwegianBokmal
    """
    """

    NorwegianNynorsk: ... = QLocale.Language.NorwegianNynorsk
    """
    """

    Nuer: ... = QLocale.Language.Nuer
    """
    """

    NumberOption: ...
    """
    <type 'QLocale.NumberOption'>
    """

    NumberOptions: ...
    """
    <type 'NumberOptions'>
    """

    Nyankole: ... = QLocale.Language.Nyankole
    """
    """

    Nynorsk: ... = QLocale.Language.Nynorsk
    """
    """

    Occitan: ... = QLocale.Language.Occitan
    """
    """

    Oman: ... = QLocale.Country.Oman
    """
    """

    OmitGroupSeparator: ...
    """
    QLocale.NumberOption.OmitGroupSepar...
    """

    Oriya: ... = QLocale.Language.Oriya
    """
    """

    Pakistan: ... = QLocale.Country.Pakistan
    """
    """

    Palau: ... = QLocale.Country.Palau
    """
    """

    PalestinianTerritory: ...
    """
    QLocale.Country.PalestinianTerrit...
    """

    Panama: ... = QLocale.Country.Panama
    """
    """

    PapuaNewGuinea: ... = QLocale.Country.PapuaNewGuinea
    """
    """

    Paraguay: ... = QLocale.Country.Paraguay
    """
    """

    Pashto: ... = QLocale.Language.Pashto
    """
    """

    PeoplesRepublicOfCongo: ...
    """
    QLocale.Country.PeoplesRepublic...
    """

    Persian: ... = QLocale.Language.Persian
    """
    """

    Peru: ... = QLocale.Country.Peru
    """
    """

    Philippines: ... = QLocale.Country.Philippines
    """
    """

    Pitcairn: ... = QLocale.Country.Pitcairn
    """
    """

    Poland: ... = QLocale.Country.Poland
    """
    """

    Polish: ... = QLocale.Language.Polish
    """
    """

    Portugal: ... = QLocale.Country.Portugal
    """
    """

    Portuguese: ... = QLocale.Language.Portuguese
    """
    """

    PuertoRico: ... = QLocale.Country.PuertoRico
    """
    """

    Punjabi: ... = QLocale.Language.Punjabi
    """
    """

    Qatar: ... = QLocale.Country.Qatar
    """
    """

    Quechua: ... = QLocale.Language.Quechua
    """
    """

    QuotationStyle: ...
    """
    <type 'QLocale.QuotationStyle'>
    """

    RejectGroupSeparator: ...
    """
    QLocale.NumberOption.RejectGroupS...
    """

    RepublicOfKorea: ... = QLocale.Country.RepublicOfKorea
    """
    """

    Reunion: ... = QLocale.Country.Reunion
    """
    """

    RhaetoRomance: ... = QLocale.Language.RhaetoRomance
    """
    """

    Romania: ... = QLocale.Country.Romania
    """
    """

    Romanian: ... = QLocale.Language.Romanian
    """
    """

    Rombo: ... = QLocale.Language.Rombo
    """
    """

    Rundi: ... = QLocale.Language.Rundi
    """
    """

    Russian: ... = QLocale.Language.Russian
    """
    """

    RussianFederation: ... = QLocale.Country.RussianFederation
    """
    """

    Rwa: ... = QLocale.Language.Rwa
    """
    """

    Rwanda: ... = QLocale.Country.Rwanda
    """
    """

    Saho: ... = QLocale.Language.Saho
    """
    """

    SaintBarthelemy: ... = QLocale.Country.SaintBarthelemy
    """
    """

    SaintKittsAndNevis: ... = QLocale.Country.SaintKittsAndNevis
    """
    """

    SaintMartin: ... = QLocale.Country.SaintMartin
    """
    """

    Sakha: ... = QLocale.Language.Sakha
    """
    """

    Samburu: ... = QLocale.Language.Samburu
    """
    """

    Samoa: ... = QLocale.Country.Samoa
    """
    """

    Samoan: ... = QLocale.Language.Samoan
    """
    """

    SanMarino: ... = QLocale.Country.SanMarino
    """
    """

    Sangho: ... = QLocale.Language.Sangho
    """
    """

    Sangu: ... = QLocale.Language.Sangu
    """
    """

    Sanskrit: ... = QLocale.Language.Sanskrit
    """
    """

    SaoTomeAndPrincipe: ... = QLocale.Country.SaoTomeAndPrincipe
    """
    """

    SaudiArabia: ... = QLocale.Country.SaudiArabia
    """
    """

    Script: ...
    """
    <type 'QLocale.Script'>
    """

    Sena: ... = QLocale.Language.Sena
    """
    """

    Senegal: ... = QLocale.Country.Senegal
    """
    """

    Serbia: ... = QLocale.Country.Serbia
    """
    """

    SerbiaAndMontenegro: ...
    """
    QLocale.Country.SerbiaAndMontenegr...
    """

    Serbian: ... = QLocale.Language.Serbian
    """
    """

    SerboCroatian: ... = QLocale.Language.SerboCroatian
    """
    """

    Sesotho: ... = QLocale.Language.Sesotho
    """
    """

    Setswana: ... = QLocale.Language.Setswana
    """
    """

    Seychelles: ... = QLocale.Country.Seychelles
    """
    """

    Shambala: ... = QLocale.Language.Shambala
    """
    """

    Shona: ... = QLocale.Language.Shona
    """
    """

    ShortFormat: ... = QLocale.FormatType.ShortFormat
    """
    """

    SichuanYi: ... = QLocale.Language.SichuanYi
    """
    """

    Sidamo: ... = QLocale.Language.Sidamo
    """
    """

    SierraLeone: ... = QLocale.Country.SierraLeone
    """
    """

    SimplifiedChineseScript: ...
    """
    QLocale.Script.SimplifiedChine...
    """

    SimplifiedHanScript: ... = QLocale.Script.SimplifiedHanScript
    """
    """

    Sindhi: ... = QLocale.Language.Sindhi
    """
    """

    Singapore: ... = QLocale.Country.Singapore
    """
    """

    Singhalese: ... = QLocale.Language.Singhalese
    """
    """

    Siswati: ... = QLocale.Language.Siswati
    """
    """

    Slovak: ... = QLocale.Language.Slovak
    """
    """

    Slovakia: ... = QLocale.Country.Slovakia
    """
    """

    Slovenia: ... = QLocale.Country.Slovenia
    """
    """

    Slovenian: ... = QLocale.Language.Slovenian
    """
    """

    Soga: ... = QLocale.Language.Soga
    """
    """

    SolomonIslands: ... = QLocale.Country.SolomonIslands
    """
    """

    Somali: ... = QLocale.Language.Somali
    """
    """

    Somalia: ... = QLocale.Country.Somalia
    """
    """

    SouthAfrica: ... = QLocale.Country.SouthAfrica
    """
    """

    SouthGeorgiaAndTheSouthSandwichIslands: ...
    """
    QLocale.Country...
    """

    SouthNdebele: ... = QLocale.Language.SouthNdebele
    """
    """

    Spain: ... = QLocale.Country.Spain
    """
    """

    Spanish: ... = QLocale.Language.Spanish
    """
    """

    SriLanka: ... = QLocale.Country.SriLanka
    """
    """

    StHelena: ... = QLocale.Country.StHelena
    """
    """

    StLucia: ... = QLocale.Country.StLucia
    """
    """

    StPierreAndMiquelon: ...
    """
    QLocale.Country.StPierreAndMiquelo...
    """

    StVincentAndTheGrenadines: ...
    """
    QLocale.Country.StVincentAnd...
    """

    StandardQuotation: ...
    """
    QLocale.QuotationStyle.StandardQuota...
    """

    Sudan: ... = QLocale.Country.Sudan
    """
    """

    Sundanese: ... = QLocale.Language.Sundanese
    """
    """

    Suriname: ... = QLocale.Country.Suriname
    """
    """

    SvalbardAndJanMayenIslands: ...
    """
    QLocale.Country.SvalbardAnd...
    """

    Swahili: ... = QLocale.Language.Swahili
    """
    """

    Swaziland: ... = QLocale.Country.Swaziland
    """
    """

    Sweden: ... = QLocale.Country.Sweden
    """
    """

    Swedish: ... = QLocale.Language.Swedish
    """
    """

    SwissGerman: ... = QLocale.Language.SwissGerman
    """
    """

    Switzerland: ... = QLocale.Country.Switzerland
    """
    """

    Syriac: ... = QLocale.Language.Syriac
    """
    """

    SyrianArabRepublic: ... = QLocale.Country.SyrianArabRepublic
    """
    """

    Tachelhit: ... = QLocale.Language.Tachelhit
    """
    """

    Tagalog: ... = QLocale.Language.Tagalog
    """
    """

    Taita: ... = QLocale.Language.Taita
    """
    """

    Taiwan: ... = QLocale.Country.Taiwan
    """
    """

    Tajik: ... = QLocale.Language.Tajik
    """
    """

    Tajikistan: ... = QLocale.Country.Tajikistan
    """
    """

    Tamil: ... = QLocale.Language.Tamil
    """
    """

    Tanzania: ... = QLocale.Country.Tanzania
    """
    """

    Taroko: ... = QLocale.Language.Taroko
    """
    """

    Tasawaq: ... = QLocale.Language.Tasawaq
    """
    """

    Tatar: ... = QLocale.Language.Tatar
    """
    """

    Telugu: ... = QLocale.Language.Telugu
    """
    """

    Teso: ... = QLocale.Language.Teso
    """
    """

    Thai: ... = QLocale.Language.Thai
    """
    """

    Thailand: ... = QLocale.Country.Thailand
    """
    """

    Tibetan: ... = QLocale.Language.Tibetan
    """
    """

    TifinaghScript: ... = QLocale.Script.TifinaghScript
    """
    """

    Tigre: ... = QLocale.Language.Tigre
    """
    """

    Tigrinya: ... = QLocale.Language.Tigrinya
    """
    """

    Togo: ... = QLocale.Country.Togo
    """
    """

    Tokelau: ... = QLocale.Country.Tokelau
    """
    """

    TongaCountry: ... = QLocale.Country.TongaCountry
    """
    """

    TongaLanguage: ... = QLocale.Language.TongaLanguage
    """
    """

    TraditionalChineseScript: ...
    """
    QLocale.Script.TraditionalChi...
    """

    TraditionalHanScript: ...
    """
    QLocale.Script.TraditionalHanScri...
    """

    TrinidadAndTobago: ... = QLocale.Country.TrinidadAndTobago
    """
    """

    Tsonga: ... = QLocale.Language.Tsonga
    """
    """

    Tunisia: ... = QLocale.Country.Tunisia
    """
    """

    Turkey: ... = QLocale.Country.Turkey
    """
    """

    Turkish: ... = QLocale.Language.Turkish
    """
    """

    Turkmen: ... = QLocale.Language.Turkmen
    """
    """

    Turkmenistan: ... = QLocale.Country.Turkmenistan
    """
    """

    TurksAndCaicosIslands: ...
    """
    QLocale.Country.TurksAndCaicosIs...
    """

    Tuvalu: ... = QLocale.Country.Tuvalu
    """
    """

    Twi: ... = QLocale.Language.Twi
    """
    """

    Tyap: ... = QLocale.Language.Tyap
    """
    """

    USVirginIslands: ... = QLocale.Country.USVirginIslands
    """
    """

    Uganda: ... = QLocale.Country.Uganda
    """
    """

    Uigur: ... = QLocale.Language.Uigur
    """
    """

    Ukraine: ... = QLocale.Country.Ukraine
    """
    """

    Ukrainian: ... = QLocale.Language.Ukrainian
    """
    """

    UnitedArabEmirates: ... = QLocale.Country.UnitedArabEmirates
    """
    """

    UnitedKingdom: ... = QLocale.Country.UnitedKingdom
    """
    """

    UnitedStates: ... = QLocale.Country.UnitedStates
    """
    """

    UnitedStatesMinorOutlyingIslands: ...
    """
    QLocale.Country.Unite...
    """

    Urdu: ... = QLocale.Language.Urdu
    """
    """

    Uruguay: ... = QLocale.Country.Uruguay
    """
    """

    Uzbek: ... = QLocale.Language.Uzbek
    """
    """

    Uzbekistan: ... = QLocale.Country.Uzbekistan
    """
    """

    Vai: ... = QLocale.Language.Vai
    """
    """

    Vanuatu: ... = QLocale.Country.Vanuatu
    """
    """

    VaticanCityState: ... = QLocale.Country.VaticanCityState
    """
    """

    Venda: ... = QLocale.Language.Venda
    """
    """

    Venezuela: ... = QLocale.Country.Venezuela
    """
    """

    VietNam: ... = QLocale.Country.VietNam
    """
    """

    Vietnamese: ... = QLocale.Language.Vietnamese
    """
    """

    Volapuk: ... = QLocale.Language.Volapuk
    """
    """

    Vunjo: ... = QLocale.Language.Vunjo
    """
    """

    Walamo: ... = QLocale.Language.Walamo
    """
    """

    WallisAndFutunaIslands: ...
    """
    QLocale.Country.WallisAndFutuna...
    """

    Walser: ... = QLocale.Language.Walser
    """
    """

    Welsh: ... = QLocale.Language.Welsh
    """
    """

    WesternSahara: ... = QLocale.Country.WesternSahara
    """
    """

    Wolof: ... = QLocale.Language.Wolof
    """
    """

    Xhosa: ... = QLocale.Language.Xhosa
    """
    """

    Yangben: ... = QLocale.Language.Yangben
    """
    """

    Yemen: ... = QLocale.Country.Yemen
    """
    """

    Yiddish: ... = QLocale.Language.Yiddish
    """
    """

    Yoruba: ... = QLocale.Language.Yoruba
    """
    """

    Yugoslavia: ... = QLocale.Country.Yugoslavia
    """
    """

    Zambia: ... = QLocale.Country.Zambia
    """
    """

    Zarma: ... = QLocale.Language.Zarma
    """
    """

    Zhuang: ... = QLocale.Language.Zhuang
    """
    """

    Zimbabwe: ... = QLocale.Country.Zimbabwe
    """
    """

    Zulu: ... = QLocale.Language.Zulu
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def c(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def countriesForLanguage(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def countryToString(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def languageToString(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def matchingLocales(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def scriptToString(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setDefault(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def system(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def amStr(self, *args, **kwargs):
        """ """
        ...
    def bcp47Name(self, *args, **kwargs):
        """ """
        ...
    def country(self, *args, **kwargs):
        """ """
        ...
    def createSeparatedList(self, *args, **kwargs):
        """ """
        ...
    def currencySymbol(self, *args, **kwargs):
        """ """
        ...
    def dateFormat(self, *args, **kwargs):
        """ """
        ...
    def dateTimeFormat(self, *args, **kwargs):
        """ """
        ...
    def dayName(self, *args, **kwargs):
        """ """
        ...
    def decimalPoint(self, *args, **kwargs):
        """ """
        ...
    def exponential(self, *args, **kwargs):
        """ """
        ...
    def firstDayOfWeek(self, *args, **kwargs):
        """ """
        ...
    def groupSeparator(self, *args, **kwargs):
        """ """
        ...
    def language(self, *args, **kwargs):
        """ """
        ...
    def measurementSystem(self, *args, **kwargs):
        """ """
        ...
    def monthName(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def nativeCountryName(self, *args, **kwargs):
        """ """
        ...
    def nativeLanguageName(self, *args, **kwargs):
        """ """
        ...
    def negativeSign(self, *args, **kwargs):
        """ """
        ...
    def numberOptions(self, *args, **kwargs):
        """ """
        ...
    def percent(self, *args, **kwargs):
        """ """
        ...
    def pmStr(self, *args, **kwargs):
        """ """
        ...
    def positiveSign(self, *args, **kwargs):
        """ """
        ...
    def quoteString(self, *args, **kwargs):
        """ """
        ...
    def script(self, *args, **kwargs):
        """ """
        ...
    def setNumberOptions(self, *args, **kwargs):
        """ """
        ...
    def standaloneDayName(self, *args, **kwargs):
        """ """
        ...
    def standaloneMonthName(self, *args, **kwargs):
        """ """
        ...
    def textDirection(self, *args, **kwargs):
        """ """
        ...
    def timeFormat(self, *args, **kwargs):
        """ """
        ...
    def toCurrencyString(self, *args, **kwargs):
        """ """
        ...
    def toDate(self, *args, **kwargs):
        """ """
        ...
    def toDateTime(self, *args, **kwargs):
        """ """
        ...
    def toDouble(self, *args, **kwargs):
        """ """
        ...
    def toFloat(self, *args, **kwargs):
        """ """
        ...
    def toInt(self, *args, **kwargs):
        """ """
        ...
    def toLongLong(self, *args, **kwargs):
        """ """
        ...
    def toLower(self, *args, **kwargs):
        """ """
        ...
    def toShort(self, *args, **kwargs):
        """ """
        ...
    def toString(self, *args, **kwargs):
        """ """
        ...
    def toTime(self, *args, **kwargs):
        """ """
        ...
    def toUInt(self, *args, **kwargs):
        """ """
        ...
    def toULongLong(self, *args, **kwargs):
        """ """
        ...
    def toUShort(self, *args, **kwargs):
        """ """
        ...
    def toUpper(self, *args, **kwargs):
        """ """
        ...
    def uiLanguages(self, *args, **kwargs):
        """ """
        ...
    def weekdays(self, *args, **kwargs):
        """ """
        ...
    def zeroDigit(self, *args, **kwargs):
        """ """
        ...
    ...

class QMargins(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def bottom(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def left(self, *args, **kwargs):
        """ """
        ...
    def right(self, *args, **kwargs):
        """ """
        ...
    def setBottom(self, *args, **kwargs):
        """ """
        ...
    def setLeft(self, *args, **kwargs):
        """ """
        ...
    def setRight(self, *args, **kwargs):
        """ """
        ...
    def setTop(self, *args, **kwargs):
        """ """
        ...
    def top(self, *args, **kwargs):
        """ """
        ...
    ...

class QMetaClassInfo(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QMetaEnum(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def isFlag(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def key(self, *args, **kwargs):
        """ """
        ...
    def keyCount(self, *args, **kwargs):
        """ """
        ...
    def keyToValue(self, *args, **kwargs):
        """ """
        ...
    def keysToValue(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def scope(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    def valueToKey(self, *args, **kwargs):
        """ """
        ...
    def valueToKeys(self, *args, **kwargs):
        """ """
        ...
    ...

class QMetaMethod(Shiboken.Object):
    Access: ...
    """
    <type 'QMetaMethod.Access'>
    """

    Constructor: ... = QMetaMethod.MethodType.Constructor
    """
    """

    Method: ... = QMetaMethod.MethodType.Method
    """
    """

    MethodType: ...
    """
    <type 'QMetaMethod.MethodType'>
    """

    Private: ... = QMetaMethod.Access.Private
    """
    """

    Protected: ... = QMetaMethod.Access.Protected
    """
    """

    Public: ... = QMetaMethod.Access.Public
    """
    """

    Signal: ... = QMetaMethod.MethodType.Signal
    """
    """

    Slot: ... = QMetaMethod.MethodType.Slot
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def access(self, *args, **kwargs):
        """ """
        ...
    def enclosingMetaObject(self, *args, **kwargs):
        """ """
        ...
    def invoke(self, *args, **kwargs):
        """ """
        ...
    def methodIndex(self, *args, **kwargs):
        """ """
        ...
    def methodType(self, *args, **kwargs):
        """ """
        ...
    def parameterNames(self, *args, **kwargs):
        """ """
        ...
    def parameterTypes(self, *args, **kwargs):
        """ """
        ...
    def revision(self, *args, **kwargs):
        """ """
        ...
    def signature(self, *args, **kwargs):
        """ """
        ...
    def tag(self, *args, **kwargs):
        """ """
        ...
    def typeName(self, *args, **kwargs):
        """ """
        ...
    ...

class QMetaObject(Shiboken.Object):
    Call: ...
    """
    <type 'QMetaObject.Call'>
    """

    CreateInstance: ... = QMetaObject.Call.CreateInstance
    """
    """

    InvokeMetaMethod: ... = QMetaObject.Call.InvokeMetaMethod
    """
    """

    QueryPropertyDesignable: ...
    """
    QMetaObject.Call.QueryProperty...
    """

    QueryPropertyEditable: ...
    """
    QMetaObject.Call.QueryPropertyEd...
    """

    QueryPropertyScriptable: ...
    """
    QMetaObject.Call.QueryProperty...
    """

    QueryPropertyStored: ...
    """
    QMetaObject.Call.QueryPropertyStor...
    """

    QueryPropertyUser: ... = QMetaObject.Call.QueryPropertyUser
    """
    """

    ReadProperty: ... = QMetaObject.Call.ReadProperty
    """
    """

    ResetProperty: ... = QMetaObject.Call.ResetProperty
    """
    """

    WriteProperty: ... = QMetaObject.Call.WriteProperty
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def checkConnectArgs(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def connectSlotsByName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def disconnect(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def invokeMethod(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def normalizedSignature(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def normalizedType(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def cast(self, *args, **kwargs):
        """ """
        ...
    def classInfo(self, *args, **kwargs):
        """ """
        ...
    def classInfoCount(self, *args, **kwargs):
        """ """
        ...
    def classInfoOffset(self, *args, **kwargs):
        """ """
        ...
    def className(self, *args, **kwargs):
        """ """
        ...
    def constructor(self, *args, **kwargs):
        """ """
        ...
    def constructorCount(self, *args, **kwargs):
        """ """
        ...
    def enumerator(self, *args, **kwargs):
        """ """
        ...
    def enumeratorCount(self, *args, **kwargs):
        """ """
        ...
    def enumeratorOffset(self, *args, **kwargs):
        """ """
        ...
    def indexOfClassInfo(self, *args, **kwargs):
        """ """
        ...
    def indexOfConstructor(self, *args, **kwargs):
        """ """
        ...
    def indexOfEnumerator(self, *args, **kwargs):
        """ """
        ...
    def indexOfMethod(self, *args, **kwargs):
        """ """
        ...
    def indexOfProperty(self, *args, **kwargs):
        """ """
        ...
    def indexOfSignal(self, *args, **kwargs):
        """ """
        ...
    def indexOfSlot(self, *args, **kwargs):
        """ """
        ...
    def method(self, *args, **kwargs):
        """ """
        ...
    def methodCount(self, *args, **kwargs):
        """ """
        ...
    def methodOffset(self, *args, **kwargs):
        """ """
        ...
    def newInstance(self, *args, **kwargs):
        """ """
        ...
    def property(self, *args, **kwargs):
        """ """
        ...
    def propertyCount(self, *args, **kwargs):
        """ """
        ...
    def propertyOffset(self, *args, **kwargs):
        """ """
        ...
    def superClass(self, *args, **kwargs):
        """ """
        ...
    def userProperty(self, *args, **kwargs):
        """ """
        ...
    ...

class QMetaProperty(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def enumerator(self, *args, **kwargs):
        """ """
        ...
    def hasNotifySignal(self, *args, **kwargs):
        """ """
        ...
    def hasStdCppSet(self, *args, **kwargs):
        """ """
        ...
    def isConstant(self, *args, **kwargs):
        """ """
        ...
    def isDesignable(self, *args, **kwargs):
        """ """
        ...
    def isEditable(self, *args, **kwargs):
        """ """
        ...
    def isEnumType(self, *args, **kwargs):
        """ """
        ...
    def isFinal(self, *args, **kwargs):
        """ """
        ...
    def isFlagType(self, *args, **kwargs):
        """ """
        ...
    def isReadable(self, *args, **kwargs):
        """ """
        ...
    def isResettable(self, *args, **kwargs):
        """ """
        ...
    def isScriptable(self, *args, **kwargs):
        """ """
        ...
    def isStored(self, *args, **kwargs):
        """ """
        ...
    def isUser(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def isWritable(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def notifySignal(self, *args, **kwargs):
        """ """
        ...
    def notifySignalIndex(self, *args, **kwargs):
        """ """
        ...
    def propertyIndex(self, *args, **kwargs):
        """ """
        ...
    def read(self, *args, **kwargs):
        """ """
        ...
    def reset(self, *args, **kwargs):
        """ """
        ...
    def revision(self, *args, **kwargs):
        """ """
        ...
    def type(self, *args, **kwargs):
        """ """
        ...
    def typeName(self, *args, **kwargs):
        """ """
        ...
    def userType(self, *args, **kwargs):
        """ """
        ...
    def write(self, *args, **kwargs):
        """ """
        ...
    ...

class QMimeData(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def colorData(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def formats(self, *args, **kwargs):
        """ """
        ...
    def hasColor(self, *args, **kwargs):
        """ """
        ...
    def hasFormat(self, *args, **kwargs):
        """ """
        ...
    def hasHtml(self, *args, **kwargs):
        """ """
        ...
    def hasImage(self, *args, **kwargs):
        """ """
        ...
    def hasStr(self, *args, **kwargs):
        """ """
        ...
    def hasUrls(self, *args, **kwargs):
        """ """
        ...
    def html(self, *args, **kwargs):
        """ """
        ...
    def imageData(self, *args, **kwargs):
        """ """
        ...
    def removeFormat(self, *args, **kwargs):
        """ """
        ...
    def retrieveData(self, *args, **kwargs):
        """ """
        ...
    def setColorData(self, *args, **kwargs):
        """ """
        ...
    def setData(self, *args, **kwargs):
        """ """
        ...
    def setHtml(self, *args, **kwargs):
        """ """
        ...
    def setImageData(self, *args, **kwargs):
        """ """
        ...
    def setStr(self, *args, **kwargs):
        """ """
        ...
    def setUrls(self, *args, **kwargs):
        """ """
        ...
    def text(self, *args, **kwargs):
        """ """
        ...
    def urls(self, *args, **kwargs):
        """ """
        ...
    ...

class QModelIndex(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def child(self, *args, **kwargs):
        """ """
        ...
    def column(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def flags(self, *args, **kwargs):
        """ """
        ...
    def internalId(self, *args, **kwargs):
        """ """
        ...
    def internalPointer(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def model(self, *args, **kwargs):
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    def row(self, *args, **kwargs):
        """ """
        ...
    def sibling(self, *args, **kwargs):
        """ """
        ...
    ...

class QMutex(Shiboken.Object):
    NonRecursive: ... = QMutex.RecursionMode.NonRecursive
    """
    """

    RecursionMode: ...
    """
    <type 'QMutex.RecursionMode'>
    """

    Recursive: ... = QMutex.RecursionMode.Recursive
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def lock(self, *args, **kwargs):
        """ """
        ...
    def lockInline(self, *args, **kwargs):
        """ """
        ...
    def tryLock(self, *args, **kwargs):
        """ """
        ...
    def tryLockInline(self, *args, **kwargs):
        """ """
        ...
    def unlock(self, *args, **kwargs):
        """ """
        ...
    def unlockInline(self, *args, **kwargs):
        """ """
        ...
    ...

class QMutexLocker(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __enter__(self, *args, **kwargs):
        """ """
        ...
    def __exit__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def mutex(self, *args, **kwargs):
        """ """
        ...
    def relock(self, *args, **kwargs):
        """ """
        ...
    def unlock(self, *args, **kwargs):
        """ """
        ...
    ...

class QObject(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    destroyed: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def connect(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def disconnect(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def registerUserData(*args, **kwargs):
        """ """
        ...
    def __delattr__(self, *args, **kwargs):
        """
        x.__delattr__('name') <==> del x.name
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __setattr__(self, *args, **kwargs):
        """
        x.__setattr__('name', value) <==> x.name = value
        """
        ...
    def blockSignals(self, *args, **kwargs):
        """ """
        ...
    def childEvent(self, *args, **kwargs):
        """ """
        ...
    def children(self, *args, **kwargs):
        """ """
        ...
    def connectNotify(self, *args, **kwargs):
        """ """
        ...
    def customEvent(self, *args, **kwargs):
        """ """
        ...
    def deleteLater(self) -> None: ...
    def disconnectNotify(self, *args, **kwargs):
        """ """
        ...
    def dumpObjectInfo(self, *args, **kwargs):
        """ """
        ...
    def dumpObjectTree(self, *args, **kwargs):
        """ """
        ...
    def dynamicPropertyNames(self, *args, **kwargs):
        """ """
        ...
    def emit(self, *args, **kwargs):
        """ """
        ...
    def event(self, event: QEvent) -> bool:
        """ """
        ...
    def eventFilter(self, *args, **kwargs):
        """ """
        ...
    T = TypeVar("T", bound=type)
    def findChild(self, type: Type[T], name: Str = "", /) -> Optional[T]:
        """ """
        ...
    def findChildren(self, *args, **kwargs):
        """ """
        ...
    def inherits(self, *args, **kwargs):
        """ """
        ...
    def installEventFilter(self, *args, **kwargs):
        """ """
        ...
    def isWidgetType(self, *args, **kwargs):
        """ """
        ...
    def killTimer(self, *args, **kwargs):
        """ """
        ...
    def metaObject(self, *args, **kwargs):
        """ """
        ...
    def moveToThread(self, targetThread: QThread, /) -> None: ...
    def objectName(self) -> Str:
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    def property(self, *args, **kwargs):
        """ """
        ...
    def receivers(self, *args, **kwargs):
        """ """
        ...
    def removeEventFilter(self, *args, **kwargs):
        """ """
        ...
    def sender(self, *args, **kwargs):
        """ """
        ...
    def senderSignalIndex(self, *args, **kwargs):
        """ """
        ...
    def setObjectName(self, name: Str) -> None:
        """ """
        ...
    def setParent(self, *args, **kwargs):
        """ """
        ...
    def setProperty(self, *args, **kwargs):
        """ """
        ...
    def signalsBlocked(self, *args, **kwargs):
        """ """
        ...
    def startTimer(self, *args, **kwargs):
        """ """
        ...
    def thread(self) -> QThread:
        """ """
        ...
    def timerEvent(self, *args, **kwargs):
        """ """
        ...
    def tr(self, *args, **kwargs):
        """ """
        ...
    def trUtf8(self, *args, **kwargs):
        """ """
        ...
    ...

class QParallelAnimationGroup(QAnimationGroup):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def duration(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def updateCurrentTime(self, *args, **kwargs):
        """ """
        ...
    def updateDirection(self, *args, **kwargs):
        """ """
        ...
    def updateState(self, *args, **kwargs):
        """ """
        ...
    ...

class QPauseAnimation(QAbstractAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def duration(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def setDuration(self, *args, **kwargs):
        """ """
        ...
    def updateCurrentTime(self, *args, **kwargs):
        """ """
        ...
    ...

class QPersistentModelIndex(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def child(self, *args, **kwargs):
        """ """
        ...
    def column(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def flags(self, *args, **kwargs):
        """ """
        ...
    def internalId(self, *args, **kwargs):
        """ """
        ...
    def internalPointer(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def model(self, *args, **kwargs):
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    def row(self, *args, **kwargs):
        """ """
        ...
    def sibling(self, *args, **kwargs):
        """ """
        ...
    ...

class QPluginLoader(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def staticInstances(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def fileName(self, *args, **kwargs):
        """ """
        ...
    def instance(self, *args, **kwargs):
        """ """
        ...
    def isLoaded(self, *args, **kwargs):
        """ """
        ...
    def load(self, *args, **kwargs):
        """ """
        ...
    def setFileName(self, *args, **kwargs):
        """ """
        ...
    def unload(self, *args, **kwargs):
        """ """
        ...
    ...

class QPoint(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def manhattanLength(self, *args, **kwargs):
        """ """
        ...
    def setX(self, *args, **kwargs):
        """ """
        ...
    def setY(self, *args, **kwargs):
        """ """
        ...
    def toTuple(self, *args, **kwargs):
        """ """
        ...
    def x(self, *args, **kwargs):
        """ """
        ...
    def y(self, *args, **kwargs):
        """ """
        ...
    ...

class QPointF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(self, *args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def manhattanLength(self, *args, **kwargs):
        """ """
        ...
    def setX(self, *args, **kwargs):
        """ """
        ...
    def setY(self, *args, **kwargs):
        """ """
        ...
    def toPoint(self, *args, **kwargs):
        """ """
        ...
    def toTuple(self, *args, **kwargs):
        """ """
        ...
    def x(self, *args, **kwargs):
        """ """
        ...
    def y(self, *args, **kwargs):
        """ """
        ...
    ...

class QProcess(QIODevice):
    CrashExit: ... = QProcess.ExitStatus.CrashExit
    """
    """

    Crashed: ... = QProcess.ProcessError.Crashed
    """
    """

    ExitStatus: ...
    """
    <type 'QProcess.ExitStatus'>
    """

    FailedToStart: ... = QProcess.ProcessError.FailedToStart
    """
    """

    ForwardedChannels: ...
    """
    QProcess.ProcessChannelMode.Forwarde...
    """

    MergedChannels: ...
    """
    QProcess.ProcessChannelMode.MergedChann...
    """

    NormalExit: ... = QProcess.ExitStatus.NormalExit
    """
    """

    NotRunning: ... = QProcess.ProcessState.NotRunning
    """
    """

    ProcessChannel: ...
    """
    <type 'QProcess.ProcessChannel'>
    """

    ProcessChannelMode: ...
    """
    <type 'QProcess.ProcessChannelMode'...
    """

    ProcessError: ...
    """
    <type 'QProcess.ProcessError'>
    """

    ProcessState: ...
    """
    <type 'QProcess.ProcessState'>
    """

    ReadError: ... = QProcess.ProcessError.ReadError
    """
    """

    Running: ... = QProcess.ProcessState.Running
    """
    """

    SeparateChannels: ...
    """
    QProcess.ProcessChannelMode.SeparateC...
    """

    StandardError: ... = QProcess.ProcessChannel.StandardError
    """
    """

    StandardOutput: ... = QProcess.ProcessChannel.StandardOutput
    """
    """

    Starting: ... = QProcess.ProcessState.Starting
    """
    """

    Timedout: ... = QProcess.ProcessError.Timedout
    """
    """

    UnknownError: ... = QProcess.ProcessError.UnknownError
    """
    """

    WriteError: ... = QProcess.ProcessError.WriteError
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    error: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    readyReadStandardError: ...
    """
    Signal
    """

    readyReadStandardOutput: ...
    """
    Signal
    """

    started: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def execute(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def startDetached(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def systemEnvironment(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def bytesAvailable(self, *args, **kwargs):
        """ """
        ...
    def bytesToWrite(self, *args, **kwargs):
        """ """
        ...
    def canReadLine(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def closeReadChannel(self, *args, **kwargs):
        """ """
        ...
    def closeWriteChannel(self, *args, **kwargs):
        """ """
        ...
    def environment(self, *args, **kwargs):
        """ """
        ...
    def exitCode(self, *args, **kwargs):
        """ """
        ...
    def exitStatus(self, *args, **kwargs):
        """ """
        ...
    def isSequential(self, *args, **kwargs):
        """ """
        ...
    def kill(self, *args, **kwargs):
        """ """
        ...
    def pid(self, *args, **kwargs):
        """ """
        ...
    def processChannelMode(self, *args, **kwargs):
        """ """
        ...
    def processEnvironment(self, *args, **kwargs):
        """ """
        ...
    def readAllStandardError(self, *args, **kwargs):
        """ """
        ...
    def readAllStandardOutput(self, *args, **kwargs):
        """ """
        ...
    def readChannel(self, *args, **kwargs):
        """ """
        ...
    def readData(self, *args, **kwargs):
        """ """
        ...
    def setEnvironment(self, *args, **kwargs):
        """ """
        ...
    def setProcessChannelMode(self, *args, **kwargs):
        """ """
        ...
    def setProcessEnvironment(self, *args, **kwargs):
        """ """
        ...
    def setProcessState(self, *args, **kwargs):
        """ """
        ...
    def setReadChannel(self, *args, **kwargs):
        """ """
        ...
    def setStandardErrorFile(self, *args, **kwargs):
        """ """
        ...
    def setStandardInputFile(self, *args, **kwargs):
        """ """
        ...
    def setStandardOutputFile(self, *args, **kwargs):
        """ """
        ...
    def setStandardOutputProcess(self, *args, **kwargs):
        """ """
        ...
    def setWorkingDirectory(self, *args, **kwargs):
        """ """
        ...
    def setupChildProcess(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def state(self, *args, **kwargs):
        """ """
        ...
    def terminate(self, *args, **kwargs):
        """ """
        ...
    def waitForBytesWritten(self, *args, **kwargs):
        """ """
        ...
    def waitForFinished(self, *args, **kwargs):
        """ """
        ...
    def waitForReadyRead(self, *args, **kwargs):
        """ """
        ...
    def waitForStarted(self, *args, **kwargs):
        """ """
        ...
    def workingDirectory(self, *args, **kwargs):
        """ """
        ...
    def writeData(self, *args, **kwargs):
        """ """
        ...
    ...

class QProcessEnvironment(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def systemEnvironment(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def insert(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def keys(self, *args, **kwargs):
        """ """
        ...
    def remove(self, *args, **kwargs):
        """ """
        ...
    def toStringList(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QPropertyAnimation(QVariantAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def propertyName(self, *args, **kwargs):
        """ """
        ...
    def setPropertyName(self, *args, **kwargs):
        """ """
        ...
    def setTargetObject(self, *args, **kwargs):
        """ """
        ...
    def targetObject(self, *args, **kwargs):
        """ """
        ...
    def updateCurrentValue(self, *args, **kwargs):
        """ """
        ...
    def updateState(self, *args, **kwargs):
        """ """
        ...
    ...

class QReadLocker(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __enter__(self, *args, **kwargs):
        """ """
        ...
    def __exit__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def readWriteLock(self, *args, **kwargs):
        """ """
        ...
    def relock(self, *args, **kwargs):
        """ """
        ...
    def unlock(self, *args, **kwargs):
        """ """
        ...
    ...

class QReadWriteLock(Shiboken.Object):
    NonRecursive: ... = QReadWriteLock.RecursionMode.NonRecursive
    """
    """

    RecursionMode: ...
    """
    <type 'QReadWriteLock.RecursionMode'>
    """

    Recursive: ... = QReadWriteLock.RecursionMode.Recursive
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def lockForRead(self, *args, **kwargs):
        """ """
        ...
    def lockForWrite(self, *args, **kwargs):
        """ """
        ...
    def tryLockForRead(self, *args, **kwargs):
        """ """
        ...
    def tryLockForWrite(self, *args, **kwargs):
        """ """
        ...
    def unlock(self, *args, **kwargs):
        """ """
        ...
    ...

class QRect(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __iand__(self, *args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...
    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...
    def adjust(self, *args, **kwargs):
        """ """
        ...
    def adjusted(self, *args, **kwargs):
        """ """
        ...
    def bottom(self, *args, **kwargs):
        """ """
        ...
    def bottomLeft(self, *args, **kwargs):
        """ """
        ...
    def bottomRight(self, *args, **kwargs):
        """ """
        ...
    def center(self) -> QPoint:
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def getCoords(self, *args, **kwargs):
        """ """
        ...
    def getRect(self, *args, **kwargs):
        """ """
        ...
    def height(self, *args, **kwargs):
        """ """
        ...
    def intersect(self, *args, **kwargs):
        """ """
        ...
    def intersected(self, *args, **kwargs):
        """ """
        ...
    def intersects(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def left(self, *args, **kwargs):
        """ """
        ...
    def moveBottom(self, *args, **kwargs):
        """ """
        ...
    def moveBottomLeft(self, *args, **kwargs):
        """ """
        ...
    def moveBottomRight(self, *args, **kwargs):
        """ """
        ...
    def moveCenter(self, position: QPoint,/) -> None:
        """ """
        ...
    def moveLeft(self, *args, **kwargs):
        """ """
        ...
    def moveRight(self, *args, **kwargs):
        """ """
        ...
    def moveTo(self, *args, **kwargs):
        """ """
        ...
    def moveTop(self, *args, **kwargs):
        """ """
        ...
    def moveTopLeft(self, *args, **kwargs):
        """ """
        ...
    def moveTopRight(self, *args, **kwargs):
        """ """
        ...
    def normalized(self, *args, **kwargs):
        """ """
        ...
    def right(self, *args, **kwargs):
        """ """
        ...
    def setBottom(self, *args, **kwargs):
        """ """
        ...
    def setBottomLeft(self, *args, **kwargs):
        """ """
        ...
    def setBottomRight(self, *args, **kwargs):
        """ """
        ...
    def setCoords(self, *args, **kwargs):
        """ """
        ...
    def setHeight(self, *args, **kwargs):
        """ """
        ...
    def setLeft(self, *args, **kwargs):
        """ """
        ...
    def setRect(self, *args, **kwargs):
        """ """
        ...
    def setRight(self, *args, **kwargs):
        """ """
        ...
    def setSize(self, *args, **kwargs):
        """ """
        ...
    def setTop(self, *args, **kwargs):
        """ """
        ...
    def setTopLeft(self, *args, **kwargs):
        """ """
        ...
    def setTopRight(self, *args, **kwargs):
        """ """
        ...
    def setWidth(self, *args, **kwargs):
        """ """
        ...
    def setX(self, *args, **kwargs):
        """ """
        ...
    def setY(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def top(self, *args, **kwargs):
        """ """
        ...
    def topLeft(self, *args, **kwargs):
        """ """
        ...
    def topRight(self, *args, **kwargs):
        """ """
        ...
    def translate(self, *args, **kwargs):
        """ """
        ...
    def translated(self, *args, **kwargs):
        """ """
        ...
    def unite(self, *args, **kwargs):
        """ """
        ...
    def united(self, *args, **kwargs):
        """ """
        ...
    def width(self, *args, **kwargs):
        """ """
        ...
    def x(self, *args, **kwargs):
        """ """
        ...
    def y(self, *args, **kwargs):
        """ """
        ...
    ...

class QRectF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iand__(self, *args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __ior__(self, *args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...
    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...
    def adjust(self, *args, **kwargs):
        """ """
        ...
    def adjusted(self, *args, **kwargs):
        """ """
        ...
    def bottom(self, *args, **kwargs):
        """ """
        ...
    def bottomLeft(self, *args, **kwargs):
        """ """
        ...
    def bottomRight(self, *args, **kwargs):
        """ """
        ...
    def center(self, *args, **kwargs):
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def getCoords(self, *args, **kwargs):
        """ """
        ...
    def getRect(self, *args, **kwargs):
        """ """
        ...
    def height(self, *args, **kwargs):
        """ """
        ...
    def intersect(self, *args, **kwargs):
        """ """
        ...
    def intersected(self, *args, **kwargs):
        """ """
        ...
    def intersects(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def left(self, *args, **kwargs):
        """ """
        ...
    def moveBottom(self, *args, **kwargs):
        """ """
        ...
    def moveBottomLeft(self, *args, **kwargs):
        """ """
        ...
    def moveBottomRight(self, *args, **kwargs):
        """ """
        ...
    def moveCenter(self, *args, **kwargs):
        """ """
        ...
    def moveLeft(self, *args, **kwargs):
        """ """
        ...
    def moveRight(self, *args, **kwargs):
        """ """
        ...
    def moveTo(self, *args, **kwargs):
        """ """
        ...
    def moveTop(self, *args, **kwargs):
        """ """
        ...
    def moveTopLeft(self, *args, **kwargs):
        """ """
        ...
    def moveTopRight(self, *args, **kwargs):
        """ """
        ...
    def normalized(self, *args, **kwargs):
        """ """
        ...
    def right(self, *args, **kwargs):
        """ """
        ...
    def setBottom(self, *args, **kwargs):
        """ """
        ...
    def setBottomLeft(self, *args, **kwargs):
        """ """
        ...
    def setBottomRight(self, *args, **kwargs):
        """ """
        ...
    def setCoords(self, *args, **kwargs):
        """ """
        ...
    def setHeight(self, *args, **kwargs):
        """ """
        ...
    def setLeft(self, *args, **kwargs):
        """ """
        ...
    def setRect(self, *args, **kwargs):
        """ """
        ...
    def setRight(self, *args, **kwargs):
        """ """
        ...
    def setSize(self, *args, **kwargs):
        """ """
        ...
    def setTop(self, *args, **kwargs):
        """ """
        ...
    def setTopLeft(self, *args, **kwargs):
        """ """
        ...
    def setTopRight(self, *args, **kwargs):
        """ """
        ...
    def setWidth(self, *args, **kwargs):
        """ """
        ...
    def setX(self, *args, **kwargs):
        """ """
        ...
    def setY(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def toAlignedRect(self, *args, **kwargs):
        """ """
        ...
    def toRect(self, *args, **kwargs):
        """ """
        ...
    def top(self, *args, **kwargs):
        """ """
        ...
    def topLeft(self, *args, **kwargs):
        """ """
        ...
    def topRight(self, *args, **kwargs):
        """ """
        ...
    def translate(self, *args, **kwargs):
        """ """
        ...
    def translated(self, *args, **kwargs):
        """ """
        ...
    def unite(self, *args, **kwargs):
        """ """
        ...
    def united(self, *args, **kwargs):
        """ """
        ...
    def width(self, *args, **kwargs):
        """ """
        ...
    def x(self, *args, **kwargs):
        """ """
        ...
    def y(self, *args, **kwargs):
        """ """
        ...
    ...

class QRegExp(Shiboken.Object):
    CaretAtOffset: ... = QRegExp.CaretMode.CaretAtOffset
    """
    """

    CaretAtZero: ... = QRegExp.CaretMode.CaretAtZero
    """
    """

    CaretMode: ...
    """
    <type 'QRegExp.CaretMode'>
    """

    CaretWontMatch: ... = QRegExp.CaretMode.CaretWontMatch
    """
    """

    FixedString: ... = QRegExp.PatternSyntax.FixedString
    """
    """

    PatternSyntax: ...
    """
    <type 'QRegExp.PatternSyntax'>
    """

    RegExp: ... = QRegExp.PatternSyntax.RegExp
    """
    """

    RegExp2: ... = QRegExp.PatternSyntax.RegExp2
    """
    """

    W3CXmlSchema11: ... = QRegExp.PatternSyntax.W3CXmlSchema11
    """
    """

    Wildcard: ... = QRegExp.PatternSyntax.Wildcard
    """
    """

    WildcardUnix: ... = QRegExp.PatternSyntax.WildcardUnix
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def escape(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def cap(self, *args, **kwargs):
        """ """
        ...
    def captureCount(self, *args, **kwargs):
        """ """
        ...
    def capturedStrs(self, *args, **kwargs):
        """ """
        ...
    def caseSensitivity(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def exactMatch(self, *args, **kwargs):
        """ """
        ...
    def indexIn(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isMinimal(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def lastIndexIn(self, *args, **kwargs):
        """ """
        ...
    def matchedLength(self, *args, **kwargs):
        """ """
        ...
    def numCaptures(self, *args, **kwargs):
        """ """
        ...
    def pattern(self, *args, **kwargs):
        """ """
        ...
    def patternSyntax(self, *args, **kwargs):
        """ """
        ...
    def pos(self, *args, **kwargs):
        """ """
        ...
    def replace(self, *args, **kwargs):
        """ """
        ...
    def setCaseSensitivity(self, *args, **kwargs):
        """ """
        ...
    def setMinimal(self, *args, **kwargs):
        """ """
        ...
    def setPattern(self, *args, **kwargs):
        """ """
        ...
    def setPatternSyntax(self, *args, **kwargs):
        """ """
        ...
    def swap(self, *args, **kwargs):
        """ """
        ...
    ...

class QResource(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def addSearchPath(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def registerResource(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def registerResourceData(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def searchPaths(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def unregisterResource(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def unregisterResourceData(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def absoluteFilePath(self, *args, **kwargs):
        """ """
        ...
    def children(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def fileName(self, *args, **kwargs):
        """ """
        ...
    def isCompressed(self, *args, **kwargs):
        """ """
        ...
    def isDir(self, *args, **kwargs):
        """ """
        ...
    def isFile(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def locale(self, *args, **kwargs):
        """ """
        ...
    def setFileName(self, *args, **kwargs):
        """ """
        ...
    def setLocale(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    ...

class QRunnable(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def autoDelete(self, *args, **kwargs):
        """ """
        ...
    def run(self, *args, **kwargs):
        """ """
        ...
    def setAutoDelete(self, *args, **kwargs):
        """ """
        ...
    ...

class QSemaphore(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def acquire(self, *args, **kwargs):
        """ """
        ...
    def available(self, *args, **kwargs):
        """ """
        ...
    def release(self, *args, **kwargs):
        """ """
        ...
    def tryAcquire(self, *args, **kwargs):
        """ """
        ...
    ...

class QSequentialAnimationGroup(QAnimationGroup):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    currentAnimationChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addPause(self, *args, **kwargs):
        """ """
        ...
    def currentAnimation(self, *args, **kwargs):
        """ """
        ...
    def duration(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def insertPause(self, *args, **kwargs):
        """ """
        ...
    def updateCurrentTime(self, *args, **kwargs):
        """ """
        ...
    def updateDirection(self, *args, **kwargs):
        """ """
        ...
    def updateState(self, *args, **kwargs):
        """ """
        ...
    ...

class QSettings(QObject):
    AccessError: ... = QSettings.Status.AccessError
    """
    """

    CustomFormat1: ... = QSettings.Format.CustomFormat1
    """
    """

    CustomFormat10: ... = QSettings.Format.CustomFormat10
    """
    """

    CustomFormat11: ... = QSettings.Format.CustomFormat11
    """
    """

    CustomFormat12: ... = QSettings.Format.CustomFormat12
    """
    """

    CustomFormat13: ... = QSettings.Format.CustomFormat13
    """
    """

    CustomFormat14: ... = QSettings.Format.CustomFormat14
    """
    """

    CustomFormat15: ... = QSettings.Format.CustomFormat15
    """
    """

    CustomFormat16: ... = QSettings.Format.CustomFormat16
    """
    """

    CustomFormat2: ... = QSettings.Format.CustomFormat2
    """
    """

    CustomFormat3: ... = QSettings.Format.CustomFormat3
    """
    """

    CustomFormat4: ... = QSettings.Format.CustomFormat4
    """
    """

    CustomFormat5: ... = QSettings.Format.CustomFormat5
    """
    """

    CustomFormat6: ... = QSettings.Format.CustomFormat6
    """
    """

    CustomFormat7: ... = QSettings.Format.CustomFormat7
    """
    """

    CustomFormat8: ... = QSettings.Format.CustomFormat8
    """
    """

    CustomFormat9: ... = QSettings.Format.CustomFormat9
    """
    """

    Format: ...
    """
    <type 'QSettings.Format'>
    """

    FormatError: ... = QSettings.Status.FormatError
    """
    """

    IniFormat: ... = QSettings.Format.IniFormat
    """
    """

    InvalidFormat: ... = QSettings.Format.InvalidFormat
    """
    """

    NativeFormat: ... = QSettings.Format.NativeFormat
    """
    """

    NoError: ... = QSettings.Status.NoError
    """
    """

    Scope: ...
    """
    <type 'QSettings.Scope'>
    """

    Status: ...
    """
    <type 'QSettings.Status'>
    """

    SystemScope: ... = QSettings.Scope.SystemScope
    """
    """

    UserScope: ... = QSettings.Scope.UserScope
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def defaultFormat(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setDefaultFormat(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setPath(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def allKeys(self, *args, **kwargs):
        """ """
        ...
    def applicationName(self, *args, **kwargs):
        """ """
        ...
    def beginGroup(self, *args, **kwargs):
        """ """
        ...
    def beginReadArray(self, *args, **kwargs):
        """ """
        ...
    def beginWriteArray(self, *args, **kwargs):
        """ """
        ...
    def childGroups(self, *args, **kwargs):
        """ """
        ...
    def childKeys(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def endArray(self, *args, **kwargs):
        """ """
        ...
    def endGroup(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def fallbacksEnabled(self, *args, **kwargs):
        """ """
        ...
    def fileName(self, *args, **kwargs):
        """ """
        ...
    def format(self, *args, **kwargs):
        """ """
        ...
    def group(self, *args, **kwargs):
        """ """
        ...
    def iniCodec(self, *args, **kwargs):
        """ """
        ...
    def isWritable(self, *args, **kwargs):
        """ """
        ...
    def organizationName(self, *args, **kwargs):
        """ """
        ...
    def remove(self, *args, **kwargs):
        """ """
        ...
    def scope(self, *args, **kwargs):
        """ """
        ...
    def setArrayIndex(self, *args, **kwargs):
        """ """
        ...
    def setFallbacksEnabled(self, *args, **kwargs):
        """ """
        ...
    def setIniCodec(self, *args, **kwargs):
        """ """
        ...
    def setValue(self, *args, **kwargs):
        """ """
        ...
    def status(self, *args, **kwargs):
        """ """
        ...
    def sync(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QSignalMapper(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    mapped: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def map(self, *args, **kwargs):
        """ """
        ...
    def mapping(self, *args, **kwargs):
        """ """
        ...
    def removeMappings(self, *args, **kwargs):
        """ """
        ...
    def setMapping(self, *args, **kwargs):
        """ """
        ...
    ...

class QSignalTransition(QAbstractTransition):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def eventTest(self, *args, **kwargs):
        """ """
        ...
    def onTransition(self, *args, **kwargs):
        """ """
        ...
    def senderObject(self, *args, **kwargs):
        """ """
        ...
    def setSenderObject(self, *args, **kwargs):
        """ """
        ...
    def setSignal(self, *args, **kwargs):
        """ """
        ...
    def signal(self, *args, **kwargs):
        """ """
        ...
    ...

class QSize(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def boundedTo(self, *args, **kwargs):
        """ """
        ...
    def expandedTo(self, *args, **kwargs):
        """ """
        ...
    def height(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def scale(self, *args, **kwargs):
        """ """
        ...
    def setHeight(self, *args, **kwargs):
        """ """
        ...
    def setWidth(self, *args, **kwargs):
        """ """
        ...
    def toTuple(self, *args, **kwargs):
        """ """
        ...
    def transpose(self, *args, **kwargs):
        """ """
        ...
    def width(self, *args, **kwargs):
        """ """
        ...
    ...

class QSizeF(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(self, *args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(self, *args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(self, *args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def boundedTo(self, *args, **kwargs):
        """ """
        ...
    def expandedTo(self, *args, **kwargs):
        """ """
        ...
    def height(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def scale(self, *args, **kwargs):
        """ """
        ...
    def setHeight(self, *args, **kwargs):
        """ """
        ...
    def setWidth(self, *args, **kwargs):
        """ """
        ...
    def toSize(self, *args, **kwargs):
        """ """
        ...
    def toTuple(self, *args, **kwargs):
        """ """
        ...
    def transpose(self, *args, **kwargs):
        """ """
        ...
    def width(self, *args, **kwargs):
        """ """
        ...
    ...

class QSocketNotifier(QObject):
    Exception: ... = QSocketNotifier.Type.Exception
    """
    """

    Read: ... = QSocketNotifier.Type.Read
    """
    """

    Type: ...
    """
    <type 'QSocketNotifier.Type'>
    """

    Write: ... = QSocketNotifier.Type.Write
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    activated: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def isEnabled(self, *args, **kwargs):
        """ """
        ...
    def setEnabled(self, *args, **kwargs):
        """ """
        ...
    def socket(self, *args, **kwargs):
        """ """
        ...
    def type(self, *args, **kwargs):
        """ """
        ...
    ...

class QSortFilterProxyModel(QAbstractProxyModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def buddy(self, *args, **kwargs):
        """ """
        ...
    def canFetchMore(self, *args, **kwargs):
        """ """
        ...
    def columnCount(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def dropMimeData(self, *args, **kwargs):
        """ """
        ...
    def dynamicSortFilter(self, *args, **kwargs):
        """ """
        ...
    def fetchMore(self, *args, **kwargs):
        """ """
        ...
    def filterAcceptsColumn(self, *args, **kwargs):
        """ """
        ...
    def filterAcceptsRow(self, *args, **kwargs):
        """ """
        ...
    def filterCaseSensitivity(self, *args, **kwargs):
        """ """
        ...
    def filterKeyColumn(self, *args, **kwargs):
        """ """
        ...
    def filterRegExp(self, *args, **kwargs):
        """ """
        ...
    def filterRole(self, *args, **kwargs):
        """ """
        ...
    def flags(self, *args, **kwargs):
        """ """
        ...
    def hasChildren(self, *args, **kwargs):
        """ """
        ...
    def headerData(self, *args, **kwargs):
        """ """
        ...
    def index(self, *args, **kwargs):
        """ """
        ...
    def insertColumns(self, *args, **kwargs):
        """ """
        ...
    def insertRows(self, *args, **kwargs):
        """ """
        ...
    def invalidate(self, *args, **kwargs):
        """ """
        ...
    def invalidateFilter(self, *args, **kwargs):
        """ """
        ...
    def isSortLocaleAware(self, *args, **kwargs):
        """ """
        ...
    def lessThan(self, *args, **kwargs):
        """ """
        ...
    def mapFromSource(self, *args, **kwargs):
        """ """
        ...
    def mapSelectionFromSource(self, *args, **kwargs):
        """ """
        ...
    def mapSelectionToSource(self, *args, **kwargs):
        """ """
        ...
    def mapToSource(self, *args, **kwargs):
        """ """
        ...
    def match(self, *args, **kwargs):
        """ """
        ...
    def mimeData(self, *args, **kwargs):
        """ """
        ...
    def mimeTypes(self, *args, **kwargs):
        """ """
        ...
    def parent(self, *args, **kwargs):
        """ """
        ...
    def removeColumns(self, *args, **kwargs):
        """ """
        ...
    def removeRows(self, *args, **kwargs):
        """ """
        ...
    def rowCount(self, *args, **kwargs):
        """ """
        ...
    def setData(self, *args, **kwargs):
        """ """
        ...
    def setDynamicSortFilter(self, *args, **kwargs):
        """ """
        ...
    def setFilterCaseSensitivity(self, *args, **kwargs):
        """ """
        ...
    def setFilterFixedString(self, *args, **kwargs):
        """ """
        ...
    def setFilterKeyColumn(self, *args, **kwargs):
        """ """
        ...
    def setFilterRegExp(self, *args, **kwargs):
        """ """
        ...
    def setFilterRole(self, *args, **kwargs):
        """ """
        ...
    def setFilterWildcard(self, *args, **kwargs):
        """ """
        ...
    def setHeaderData(self, *args, **kwargs):
        """ """
        ...
    def setSortCaseSensitivity(self, *args, **kwargs):
        """ """
        ...
    def setSortLocaleAware(self, *args, **kwargs):
        """ """
        ...
    def setSortRole(self, *args, **kwargs):
        """ """
        ...
    def setSourceModel(self, *args, **kwargs):
        """ """
        ...
    def sort(self, *args, **kwargs):
        """ """
        ...
    def sortCaseSensitivity(self, *args, **kwargs):
        """ """
        ...
    def sortColumn(self, *args, **kwargs):
        """ """
        ...
    def sortOrder(self, *args, **kwargs):
        """ """
        ...
    def sortRole(self, *args, **kwargs):
        """ """
        ...
    def span(self, *args, **kwargs):
        """ """
        ...
    def supportedDropActions(self, *args, **kwargs):
        """ """
        ...
    ...

class QState(QAbstractState):
    ChildMode: ...
    """
    <type 'QState.ChildMode'>
    """

    ExclusiveStates: ... = QState.ChildMode.ExclusiveStates
    """
    """

    ParallelStates: ... = QState.ChildMode.ParallelStates
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    finished: ...
    """
    Signal
    """

    propertiesAssigned: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addTransition(self, *args, **kwargs):
        """ """
        ...
    def assignProperty(self, *args, **kwargs):
        """ """
        ...
    def childMode(self, *args, **kwargs):
        """ """
        ...
    def errorState(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def initialState(self, *args, **kwargs):
        """ """
        ...
    def onEntry(self, *args, **kwargs):
        """ """
        ...
    def onExit(self, *args, **kwargs):
        """ """
        ...
    def removeTransition(self, *args, **kwargs):
        """ """
        ...
    def setChildMode(self, *args, **kwargs):
        """ """
        ...
    def setErrorState(self, *args, **kwargs):
        """ """
        ...
    def setInitialState(self, *args, **kwargs):
        """ """
        ...
    def transitions(self, *args, **kwargs):
        """ """
        ...
    ...

class QStateMachine(QState):
    DontRestoreProperties: ...
    """
    QStateMachine.RestorePolicy.Dont...
    """

    Error: ...
    """
    <type 'QStateMachine.Error'>
    """

    EventPriority: ...
    """
    <type 'QStateMachine.EventPriority'>
    """

    HighPriority: ... = QStateMachine.EventPriority.HighPriority
    """
    """

    NoCommonAncestorForTransitionError: ...
    """
    QStateMachine.Error...
    """

    NoDefaultStateInHistoryStateError: ...
    """
    QStateMachine.Error....
    """

    NoError: ... = QStateMachine.Error.NoError
    """
    """

    NoInitialStateError: ...
    """
    QStateMachine.Error.NoInitialState...
    """

    NormalPriority: ...
    """
    QStateMachine.EventPriority.NormalPrior...
    """

    RestorePolicy: ...
    """
    <type 'QStateMachine.RestorePolicy'>
    """

    RestoreProperties: ...
    """
    QStateMachine.RestorePolicy.RestoreP...
    """

    SignalEvent: ...
    """
    <type 'QStateMachine.SignalEvent'>
    """

    WrappedEvent: ...
    """
    <type 'QStateMachine.WrappedEvent'>
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    started: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """

    stopped: ...
    """
    Signal
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addDefaultAnimation(self, *args, **kwargs):
        """ """
        ...
    def addState(self, *args, **kwargs):
        """ """
        ...
    def beginMicrostep(self, *args, **kwargs):
        """ """
        ...
    def beginSelectTransitions(self, *args, **kwargs):
        """ """
        ...
    def cancelDelayedEvent(self, *args, **kwargs):
        """ """
        ...
    def clearError(self, *args, **kwargs):
        """ """
        ...
    def configuration(self, *args, **kwargs):
        """ """
        ...
    def defaultAnimations(self, *args, **kwargs):
        """ """
        ...
    def endMicrostep(self, *args, **kwargs):
        """ """
        ...
    def endSelectTransitions(self, *args, **kwargs):
        """ """
        ...
    def error(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def eventFilter(self, *args, **kwargs):
        """ """
        ...
    def globalRestorePolicy(self, *args, **kwargs):
        """ """
        ...
    def isAnimated(self, *args, **kwargs):
        """ """
        ...
    def isRunning(self, *args, **kwargs):
        """ """
        ...
    def onEntry(self, *args, **kwargs):
        """ """
        ...
    def onExit(self, *args, **kwargs):
        """ """
        ...
    def postDelayedEvent(self, *args, **kwargs):
        """ """
        ...
    def postEvent(self, *args, **kwargs):
        """ """
        ...
    def removeDefaultAnimation(self, *args, **kwargs):
        """ """
        ...
    def removeState(self, *args, **kwargs):
        """ """
        ...
    def setAnimated(self, *args, **kwargs):
        """ """
        ...
    def setGlobalRestorePolicy(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def stop(self, *args, **kwargs):
        """ """
        ...
    ...

class QStringListModel(QAbstractListModel):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def flags(self, *args, **kwargs):
        """ """
        ...
    def insertRows(self, *args, **kwargs):
        """ """
        ...
    def removeRows(self, *args, **kwargs):
        """ """
        ...
    def rowCount(self, *args, **kwargs):
        """ """
        ...
    def setData(self, *args, **kwargs):
        """ """
        ...
    def setStringList(self, *args, **kwargs):
        """ """
        ...
    def sort(self, *args, **kwargs):
        """ """
        ...
    def stringList(self, *args, **kwargs):
        """ """
        ...
    def supportedDropActions(self, *args, **kwargs):
        """ """
        ...
    ...

class QSysInfo(Shiboken.Object):
    BigEndian: ... = QSysInfo.Endian.BigEndian
    """
    """

    ByteOrder: ... = QSysInfo.Endian.ByteOrder
    """
    """

    Endian: ...
    """
    <type 'QSysInfo.Endian'>
    """

    LittleEndian: ... = QSysInfo.Endian.LittleEndian
    """
    """

    Sizes: ...
    """
    <type 'QSysInfo.Sizes'>
    """

    WordSize: ... = QSysInfo.Sizes.WordSize
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    ...

class QSystemSemaphore(Shiboken.Object):
    AccessMode: ...
    """
    <type 'QSystemSemaphore.AccessMode'>
    """

    AlreadyExists: ...
    """
    QSystemSemaphore.SystemSemaphoreError.Al...
    """

    Create: ... = QSystemSemaphore.AccessMode.Create
    """
    """

    KeyError: ...
    """
    QSystemSemaphore.SystemSemaphoreError.KeyErro...
    """

    NoError: ... = QSystemSemaphore.SystemSemaphoreError.NoError
    """
    """

    NotFound: ...
    """
    QSystemSemaphore.SystemSemaphoreError.NotFoun...
    """

    Open: ... = QSystemSemaphore.AccessMode.Open
    """
    """

    OutOfResources: ...
    """
    QSystemSemaphore.SystemSemaphoreError.O...
    """

    PermissionDenied: ...
    """
    QSystemSemaphore.SystemSemaphoreError...
    """

    SystemSemaphoreError: ...
    """
    <type 'QSystemSemaphore.SystemSem...
    """

    UnknownError: ...
    """
    QSystemSemaphore.SystemSemaphoreError.Unk...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def acquire(self, *args, **kwargs):
        """ """
        ...
    def error(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def key(self, *args, **kwargs):
        """ """
        ...
    def release(self, *args, **kwargs):
        """ """
        ...
    def setKey(self, *args, **kwargs):
        """ """
        ...
    ...

class QTemporaryFile(QFile):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def createLocalFile(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def autoRemove(self, *args, **kwargs):
        """ """
        ...
    def fileEngine(self, *args, **kwargs):
        """ """
        ...
    def fileName(self, *args, **kwargs):
        """ """
        ...
    def fileTemplate(self, *args, **kwargs):
        """ """
        ...
    def open(self, *args, **kwargs):
        """ """
        ...
    def setAutoRemove(self, *args, **kwargs):
        """ """
        ...
    def setFileTemplate(self, *args, **kwargs):
        """ """
        ...
    ...

class QStrBoundaryFinder(Shiboken.Object):
    BoundaryReason: ...
    """
    <type 'QStrBoundaryFinder.BoundaryReas...
    """

    BoundaryReasons: ...
    """
    <type 'BoundaryReasons'>
    """

    BoundaryType: ...
    """
    <type 'QStrBoundaryFinder.BoundaryType'>
    """

    EndWord: ... = QStrBoundaryFinder.BoundaryReason.EndWord
    """
    """

    Grapheme: ... = QStrBoundaryFinder.BoundaryType.Grapheme
    """
    """

    Line: ... = QStrBoundaryFinder.BoundaryType.Line
    """
    """

    NotAtBoundary: ...
    """
    QStrBoundaryFinder.BoundaryReason.NotAt...
    """

    Sentence: ... = QStrBoundaryFinder.BoundaryType.Sentence
    """
    """

    StartWord: ... = QStrBoundaryFinder.BoundaryReason.StartWord
    """
    """

    Word: ... = QStrBoundaryFinder.BoundaryType.Word
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def boundaryReasons(self, *args, **kwargs):
        """ """
        ...
    def isAtBoundary(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def position(self, *args, **kwargs):
        """ """
        ...
    def setPosition(self, *args, **kwargs):
        """ """
        ...
    def string(self, *args, **kwargs):
        """ """
        ...
    def toEnd(self, *args, **kwargs):
        """ """
        ...
    def toNextBoundary(self, *args, **kwargs):
        """ """
        ...
    def toPreviousBoundary(self, *args, **kwargs):
        """ """
        ...
    def toStart(self, *args, **kwargs):
        """ """
        ...
    def type(self, *args, **kwargs):
        """ """
        ...
    ...

class QStrCodec(Shiboken.Object):
    ConversionFlag: ...
    """
    <type 'QStrCodec.ConversionFlag'>
    """

    ConversionFlags: ...
    """
    <type 'ConversionFlags'>
    """

    ConvertInvalidToNull: ...
    """
    QStrCodec.ConversionFlag.Convert...
    """

    ConverterState: ...
    """
    <type 'QStrCodec.ConverterState'>
    """

    DefaultConversion: ...
    """
    QStrCodec.ConversionFlag.DefaultCon...
    """

    FreeFunction: ... = QStrCodec.ConversionFlag.FreeFunction
    """
    """

    IgnoreHeader: ... = QStrCodec.ConversionFlag.IgnoreHeader
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def availableCodecs(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def availableMibs(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def codecForCStrings(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def codecForHtml(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def codecForLocale(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def codecForMib(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def codecForName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def codecForTr(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def codecForUtfStr(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setCodecForCStrings(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setCodecForLocale(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setCodecForTr(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def aliases(self, *args, **kwargs):
        """ """
        ...
    def canEncode(self, *args, **kwargs):
        """ """
        ...
    def convertToUnicode(self, *args, **kwargs):
        """ """
        ...
    def fromUnicode(self, *args, **kwargs):
        """ """
        ...
    def makeDecoder(self, *args, **kwargs):
        """ """
        ...
    def makeEncoder(self, *args, **kwargs):
        """ """
        ...
    def mibEnum(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def toUnicode(self, *args, **kwargs):
        """ """
        ...
    ...

class QStrDecoder(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def hasFailure(self, *args, **kwargs):
        """ """
        ...
    def toUnicode(self, *args, **kwargs):
        """ """
        ...
    ...

class QStrEncoder(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def fromUnicode(self, *args, **kwargs):
        """ """
        ...
    def hasFailure(self, *args, **kwargs):
        """ """
        ...
    ...

class QStrStream(Shiboken.Object):
    AlignAccountingStyle: ...
    """
    QStrStream.FieldAlignment.AlignA...
    """

    AlignCenter: ... = QStrStream.FieldAlignment.AlignCenter
    """
    """

    AlignLeft: ... = QStrStream.FieldAlignment.AlignLeft
    """
    """

    AlignRight: ... = QStrStream.FieldAlignment.AlignRight
    """
    """

    FieldAlignment: ...
    """
    <type 'QStrStream.FieldAlignment'>
    """

    FixedNotation: ...
    """
    QStrStream.RealNumberNotation.FixedNota...
    """

    ForcePoint: ... = QStrStream.NumberFlag.ForcePoint
    """
    """

    ForceSign: ... = QStrStream.NumberFlag.ForceSign
    """
    """

    NumberFlag: ...
    """
    <type 'QStrStream.NumberFlag'>
    """

    NumberFlags: ...
    """
    <type 'NumberFlags'>
    """

    Ok: ... = QStrStream.Status.Ok
    """
    """

    ReadCorruptData: ... = QStrStream.Status.ReadCorruptData
    """
    """

    ReadPastEnd: ... = QStrStream.Status.ReadPastEnd
    """
    """

    RealNumberNotation: ...
    """
    <type 'QStrStream.RealNumberNotati...
    """

    ScientificNotation: ...
    """
    QStrStream.RealNumberNotation.Scie...
    """

    ShowBase: ... = QStrStream.NumberFlag.ShowBase
    """
    """

    SmartNotation: ...
    """
    QStrStream.RealNumberNotation.SmartNota...
    """

    Status: ...
    """
    <type 'QStrStream.Status'>
    """

    UppercaseBase: ... = QStrStream.NumberFlag.UppercaseBase
    """
    """

    UppercaseDigits: ... = QStrStream.NumberFlag.UppercaseDigits
    """
    """

    WriteFailed: ... = QStrStream.Status.WriteFailed
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def autoDetectUnicode(self, *args, **kwargs):
        """ """
        ...
    def codec(self, *args, **kwargs):
        """ """
        ...
    def device(self, *args, **kwargs):
        """ """
        ...
    def fieldAlignment(self, *args, **kwargs):
        """ """
        ...
    def fieldWidth(self, *args, **kwargs):
        """ """
        ...
    def flush(self, *args, **kwargs):
        """ """
        ...
    def generateByteOrderMark(self, *args, **kwargs):
        """ """
        ...
    def integerBase(self, *args, **kwargs):
        """ """
        ...
    def locale(self, *args, **kwargs):
        """ """
        ...
    def numberFlags(self, *args, **kwargs):
        """ """
        ...
    def padChar(self, *args, **kwargs):
        """ """
        ...
    def pos(self, *args, **kwargs):
        """ """
        ...
    def read(self, *args, **kwargs):
        """ """
        ...
    def readAll(self, *args, **kwargs):
        """ """
        ...
    def readLine(self, *args, **kwargs):
        """ """
        ...
    def realNumberNotation(self, *args, **kwargs):
        """ """
        ...
    def realNumberPrecision(self, *args, **kwargs):
        """ """
        ...
    def reset(self, *args, **kwargs):
        """ """
        ...
    def resetStatus(self, *args, **kwargs):
        """ """
        ...
    def seek(self, *args, **kwargs):
        """ """
        ...
    def setAutoDetectUnicode(self, *args, **kwargs):
        """ """
        ...
    def setCodec(self, *args, **kwargs):
        """ """
        ...
    def setDevice(self, *args, **kwargs):
        """ """
        ...
    def setFieldAlignment(self, *args, **kwargs):
        """ """
        ...
    def setFieldWidth(self, *args, **kwargs):
        """ """
        ...
    def setGenerateByteOrderMark(self, *args, **kwargs):
        """ """
        ...
    def setIntegerBase(self, *args, **kwargs):
        """ """
        ...
    def setLocale(self, *args, **kwargs):
        """ """
        ...
    def setNumberFlags(self, *args, **kwargs):
        """ """
        ...
    def setPadChar(self, *args, **kwargs):
        """ """
        ...
    def setRealNumberNotation(self, *args, **kwargs):
        """ """
        ...
    def setRealNumberPrecision(self, *args, **kwargs):
        """ """
        ...
    def setStatus(self, *args, **kwargs):
        """ """
        ...
    def skipWhiteSpace(self, *args, **kwargs):
        """ """
        ...
    def status(self, *args, **kwargs):
        """ """
        ...
    def string(self, *args, **kwargs):
        """ """
        ...
    ...

class QStrStreamManipulator(Shiboken.Object):
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def exec_(self, *args, **kwargs):
        """ """
        ...
    ...

class QThread(QObject):
    HighPriority: ... = QThread.Priority.HighPriority
    """
    """

    HighestPriority: ... = QThread.Priority.HighestPriority
    """
    """

    IdlePriority: ... = QThread.Priority.IdlePriority
    """
    """

    InheritPriority: ... = QThread.Priority.InheritPriority
    """
    """

    LowPriority: ... = QThread.Priority.LowPriority
    """
    """

    LowestPriority: ... = QThread.Priority.LowestPriority
    """
    """

    NormalPriority: ... = QThread.Priority.NormalPriority
    """
    """

    Priority: ...
    """
    <type 'QThread.Priority'>
    """

    TimeCriticalPriority: ...
    """
    QThread.Priority.TimeCriticalPrio...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    finished: ...
    """
    Signal
    """

    started: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """

    terminated: ...
    """
    Signal
    """
    @staticmethod
    def currentThread(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def currentThreadId(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def idealThreadCount(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def msleep(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setTerminationEnabled(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def sleep(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def usleep(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def yieldCurrentThread(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def exec_(self, *args, **kwargs):
        """ """
        ...
    def exit(self, *args, **kwargs):
        """ """
        ...
    def isFinished(self, *args, **kwargs):
        """ """
        ...
    def isRunning(self, *args, **kwargs):
        """ """
        ...
    def priority(self, *args, **kwargs):
        """ """
        ...
    def quit(self, *args, **kwargs):
        """ """
        ...
    def run(self, *args, **kwargs):
        """ """
        ...
    def setPriority(self, *args, **kwargs):
        """ """
        ...
    def setStackSize(self, *args, **kwargs):
        """ """
        ...
    def stackSize(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def terminate(self, *args, **kwargs):
        """ """
        ...
    def wait(self, *args, **kwargs):
        """ """
        ...
    ...

class QThreadPool(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    @staticmethod
    def globalInstance(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def activeThreadCount(self, *args, **kwargs):
        """ """
        ...
    def expiryTimeout(self, *args, **kwargs):
        """ """
        ...
    def maxThreadCount(self, *args, **kwargs):
        """ """
        ...
    def releaseThread(self, *args, **kwargs):
        """ """
        ...
    def reserveThread(self, *args, **kwargs):
        """ """
        ...
    def setExpiryTimeout(self, *args, **kwargs):
        """ """
        ...
    def setMaxThreadCount(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def tryStart(self, *args, **kwargs):
        """ """
        ...
    def waitForDone(self, *args, **kwargs):
        """ """
        ...
    ...

class QTime(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def currentTime(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromString(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def isValid(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(self, *args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def addMSecs(self, *args, **kwargs):
        """ """
        ...
    def addSecs(self, *args, **kwargs):
        """ """
        ...
    def elapsed(self, *args, **kwargs):
        """ """
        ...
    def hour(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def minute(self, *args, **kwargs):
        """ """
        ...
    def msec(self, *args, **kwargs):
        """ """
        ...
    def msecsTo(self, *args, **kwargs):
        """ """
        ...
    def restart(self, *args, **kwargs):
        """ """
        ...
    def second(self, *args, **kwargs):
        """ """
        ...
    def secsTo(self, *args, **kwargs):
        """ """
        ...
    def setHMS(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def toPython(self, *args, **kwargs):
        """ """
        ...
    def toString(self, *args, **kwargs):
        """ """
        ...
    ...

class QTimeLine(QObject):
    Backward: ... = QTimeLine.Direction.Backward
    """
    """

    CosineCurve: ... = QTimeLine.CurveShape.CosineCurve
    """
    """

    CurveShape: ...
    """
    <type 'QTimeLine.CurveShape'>
    """

    Direction: ...
    """
    <type 'QTimeLine.Direction'>
    """

    EaseInCurve: ... = QTimeLine.CurveShape.EaseInCurve
    """
    """

    EaseInOutCurve: ... = QTimeLine.CurveShape.EaseInOutCurve
    """
    """

    EaseOutCurve: ... = QTimeLine.CurveShape.EaseOutCurve
    """
    """

    Forward: ... = QTimeLine.Direction.Forward
    """
    """

    LinearCurve: ... = QTimeLine.CurveShape.LinearCurve
    """
    """

    NotRunning: ... = QTimeLine.State.NotRunning
    """
    """

    Paused: ... = QTimeLine.State.Paused
    """
    """

    Running: ... = QTimeLine.State.Running
    """
    """

    SineCurve: ... = QTimeLine.CurveShape.SineCurve
    """
    """

    State: ...
    """
    <type 'QTimeLine.State'>
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    finished: ...
    """
    Signal
    """

    frameChanged: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """

    valueChanged: ...
    """
    Signal
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def currentFrame(self, *args, **kwargs):
        """ """
        ...
    def currentTime(self, *args, **kwargs):
        """ """
        ...
    def currentValue(self, *args, **kwargs):
        """ """
        ...
    def curveShape(self, *args, **kwargs):
        """ """
        ...
    def direction(self, *args, **kwargs):
        """ """
        ...
    def duration(self, *args, **kwargs):
        """ """
        ...
    def easingCurve(self, *args, **kwargs):
        """ """
        ...
    def endFrame(self, *args, **kwargs):
        """ """
        ...
    def frameForTime(self, *args, **kwargs):
        """ """
        ...
    def loopCount(self, *args, **kwargs):
        """ """
        ...
    def resume(self, *args, **kwargs):
        """ """
        ...
    def setCurrentTime(self, *args, **kwargs):
        """ """
        ...
    def setCurveShape(self, *args, **kwargs):
        """ """
        ...
    def setDirection(self, *args, **kwargs):
        """ """
        ...
    def setDuration(self, *args, **kwargs):
        """ """
        ...
    def setEasingCurve(self, *args, **kwargs):
        """ """
        ...
    def setEndFrame(self, *args, **kwargs):
        """ """
        ...
    def setFrameRange(self, *args, **kwargs):
        """ """
        ...
    def setLoopCount(self, *args, **kwargs):
        """ """
        ...
    def setPaused(self, *args, **kwargs):
        """ """
        ...
    def setStartFrame(self, *args, **kwargs):
        """ """
        ...
    def setUpdateInterval(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def startFrame(self, *args, **kwargs):
        """ """
        ...
    def state(self, *args, **kwargs):
        """ """
        ...
    def stop(self, *args, **kwargs):
        """ """
        ...
    def timerEvent(self, *args, **kwargs):
        """ """
        ...
    def toggleDirection(self, *args, **kwargs):
        """ """
        ...
    def updateInterval(self, *args, **kwargs):
        """ """
        ...
    def valueForTime(self, *args, **kwargs):
        """ """
        ...
    ...

class QTimer(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """

    timeout: ...
    """
    Signal
    """
    @staticmethod
    def singleShot(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def interval(self, *args, **kwargs):
        """ """
        ...
    def isActive(self, *args, **kwargs):
        """ """
        ...
    def isSingleShot(self, *args, **kwargs):
        """ """
        ...
    def killTimer(self, *args, **kwargs):
        """ """
        ...
    def setInterval(self, *args, **kwargs):
        """ """
        ...
    def setSingleShot(self, *args, **kwargs):
        """ """
        ...
    def start(self, *args, **kwargs):
        """ """
        ...
    def startTimer(self, *args, **kwargs):
        """ """
        ...
    def stop(self, *args, **kwargs):
        """ """
        ...
    def timerEvent(self, *args, **kwargs):
        """ """
        ...
    def timerId(self, *args, **kwargs):
        """ """
        ...
    ...

class QTimerEvent(QEvent):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def timerId(self, *args, **kwargs):
        """ """
        ...
    ...

class QTranslator(QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def load(self, *args, **kwargs):
        """ """
        ...
    def translate(self, *args, **kwargs):
        """ """
        ...
    ...

class QUrl(Shiboken.Object):
    FormattingOption: ...
    """
    <type 'QUrl.FormattingOption'>
    """

    FormattingOptions: ...
    """
    <type 'FormattingOptions'>
    """

    # None: ... = QUrl.FormattingOption.None
    """
    """

    ParsingMode: ...
    """
    <type 'QUrl.ParsingMode'>
    """

    RemoveAuthority: ... = QUrl.FormattingOption.RemoveAuthority
    """
    """

    RemoveFragment: ... = QUrl.FormattingOption.RemoveFragment
    """
    """

    RemovePassword: ... = QUrl.FormattingOption.RemovePassword
    """
    """

    RemovePath: ... = QUrl.FormattingOption.RemovePath
    """
    """

    RemovePort: ... = QUrl.FormattingOption.RemovePort
    """
    """

    RemoveQuery: ... = QUrl.FormattingOption.RemoveQuery
    """
    """

    RemoveScheme: ... = QUrl.FormattingOption.RemoveScheme
    """
    """

    RemoveUserInfo: ... = QUrl.FormattingOption.RemoveUserInfo
    """
    """

    StrictMode: ... = QUrl.ParsingMode.StrictMode
    """
    """

    StripTrailingSlash: ...
    """
    QUrl.FormattingOption.StripTrailing...
    """

    TolerantMode: ... = QUrl.ParsingMode.TolerantMode
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def fromAce(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromEncoded(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromLocalFile(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromPercentEncoding(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromPunycode(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromUserInput(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def idnWhitelist(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setIdnWhitelist(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def toAce(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def toPercentEncoding(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def toPunycode(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(self, *args, **kwargs):
        """ """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def addEncodedQueryItem(self, *args, **kwargs):
        """ """
        ...
    def addQueryItem(self, *args, **kwargs):
        """ """
        ...
    def allEncodedQueryItemValues(self, *args, **kwargs):
        """ """
        ...
    def allQueryItemValues(self, *args, **kwargs):
        """ """
        ...
    def authority(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def encodedFragment(self, *args, **kwargs):
        """ """
        ...
    def encodedHost(self, *args, **kwargs):
        """ """
        ...
    def encodedPassword(self, *args, **kwargs):
        """ """
        ...
    def encodedPath(self, *args, **kwargs):
        """ """
        ...
    def encodedQuery(self, *args, **kwargs):
        """ """
        ...
    def encodedQueryItemValue(self, *args, **kwargs):
        """ """
        ...
    def encodedQueryItems(self, *args, **kwargs):
        """ """
        ...
    def encodedUserName(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def fragment(self, *args, **kwargs):
        """ """
        ...
    def hasEncodedQueryItem(self, *args, **kwargs):
        """ """
        ...
    def hasFragment(self, *args, **kwargs):
        """ """
        ...
    def hasQuery(self, *args, **kwargs):
        """ """
        ...
    def hasQueryItem(self, *args, **kwargs):
        """ """
        ...
    def host(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isLocalFile(self, *args, **kwargs):
        """ """
        ...
    def isParentOf(self, *args, **kwargs):
        """ """
        ...
    def isRelative(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def password(self, *args, **kwargs):
        """ """
        ...
    def path(self, *args, **kwargs):
        """ """
        ...
    def port(self, *args, **kwargs):
        """ """
        ...
    def queryItemValue(self, *args, **kwargs):
        """ """
        ...
    def queryItems(self, *args, **kwargs):
        """ """
        ...
    def queryPairDelimiter(self, *args, **kwargs):
        """ """
        ...
    def queryValueDelimiter(self, *args, **kwargs):
        """ """
        ...
    def removeAllEncodedQueryItems(self, *args, **kwargs):
        """ """
        ...
    def removeAllQueryItems(self, *args, **kwargs):
        """ """
        ...
    def removeEncodedQueryItem(self, *args, **kwargs):
        """ """
        ...
    def removeQueryItem(self, *args, **kwargs):
        """ """
        ...
    def resolved(self, *args, **kwargs):
        """ """
        ...
    def scheme(self, *args, **kwargs):
        """ """
        ...
    def setAuthority(self, *args, **kwargs):
        """ """
        ...
    def setEncodedFragment(self, *args, **kwargs):
        """ """
        ...
    def setEncodedHost(self, *args, **kwargs):
        """ """
        ...
    def setEncodedPassword(self, *args, **kwargs):
        """ """
        ...
    def setEncodedPath(self, *args, **kwargs):
        """ """
        ...
    def setEncodedQuery(self, *args, **kwargs):
        """ """
        ...
    def setEncodedQueryItems(self, *args, **kwargs):
        """ """
        ...
    def setEncodedUrl(self, *args, **kwargs):
        """ """
        ...
    def setEncodedUserName(self, *args, **kwargs):
        """ """
        ...
    def setFragment(self, *args, **kwargs):
        """ """
        ...
    def setHost(self, *args, **kwargs):
        """ """
        ...
    def setPassword(self, *args, **kwargs):
        """ """
        ...
    def setPath(self, *args, **kwargs):
        """ """
        ...
    def setPort(self, *args, **kwargs):
        """ """
        ...
    def setQueryDelimiters(self, *args, **kwargs):
        """ """
        ...
    def setQueryItems(self, *args, **kwargs):
        """ """
        ...
    def setScheme(self, *args, **kwargs):
        """ """
        ...
    def setUrl(self, *args, **kwargs):
        """ """
        ...
    def setUserInfo(self, *args, **kwargs):
        """ """
        ...
    def setUserName(self, *args, **kwargs):
        """ """
        ...
    def swap(self, *args, **kwargs):
        """ """
        ...
    def toEncoded(self, *args, **kwargs):
        """ """
        ...
    def toLocalFile(self, *args, **kwargs):
        """ """
        ...
    def toString(self, *args, **kwargs):
        """ """
        ...
    def topLevelDomain(self, *args, **kwargs):
        """ """
        ...
    def userInfo(self, *args, **kwargs):
        """ """
        ...
    def userName(self, *args, **kwargs):
        """ """
        ...
    ...

class QVariantAnimation(QAbstractAnimation):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <QMetaObject object>
    """

    valueChanged: ...
    """
    Signal
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def currentValue(self, *args, **kwargs):
        """ """
        ...
    def duration(self, *args, **kwargs):
        """ """
        ...
    def easingCurve(self, *args, **kwargs):
        """ """
        ...
    def endValue(self, *args, **kwargs):
        """ """
        ...
    def event(self, *args, **kwargs):
        """ """
        ...
    def interpolated(self, *args, **kwargs):
        """ """
        ...
    def keyValueAt(self, *args, **kwargs):
        """ """
        ...
    def keyValues(self, *args, **kwargs):
        """ """
        ...
    def setDuration(self, *args, **kwargs):
        """ """
        ...
    def setEasingCurve(self, *args, **kwargs):
        """ """
        ...
    def setEndValue(self, *args, **kwargs):
        """ """
        ...
    def setKeyValueAt(self, *args, **kwargs):
        """ """
        ...
    def setKeyValues(self, *args, **kwargs):
        """ """
        ...
    def setStartValue(self, *args, **kwargs):
        """ """
        ...
    def startValue(self, *args, **kwargs):
        """ """
        ...
    def updateCurrentTime(self, *args, **kwargs):
        """ """
        ...
    def updateCurrentValue(self, *args, **kwargs):
        """ """
        ...
    def updateState(self, *args, **kwargs):
        """ """
        ...
    ...

class QWaitCondition(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def wait(self, *args, **kwargs):
        """ """
        ...
    def wakeAll(self, *args, **kwargs):
        """ """
        ...
    def wakeOne(self, *args, **kwargs):
        """ """
        ...
    ...

class QWriteLocker(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __enter__(self, *args, **kwargs):
        """ """
        ...
    def __exit__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def readWriteLock(self, *args, **kwargs):
        """ """
        ...
    def relock(self, *args, **kwargs):
        """ """
        ...
    def unlock(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamAttribute(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def isDefault(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def namespaceUri(self, *args, **kwargs):
        """ """
        ...
    def prefix(self, *args, **kwargs):
        """ """
        ...
    def qualifiedName(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamAttributes(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __delitem__(self, *args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(self, *args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self, *args, **kwargs):
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __setitem__(self, *args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def append(self, *args, **kwargs):
        """ """
        ...
    def at(self, *args, **kwargs):
        """ """
        ...
    def capacity(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def constData(self, *args, **kwargs):
        """ """
        ...
    def contains(self, *args, **kwargs):
        """ """
        ...
    def count(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def empty(self, *args, **kwargs):
        """ """
        ...
    def endsWith(self, *args, **kwargs):
        """ """
        ...
    def erase(self, *args, **kwargs):
        """ """
        ...
    def fill(self, *args, **kwargs):
        """ """
        ...
    def first(self, *args, **kwargs):
        """ """
        ...
    def front(self, *args, **kwargs):
        """ """
        ...
    def hasAttribute(self, *args, **kwargs):
        """ """
        ...
    def indexOf(self, *args, **kwargs):
        """ """
        ...
    def insert(self, *args, **kwargs):
        """ """
        ...
    def isEmpty(self, *args, **kwargs):
        """ """
        ...
    def isSharedWith(self, *args, **kwargs):
        """ """
        ...
    def last(self, *args, **kwargs):
        """ """
        ...
    def lastIndexOf(self, *args, **kwargs):
        """ """
        ...
    def mid(self, *args, **kwargs):
        """ """
        ...
    def prepend(self, *args, **kwargs):
        """ """
        ...
    def remove(self, *args, **kwargs):
        """ """
        ...
    def replace(self, *args, **kwargs):
        """ """
        ...
    def reserve(self, *args, **kwargs):
        """ """
        ...
    def resize(self, *args, **kwargs):
        """ """
        ...
    def setSharable(self, *args, **kwargs):
        """ """
        ...
    def size(self, *args, **kwargs):
        """ """
        ...
    def squeeze(self, *args, **kwargs):
        """ """
        ...
    def startsWith(self, *args, **kwargs):
        """ """
        ...
    def swap(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamEntityDeclaration(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def notationName(self, *args, **kwargs):
        """ """
        ...
    def publicId(self, *args, **kwargs):
        """ """
        ...
    def systemId(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamEntityResolver(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def resolveEntity(self, *args, **kwargs):
        """ """
        ...
    def resolveUndeclaredEntity(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamNamespaceDeclaration(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def namespaceUri(self, *args, **kwargs):
        """ """
        ...
    def prefix(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamNotationDeclaration(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def publicId(self, *args, **kwargs):
        """ """
        ...
    def systemId(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamReader(Shiboken.Object):
    Characters: ... = QXmlStreamReader.TokenType.Characters
    """
    """

    Comment: ... = QXmlStreamReader.TokenType.Comment
    """
    """

    CustomError: ... = QXmlStreamReader.Error.CustomError
    """
    """

    DTD: ... = QXmlStreamReader.TokenType.DTD
    """
    """

    EndDocument: ... = QXmlStreamReader.TokenType.EndDocument
    """
    """

    EndElement: ... = QXmlStreamReader.TokenType.EndElement
    """
    """

    EntityReference: ...
    """
    QXmlStreamReader.TokenType.EntityRefer...
    """

    Error: ...
    """
    <type 'QXmlStreamReader.Error'>
    """

    ErrorOnUnexpectedElement: ...
    """
    QXmlStreamReader.ReadElementT...
    """

    IncludeChildElements: ...
    """
    QXmlStreamReader.ReadElementStrB...
    """

    Invalid: ... = QXmlStreamReader.TokenType.Invalid
    """
    """

    NoError: ... = QXmlStreamReader.Error.NoError
    """
    """

    NoToken: ... = QXmlStreamReader.TokenType.NoToken
    """
    """

    NotWellFormedError: ...
    """
    QXmlStreamReader.Error.NotWellForme...
    """

    PrematureEndOfDocumentError: ...
    """
    QXmlStreamReader.Error.Pre...
    """

    ProcessingInstruction: ...
    """
    QXmlStreamReader.TokenType.Proce...
    """

    ReadElementStrBehaviour: ...
    """
    <type 'QXmlStreamReader.ReadE...
    """

    SkipChildElements: ...
    """
    QXmlStreamReader.ReadElementStrBeha...
    """

    StartDocument: ... = QXmlStreamReader.TokenType.StartDocument
    """
    """

    StartElement: ... = QXmlStreamReader.TokenType.StartElement
    """
    """

    TokenType: ...
    """
    <type 'QXmlStreamReader.TokenType'>
    """

    UnexpectedElementError: ...
    """
    QXmlStreamReader.Error.Unexpect...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addData(self, *args, **kwargs):
        """ """
        ...
    def addExtraNamespaceDeclaration(self, *args, **kwargs):
        """ """
        ...
    def addExtraNamespaceDeclarations(self, *args, **kwargs):
        """ """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def attributes(self, *args, **kwargs):
        """ """
        ...
    def characterOffset(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def columnNumber(self, *args, **kwargs):
        """ """
        ...
    def device(self, *args, **kwargs):
        """ """
        ...
    def documentEncoding(self, *args, **kwargs):
        """ """
        ...
    def documentVersion(self, *args, **kwargs):
        """ """
        ...
    def dtdName(self, *args, **kwargs):
        """ """
        ...
    def dtdPublicId(self, *args, **kwargs):
        """ """
        ...
    def dtdSystemId(self, *args, **kwargs):
        """ """
        ...
    def entityDeclarations(self, *args, **kwargs):
        """ """
        ...
    def entityResolver(self, *args, **kwargs):
        """ """
        ...
    def error(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def hasError(self, *args, **kwargs):
        """ """
        ...
    def isCDATA(self, *args, **kwargs):
        """ """
        ...
    def isCharacters(self, *args, **kwargs):
        """ """
        ...
    def isComment(self, *args, **kwargs):
        """ """
        ...
    def isDTD(self, *args, **kwargs):
        """ """
        ...
    def isEndDocument(self, *args, **kwargs):
        """ """
        ...
    def isEndElement(self, *args, **kwargs):
        """ """
        ...
    def isEntityReference(self, *args, **kwargs):
        """ """
        ...
    def isProcessingInstruction(self, *args, **kwargs):
        """ """
        ...
    def isStandaloneDocument(self, *args, **kwargs):
        """ """
        ...
    def isStartDocument(self, *args, **kwargs):
        """ """
        ...
    def isStartElement(self, *args, **kwargs):
        """ """
        ...
    def isWhitespace(self, *args, **kwargs):
        """ """
        ...
    def lineNumber(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def namespaceDeclarations(self, *args, **kwargs):
        """ """
        ...
    def namespaceProcessing(self, *args, **kwargs):
        """ """
        ...
    def namespaceUri(self, *args, **kwargs):
        """ """
        ...
    def notationDeclarations(self, *args, **kwargs):
        """ """
        ...
    def prefix(self, *args, **kwargs):
        """ """
        ...
    def processingInstructionData(self, *args, **kwargs):
        """ """
        ...
    def processingInstructionTarget(self, *args, **kwargs):
        """ """
        ...
    def qualifiedName(self, *args, **kwargs):
        """ """
        ...
    def raiseError(self, *args, **kwargs):
        """ """
        ...
    def readElementStr(self, *args, **kwargs):
        """ """
        ...
    def readNext(self, *args, **kwargs):
        """ """
        ...
    def readNextStartElement(self, *args, **kwargs):
        """ """
        ...
    def setDevice(self, *args, **kwargs):
        """ """
        ...
    def setEntityResolver(self, *args, **kwargs):
        """ """
        ...
    def setNamespaceProcessing(self, *args, **kwargs):
        """ """
        ...
    def skipCurrentElement(self, *args, **kwargs):
        """ """
        ...
    def text(self, *args, **kwargs):
        """ """
        ...
    def tokenString(self, *args, **kwargs):
        """ """
        ...
    def tokenType(self, *args, **kwargs):
        """ """
        ...
    ...

class QXmlStreamWriter(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def autoFormatting(self, *args, **kwargs):
        """ """
        ...
    def autoFormattingIndent(self, *args, **kwargs):
        """ """
        ...
    def codec(self, *args, **kwargs):
        """ """
        ...
    def device(self, *args, **kwargs):
        """ """
        ...
    def hasError(self, *args, **kwargs):
        """ """
        ...
    def setAutoFormatting(self, *args, **kwargs):
        """ """
        ...
    def setAutoFormattingIndent(self, *args, **kwargs):
        """ """
        ...
    def setCodec(self, *args, **kwargs):
        """ """
        ...
    def setDevice(self, *args, **kwargs):
        """ """
        ...
    def writeAttribute(self, *args, **kwargs):
        """ """
        ...
    def writeAttributes(self, *args, **kwargs):
        """ """
        ...
    def writeCDATA(self, *args, **kwargs):
        """ """
        ...
    def writeCharacters(self, *args, **kwargs):
        """ """
        ...
    def writeComment(self, *args, **kwargs):
        """ """
        ...
    def writeCurrentToken(self, *args, **kwargs):
        """ """
        ...
    def writeDTD(self, *args, **kwargs):
        """ """
        ...
    def writeDefaultNamespace(self, *args, **kwargs):
        """ """
        ...
    def writeEmptyElement(self, *args, **kwargs):
        """ """
        ...
    def writeEndDocument(self, *args, **kwargs):
        """ """
        ...
    def writeEndElement(self, *args, **kwargs):
        """ """
        ...
    def writeEntityReference(self, *args, **kwargs):
        """ """
        ...
    def writeNamespace(self, *args, **kwargs):
        """ """
        ...
    def writeProcessingInstruction(self, *args, **kwargs):
        """ """
        ...
    def writeStartDocument(self, *args, **kwargs):
        """ """
        ...
    def writeStartElement(self, *args, **kwargs):
        """ """
        ...
    def writeStrElement(self, *args, **kwargs):
        """ """
        ...
    ...

class Qt(Shiboken.Object):
    AA_AttributeCount: ...
    """
    Qt.ApplicationAttribute.AA_Attribute...
    """

    AA_CaptureMultimediaKeys: ...
    """
    Qt.ApplicationAttribute.AA_Ca...
    """

    AA_DontCreateNativeWidgetSiblings: ...
    """
    Qt.ApplicationAttrib...
    """

    AA_DontShowIconsInMenus: ...
    """
    Qt.ApplicationAttribute.AA_Don...
    """

    AA_DontUseNativeMenuBar: ...
    """
    Qt.ApplicationAttribute.AA_Don...
    """

    AA_ImmediateWidgetCreation: ...
    """
    Qt.ApplicationAttribute.AA_...
    """

    AA_MSWindowsUseDirect3DByDefault: ...
    """
    Qt.ApplicationAttribu...
    """

    AA_MacDontSwapCtrlAndMeta: ...
    """
    Qt.ApplicationAttribute.AA_M...
    """

    AA_MacPluginApplication: ...
    """
    Qt.ApplicationAttribute.AA_Mac...
    """

    AA_NativeWindows: ...
    """
    Qt.ApplicationAttribute.AA_NativeWind...
    """

    AA_S60DisablePartialScreenInputMode: ...
    """
    Qt.ApplicationAttr...
    """

    AA_S60DontConstructApplicationPanes: ...
    """
    Qt.ApplicationAttr...
    """

    AA_X11InitThreads: ...
    """
    Qt.ApplicationAttribute.AA_X11InitTh...
    """

    ALT: ... = Qt.Modifier.ALT
    """
    """

    AbsoluteSize: ... = Qt.SizeMode.AbsoluteSize
    """
    """

    AccessibleDescriptionRole: ...
    """
    Qt.ItemDataRole.AccessibleDe...
    """

    AccessibleStrRole: ... = Qt.ItemDataRole.AccessibleStrRole
    """
    """

    ActionMask: ... = Qt.DropAction.ActionMask
    """
    """

    ActionsContextMenu: ...
    """
    Qt.ContextMenuPolicy.ActionsContext...
    """

    ActiveWindowFocusReason: ...
    """
    Qt.FocusReason.ActiveWindowFoc...
    """

    AlignAbsolute: ... = Qt.AlignmentFlag.AlignAbsolute
    """
    """

    AlignBottom: ... = Qt.AlignmentFlag.AlignBottom
    """
    """

    AlignCenter: ... = Qt.AlignmentFlag.AlignCenter
    """
    """

    AlignHCenter: ... = Qt.AlignmentFlag.AlignHCenter
    """
    """

    AlignHorizontal_Mask: ...
    """
    Qt.AlignmentFlag.AlignHorizontal_...
    """

    AlignJustify: ... = Qt.AlignmentFlag.AlignJustify
    """
    """

    AlignLeading: ... = Qt.AlignmentFlag.AlignLeading
    """
    """

    AlignLeft: ... = Qt.AlignmentFlag.AlignLeft
    """
    """

    AlignRight: ... = Qt.AlignmentFlag.AlignRight
    """
    """

    AlignTop: ... = Qt.AlignmentFlag.AlignTop
    """
    """

    AlignTrailing: ... = Qt.AlignmentFlag.AlignTrailing
    """
    """

    AlignVCenter: ... = Qt.AlignmentFlag.AlignVCenter
    """
    """

    AlignVertical_Mask: ... = Qt.AlignmentFlag.AlignVertical_Mask
    """
    """

    Alignment: ...
    """
    <type 'Alignment'>
    """

    AlignmentFlag: ...
    """
    <type 'Qt.AlignmentFlag'>
    """

    AllDockWidgetAreas: ...
    """
    Qt.DockWidgetArea.AllDockWidgetArea...
    """

    AllToolBarAreas: ... = Qt.ToolBarArea.AllToolBarAreas
    """
    """

    AlphaDither_Mask: ...
    """
    Qt.ImageConversionFlag.AlphaDither_Ma...
    """

    AltModifier: ... = Qt.KeyboardModifier.AltModifier
    """
    """

    AnchorAttribute: ...
    """
    <type 'Qt.AnchorAttribute'>
    """

    AnchorBottom: ... = Qt.AnchorPoint.AnchorBottom
    """
    """

    AnchorHorizontalCenter: ...
    """
    Qt.AnchorPoint.AnchorHorizontal...
    """

    AnchorHref: ... = Qt.AnchorAttribute.AnchorHref
    """
    """

    AnchorLeft: ... = Qt.AnchorPoint.AnchorLeft
    """
    """

    AnchorName: ... = Qt.AnchorAttribute.AnchorName
    """
    """

    AnchorPoint: ...
    """
    <type 'Qt.AnchorPoint'>
    """

    AnchorRight: ... = Qt.AnchorPoint.AnchorRight
    """
    """

    AnchorTop: ... = Qt.AnchorPoint.AnchorTop
    """
    """

    AnchorVerticalCenter: ...
    """
    Qt.AnchorPoint.AnchorVerticalCent...
    """

    ApplicationAttribute: ...
    """
    <type 'Qt.ApplicationAttribute'>
    """

    ApplicationModal: ... = Qt.WindowModality.ApplicationModal
    """
    """

    ApplicationShortcut: ...
    """
    Qt.ShortcutContext.ApplicationShor...
    """

    ArrowCursor: ... = Qt.CursorShape.ArrowCursor
    """
    """

    ArrowType: ...
    """
    <type 'Qt.ArrowType'>
    """

    AscendingOrder: ... = Qt.SortOrder.AscendingOrder
    """
    """

    AspectRatioMode: ...
    """
    <type 'Qt.AspectRatioMode'>
    """

    AutoColor: ... = Qt.ImageConversionFlag.AutoColor
    """
    """

    AutoCompatConnection: ...
    """
    Qt.ConnectionType.AutoCompatConne...
    """

    AutoConnection: ... = Qt.ConnectionType.AutoConnection
    """
    """

    AutoDither: ... = Qt.ImageConversionFlag.AutoDither
    """
    """

    AutoStr: ... = Qt.StrFormat.AutoStr
    """
    """

    AvoidDither: ... = Qt.ImageConversionFlag.AvoidDither
    """
    """

    Axis: ...
    """
    <type 'Qt.Axis'>
    """

    BDiagPattern: ... = Qt.BrushStyle.BDiagPattern
    """
    """

    BGMode: ...
    """
    <type 'Qt.BGMode'>
    """

    BackgroundColorRole: ...
    """
    Qt.ItemDataRole.BackgroundColorRol...
    """

    BackgroundRole: ... = Qt.ItemDataRole.BackgroundRole
    """
    """

    BacktabFocusReason: ... = Qt.FocusReason.BacktabFocusReason
    """
    """

    BevelJoin: ... = Qt.PenJoinStyle.BevelJoin
    """
    """

    BitmapCursor: ... = Qt.CursorShape.BitmapCursor
    """
    """

    BlankCursor: ... = Qt.CursorShape.BlankCursor
    """
    """

    BlockingQueuedConnection: ...
    """
    Qt.ConnectionType.BlockingQue...
    """

    BottomDockWidgetArea: ...
    """
    Qt.DockWidgetArea.BottomDockWidge...
    """

    BottomLeftCorner: ... = Qt.Corner.BottomLeftCorner
    """
    """

    BottomLeftSection: ...
    """
    Qt.WindowFrameSection.BottomLeftSect...
    """

    BottomRightCorner: ... = Qt.Corner.BottomRightCorner
    """
    """

    BottomRightSection: ...
    """
    Qt.WindowFrameSection.BottomRightSe...
    """

    BottomSection: ... = Qt.WindowFrameSection.BottomSection
    """
    """

    BottomToolBarArea: ... = Qt.ToolBarArea.BottomToolBarArea
    """
    """

    BrushStyle: ...
    """
    <type 'Qt.BrushStyle'>
    """

    BusyCursor: ... = Qt.CursorShape.BusyCursor
    """
    """

    BypassGraphicsProxyWidget: ...
    """
    Qt.WindowType.BypassGraphics...
    """

    CTRL: ... = Qt.Modifier.CTRL
    """
    """

    CaseInsensitive: ... = Qt.CaseSensitivity.CaseInsensitive
    """
    """

    CaseSensitive: ... = Qt.CaseSensitivity.CaseSensitive
    """
    """

    CaseSensitivity: ...
    """
    <type 'Qt.CaseSensitivity'>
    """

    CheckState: ...
    """
    <type 'Qt.CheckState'>
    """

    CheckStateRole: ... = Qt.ItemDataRole.CheckStateRole
    """
    """

    Checked: ... = Qt.CheckState.Checked
    """
    """

    ClickFocus: ... = Qt.FocusPolicy.ClickFocus
    """
    """

    ClipOperation: ...
    """
    <type 'Qt.ClipOperation'>
    """

    ClosedHandCursor: ... = Qt.CursorShape.ClosedHandCursor
    """
    """

    ColorMode_Mask: ... = Qt.ImageConversionFlag.ColorMode_Mask
    """
    """

    ColorOnly: ... = Qt.ImageConversionFlag.ColorOnly
    """
    """

    ConicalGradientPattern: ...
    """
    Qt.BrushStyle.ConicalGradientPa...
    """

    ConnectionType: ...
    """
    <type 'Qt.ConnectionType'>
    """

    ContainsItemBoundingRect: ...
    """
    Qt.ItemSelectionMode.Contains...
    """

    ContainsItemShape: ...
    """
    Qt.ItemSelectionMode.ContainsItemSha...
    """

    ContextMenuPolicy: ...
    """
    <type 'Qt.ContextMenuPolicy'>
    """

    ControlModifier: ... = Qt.KeyboardModifier.ControlModifier
    """
    """

    CoordinateSystem: ...
    """
    <type 'Qt.CoordinateSystem'>
    """

    CopyAction: ... = Qt.DropAction.CopyAction
    """
    """

    Corner: ...
    """
    <type 'Qt.Corner'>
    """

    CrossCursor: ... = Qt.CursorShape.CrossCursor
    """
    """

    CrossPattern: ... = Qt.BrushStyle.CrossPattern
    """
    """

    CursorMoveStyle: ...
    """
    <type 'Qt.CursorMoveStyle'>
    """

    CursorShape: ...
    """
    <type 'Qt.CursorShape'>
    """

    CustomContextMenu: ...
    """
    Qt.ContextMenuPolicy.CustomContextMe...
    """

    CustomCursor: ... = Qt.CursorShape.CustomCursor
    """
    """

    CustomDashLine: ... = Qt.PenStyle.CustomDashLine
    """
    """

    CustomGesture: ... = Qt.GestureType.CustomGesture
    """
    """

    CustomizeWindowHint: ... = Qt.WindowType.CustomizeWindowHint
    """
    """

    DashDotDotLine: ... = Qt.PenStyle.DashDotDotLine
    """
    """

    DashDotLine: ... = Qt.PenStyle.DashDotLine
    """
    """

    DashLine: ... = Qt.PenStyle.DashLine
    """
    """

    DateFormat: ...
    """
    <type 'Qt.DateFormat'>
    """

    DayOfWeek: ...
    """
    <type 'Qt.DayOfWeek'>
    """

    DecorationPropertyRole: ...
    """
    Qt.ItemDataRole.DecorationPrope...
    """

    DecorationRole: ... = Qt.ItemDataRole.DecorationRole
    """
    """

    DefaultContextMenu: ...
    """
    Qt.ContextMenuPolicy.DefaultContext...
    """

    DefaultLocaleLongDate: ...
    """
    Qt.DateFormat.DefaultLocaleLongD...
    """

    DefaultLocaleShortDate: ...
    """
    Qt.DateFormat.DefaultLocaleShor...
    """

    Dense1Pattern: ... = Qt.BrushStyle.Dense1Pattern
    """
    """

    Dense2Pattern: ... = Qt.BrushStyle.Dense2Pattern
    """
    """

    Dense3Pattern: ... = Qt.BrushStyle.Dense3Pattern
    """
    """

    Dense4Pattern: ... = Qt.BrushStyle.Dense4Pattern
    """
    """

    Dense5Pattern: ... = Qt.BrushStyle.Dense5Pattern
    """
    """

    Dense6Pattern: ... = Qt.BrushStyle.Dense6Pattern
    """
    """

    Dense7Pattern: ... = Qt.BrushStyle.Dense7Pattern
    """
    """

    DescendingOrder: ... = Qt.SortOrder.DescendingOrder
    """
    """

    Desktop: ... = Qt.WindowType.Desktop
    """
    """

    DeviceCoordinates: ...
    """
    Qt.CoordinateSystem.DeviceCoordinate...
    """

    DiagCrossPattern: ... = Qt.BrushStyle.DiagCrossPattern
    """
    """

    Dialog: ... = Qt.WindowType.Dialog
    """
    """

    DiffuseAlphaDither: ...
    """
    Qt.ImageConversionFlag.DiffuseAlpha...
    """

    DiffuseDither: ... = Qt.ImageConversionFlag.DiffuseDither
    """
    """

    DirectConnection: ... = Qt.ConnectionType.DirectConnection
    """
    """

    DisplayPropertyRole: ...
    """
    Qt.ItemDataRole.DisplayPropertyRol...
    """

    DisplayRole: ... = Qt.ItemDataRole.DisplayRole
    """
    """

    DitherMode_Mask: ... = Qt.ImageConversionFlag.DitherMode_Mask
    """
    """

    Dither_Mask: ... = Qt.ImageConversionFlag.Dither_Mask
    """
    """

    DockWidgetArea: ...
    """
    <type 'Qt.DockWidgetArea'>
    """

    DockWidgetAreaSizes: ...
    """
    <type 'Qt.DockWidgetAreaSizes'>
    """

    DockWidgetArea_Mask: ...
    """
    Qt.DockWidgetArea.DockWidgetArea_M...
    """

    DockWidgetAreas: ...
    """
    <type 'DockWidgetAreas'>
    """

    DontStartGestureOnChildren: ...
    """
    Qt.GestureFlag.DontStartGes...
    """

    DotLine: ... = Qt.PenStyle.DotLine
    """
    """

    DownArrow: ... = Qt.ArrowType.DownArrow
    """
    """

    DragCopyCursor: ... = Qt.CursorShape.DragCopyCursor
    """
    """

    DragLinkCursor: ... = Qt.CursorShape.DragLinkCursor
    """
    """

    DragMoveCursor: ... = Qt.CursorShape.DragMoveCursor
    """
    """

    Drawer: ... = Qt.WindowType.Drawer
    """
    """

    DropAction: ...
    """
    <type 'Qt.DropAction'>
    """

    DropActions: ...
    """
    <type 'DropActions'>
    """

    EditRole: ... = Qt.ItemDataRole.EditRole
    """
    """

    ElideLeft: ... = Qt.StrElideMode.ElideLeft
    """
    """

    ElideMiddle: ... = Qt.StrElideMode.ElideMiddle
    """
    """

    ElideNone: ... = Qt.StrElideMode.ElideNone
    """
    """

    ElideRight: ... = Qt.StrElideMode.ElideRight
    """
    """

    EventPriority: ...
    """
    <type 'Qt.EventPriority'>
    """

    ExactHit: ... = Qt.HitTestAccuracy.ExactHit
    """
    """

    FDiagPattern: ... = Qt.BrushStyle.FDiagPattern
    """
    """

    FastTransformation: ...
    """
    Qt.TransformationMode.FastTransform...
    """

    FillRule: ...
    """
    <type 'Qt.FillRule'>
    """

    FlatCap: ... = Qt.PenCapStyle.FlatCap
    """
    """

    FocusPolicy: ...
    """
    <type 'Qt.FocusPolicy'>
    """

    FocusReason: ...
    """
    <type 'Qt.FocusReason'>
    """

    FontRole: ... = Qt.ItemDataRole.FontRole
    """
    """

    ForbiddenCursor: ... = Qt.CursorShape.ForbiddenCursor
    """
    """

    ForegroundRole: ... = Qt.ItemDataRole.ForegroundRole
    """
    """

    FramelessWindowHint: ... = Qt.WindowType.FramelessWindowHint
    """
    """

    Friday: ... = Qt.DayOfWeek.Friday
    """
    """

    FuzzyHit: ... = Qt.HitTestAccuracy.FuzzyHit
    """
    """

    GestureCanceled: ... = Qt.GestureState.GestureCanceled
    """
    """

    GestureFinished: ... = Qt.GestureState.GestureFinished
    """
    """

    GestureFlag: ...
    """
    <type 'Qt.GestureFlag'>
    """

    GestureFlags: ...
    """
    <type 'GestureFlags'>
    """

    GestureStarted: ... = Qt.GestureState.GestureStarted
    """
    """

    GestureState: ...
    """
    <type 'Qt.GestureState'>
    """

    GestureType: ...
    """
    <type 'Qt.GestureType'>
    """

    GestureUpdated: ... = Qt.GestureState.GestureUpdated
    """
    """

    GlobalColor: ...
    """
    <type 'Qt.GlobalColor'>
    """

    GroupSwitchModifier: ...
    """
    Qt.KeyboardModifier.GroupSwitchMod...
    """

    HighEventPriority: ... = Qt.EventPriority.HighEventPriority
    """
    """

    HitTestAccuracy: ...
    """
    <type 'Qt.HitTestAccuracy'>
    """

    HorPattern: ... = Qt.BrushStyle.HorPattern
    """
    """

    Horizontal: ... = Qt.Orientation.Horizontal
    """
    """

    IBeamCursor: ... = Qt.CursorShape.IBeamCursor
    """
    """

    ISODate: ... = Qt.DateFormat.ISODate
    """
    """

    IgnoreAction: ... = Qt.DropAction.IgnoreAction
    """
    """

    IgnoreAspectRatio: ... = Qt.AspectRatioMode.IgnoreAspectRatio
    """
    """

    IgnoredGesturesPropagateToParent: ...
    """
    Qt.GestureFlag.Ignore...
    """

    ImAnchorPosition: ... = Qt.InputMethodQuery.ImAnchorPosition
    """
    """

    ImCurrentSelection: ...
    """
    Qt.InputMethodQuery.ImCurrentSelect...
    """

    ImCursorPosition: ... = Qt.InputMethodQuery.ImCursorPosition
    """
    """

    ImFont: ... = Qt.InputMethodQuery.ImFont
    """
    """

    ImMaximumStrLength: ...
    """
    Qt.InputMethodQuery.ImMaximumStrL...
    """

    ImMicroFocus: ... = Qt.InputMethodQuery.ImMicroFocus
    """
    """

    ImSurroundingStr: ...
    """
    Qt.InputMethodQuery.ImSurroundingTex...
    """

    ImageConversionFlag: ...
    """
    <type 'Qt.ImageConversionFlag'>
    """

    ImageConversionFlags: ...
    """
    <type 'ImageConversionFlags'>
    """

    ImhDialableCharactersOnly: ...
    """
    Qt.InputMethodHint.ImhDialab...
    """

    ImhDigitsOnly: ... = Qt.InputMethodHint.ImhDigitsOnly
    """
    """

    ImhEmailCharactersOnly: ...
    """
    Qt.InputMethodHint.ImhEmailChar...
    """

    ImhExclusiveInputMask: ...
    """
    Qt.InputMethodHint.ImhExclusiveI...
    """

    ImhFormattedNumbersOnly: ...
    """
    Qt.InputMethodHint.ImhFormatte...
    """

    ImhHiddenStr: ... = Qt.InputMethodHint.ImhHiddenStr
    """
    """

    ImhLowercaseOnly: ... = Qt.InputMethodHint.ImhLowercaseOnly
    """
    """

    ImhNoAutoUppercase: ...
    """
    Qt.InputMethodHint.ImhNoAutoUpperca...
    """

    ImhNoPredictiveStr: ...
    """
    Qt.InputMethodHint.ImhNoPredictive...
    """

    ImhNone: ... = Qt.InputMethodHint.ImhNone
    """
    """

    ImhPreferLowercase: ...
    """
    Qt.InputMethodHint.ImhPreferLowerca...
    """

    ImhPreferNumbers: ... = Qt.InputMethodHint.ImhPreferNumbers
    """
    """

    ImhPreferUppercase: ...
    """
    Qt.InputMethodHint.ImhPreferUpperca...
    """

    ImhUppercaseOnly: ... = Qt.InputMethodHint.ImhUppercaseOnly
    """
    """

    ImhUrlCharactersOnly: ...
    """
    Qt.InputMethodHint.ImhUrlCharacte...
    """

    InitialSortOrderRole: ...
    """
    Qt.ItemDataRole.InitialSortOrderR...
    """

    InputMethodHint: ...
    """
    <type 'Qt.InputMethodHint'>
    """

    InputMethodHints: ...
    """
    <type 'InputMethodHints'>
    """

    InputMethodQuery: ...
    """
    <type 'Qt.InputMethodQuery'>
    """

    IntersectClip: ... = Qt.ClipOperation.IntersectClip
    """
    """

    IntersectsItemBoundingRect: ...
    """
    Qt.ItemSelectionMode.Inters...
    """

    IntersectsItemShape: ...
    """
    Qt.ItemSelectionMode.IntersectsIte...
    """

    ItemDataRole: ...
    """
    <type 'Qt.ItemDataRole'>
    """

    ItemFlag: ...
    """
    <type 'Qt.ItemFlag'>
    """

    ItemFlags: ...
    """
    <type 'ItemFlags'>
    """

    ItemIsDragEnabled: ... = Qt.ItemFlag.ItemIsDragEnabled
    """
    """

    ItemIsDropEnabled: ... = Qt.ItemFlag.ItemIsDropEnabled
    """
    """

    ItemIsEditable: ... = Qt.ItemFlag.ItemIsEditable
    """
    """

    ItemIsEnabled: ... = Qt.ItemFlag.ItemIsEnabled
    """
    """

    ItemIsSelectable: ... = Qt.ItemFlag.ItemIsSelectable
    """
    """

    ItemIsTristate: ... = Qt.ItemFlag.ItemIsTristate
    """
    """

    ItemIsUserCheckable: ... = Qt.ItemFlag.ItemIsUserCheckable
    """
    """

    ItemSelectionMode: ...
    """
    <type 'Qt.ItemSelectionMode'>
    """

    KeepAspectRatio: ... = Qt.AspectRatioMode.KeepAspectRatio
    """
    """

    KeepAspectRatioByExpanding: ...
    """
    Qt.AspectRatioMode.KeepAspe...
    """

    Key: ...
    """
    <type 'Qt.Key'>
    """

    Key_0: ... = Qt.Key.Key_0
    """
    """

    Key_1: ... = Qt.Key.Key_1
    """
    """

    Key_2: ... = Qt.Key.Key_2
    """
    """

    Key_3: ... = Qt.Key.Key_3
    """
    """

    Key_4: ... = Qt.Key.Key_4
    """
    """

    Key_5: ... = Qt.Key.Key_5
    """
    """

    Key_6: ... = Qt.Key.Key_6
    """
    """

    Key_7: ... = Qt.Key.Key_7
    """
    """

    Key_8: ... = Qt.Key.Key_8
    """
    """

    Key_9: ... = Qt.Key.Key_9
    """
    """

    Key_A: ... = Qt.Key.Key_A
    """
    """

    Key_AE: ... = Qt.Key.Key_AE
    """
    """

    Key_Aacute: ... = Qt.Key.Key_Aacute
    """
    """

    Key_Acircumflex: ... = Qt.Key.Key_Acircumflex
    """
    """

    Key_AddFavorite: ... = Qt.Key.Key_AddFavorite
    """
    """

    Key_Adiaeresis: ... = Qt.Key.Key_Adiaeresis
    """
    """

    Key_Agrave: ... = Qt.Key.Key_Agrave
    """
    """

    Key_Alt: ... = Qt.Key.Key_Alt
    """
    """

    Key_AltGr: ... = Qt.Key.Key_AltGr
    """
    """

    Key_Ampersand: ... = Qt.Key.Key_Ampersand
    """
    """

    Key_Any: ... = Qt.Key.Key_Any
    """
    """

    Key_Apostrophe: ... = Qt.Key.Key_Apostrophe
    """
    """

    Key_ApplicationLeft: ... = Qt.Key.Key_ApplicationLeft
    """
    """

    Key_ApplicationRight: ... = Qt.Key.Key_ApplicationRight
    """
    """

    Key_Aring: ... = Qt.Key.Key_Aring
    """
    """

    Key_AsciiCircum: ... = Qt.Key.Key_AsciiCircum
    """
    """

    Key_AsciiTilde: ... = Qt.Key.Key_AsciiTilde
    """
    """

    Key_Asterisk: ... = Qt.Key.Key_Asterisk
    """
    """

    Key_At: ... = Qt.Key.Key_At
    """
    """

    Key_Atilde: ... = Qt.Key.Key_Atilde
    """
    """

    Key_AudioCycleTrack: ... = Qt.Key.Key_AudioCycleTrack
    """
    """

    Key_AudioForward: ... = Qt.Key.Key_AudioForward
    """
    """

    Key_AudioRandomPlay: ... = Qt.Key.Key_AudioRandomPlay
    """
    """

    Key_AudioRepeat: ... = Qt.Key.Key_AudioRepeat
    """
    """

    Key_AudioRewind: ... = Qt.Key.Key_AudioRewind
    """
    """

    Key_Away: ... = Qt.Key.Key_Away
    """
    """

    Key_B: ... = Qt.Key.Key_B
    """
    """

    Key_Back: ... = Qt.Key.Key_Back
    """
    """

    Key_BackForward: ... = Qt.Key.Key_BackForward
    """
    """

    Key_Backslash: ... = Qt.Key.Key_Backslash
    """
    """

    Key_Backspace: ... = Qt.Key.Key_Backspace
    """
    """

    Key_Backtab: ... = Qt.Key.Key_Backtab
    """
    """

    Key_Bar: ... = Qt.Key.Key_Bar
    """
    """

    Key_BassBoost: ... = Qt.Key.Key_BassBoost
    """
    """

    Key_BassDown: ... = Qt.Key.Key_BassDown
    """
    """

    Key_BassUp: ... = Qt.Key.Key_BassUp
    """
    """

    Key_Battery: ... = Qt.Key.Key_Battery
    """
    """

    Key_Bluetooth: ... = Qt.Key.Key_Bluetooth
    """
    """

    Key_Book: ... = Qt.Key.Key_Book
    """
    """

    Key_BraceLeft: ... = Qt.Key.Key_BraceLeft
    """
    """

    Key_BraceRight: ... = Qt.Key.Key_BraceRight
    """
    """

    Key_BracketLeft: ... = Qt.Key.Key_BracketLeft
    """
    """

    Key_BracketRight: ... = Qt.Key.Key_BracketRight
    """
    """

    Key_BrightnessAdjust: ... = Qt.Key.Key_BrightnessAdjust
    """
    """

    Key_C: ... = Qt.Key.Key_C
    """
    """

    Key_CD: ... = Qt.Key.Key_CD
    """
    """

    Key_Calculator: ... = Qt.Key.Key_Calculator
    """
    """

    Key_Calendar: ... = Qt.Key.Key_Calendar
    """
    """

    Key_Call: ... = Qt.Key.Key_Call
    """
    """

    Key_Camera: ... = Qt.Key.Key_Camera
    """
    """

    Key_CameraFocus: ... = Qt.Key.Key_CameraFocus
    """
    """

    Key_Cancel: ... = Qt.Key.Key_Cancel
    """
    """

    Key_CapsLock: ... = Qt.Key.Key_CapsLock
    """
    """

    Key_Ccedilla: ... = Qt.Key.Key_Ccedilla
    """
    """

    Key_Clear: ... = Qt.Key.Key_Clear
    """
    """

    Key_ClearGrab: ... = Qt.Key.Key_ClearGrab
    """
    """

    Key_Close: ... = Qt.Key.Key_Close
    """
    """

    Key_Codeinput: ... = Qt.Key.Key_Codeinput
    """
    """

    Key_Colon: ... = Qt.Key.Key_Colon
    """
    """

    Key_Comma: ... = Qt.Key.Key_Comma
    """
    """

    Key_Community: ... = Qt.Key.Key_Community
    """
    """

    Key_Context1: ... = Qt.Key.Key_Context1
    """
    """

    Key_Context2: ... = Qt.Key.Key_Context2
    """
    """

    Key_Context3: ... = Qt.Key.Key_Context3
    """
    """

    Key_Context4: ... = Qt.Key.Key_Context4
    """
    """

    Key_ContrastAdjust: ... = Qt.Key.Key_ContrastAdjust
    """
    """

    Key_Control: ... = Qt.Key.Key_Control
    """
    """

    Key_Copy: ... = Qt.Key.Key_Copy
    """
    """

    Key_Cut: ... = Qt.Key.Key_Cut
    """
    """

    Key_D: ... = Qt.Key.Key_D
    """
    """

    Key_DOS: ... = Qt.Key.Key_DOS
    """
    """

    Key_Dead_Abovedot: ... = Qt.Key.Key_Dead_Abovedot
    """
    """

    Key_Dead_Abovering: ... = Qt.Key.Key_Dead_Abovering
    """
    """

    Key_Dead_Acute: ... = Qt.Key.Key_Dead_Acute
    """
    """

    Key_Dead_Belowdot: ... = Qt.Key.Key_Dead_Belowdot
    """
    """

    Key_Dead_Breve: ... = Qt.Key.Key_Dead_Breve
    """
    """

    Key_Dead_Caron: ... = Qt.Key.Key_Dead_Caron
    """
    """

    Key_Dead_Cedilla: ... = Qt.Key.Key_Dead_Cedilla
    """
    """

    Key_Dead_Circumflex: ... = Qt.Key.Key_Dead_Circumflex
    """
    """

    Key_Dead_Diaeresis: ... = Qt.Key.Key_Dead_Diaeresis
    """
    """

    Key_Dead_Doubleacute: ... = Qt.Key.Key_Dead_Doubleacute
    """
    """

    Key_Dead_Grave: ... = Qt.Key.Key_Dead_Grave
    """
    """

    Key_Dead_Hook: ... = Qt.Key.Key_Dead_Hook
    """
    """

    Key_Dead_Horn: ... = Qt.Key.Key_Dead_Horn
    """
    """

    Key_Dead_Iota: ... = Qt.Key.Key_Dead_Iota
    """
    """

    Key_Dead_Macron: ... = Qt.Key.Key_Dead_Macron
    """
    """

    Key_Dead_Ogonek: ... = Qt.Key.Key_Dead_Ogonek
    """
    """

    Key_Dead_Semivoiced_Sound: ...
    """
    Qt.Key.Key_Dead_Semivoiced_S...
    """

    Key_Dead_Tilde: ... = Qt.Key.Key_Dead_Tilde
    """
    """

    Key_Dead_Voiced_Sound: ... = Qt.Key.Key_Dead_Voiced_Sound
    """
    """

    Key_Delete: ... = Qt.Key.Key_Delete
    """
    """

    Key_Direction_L: ... = Qt.Key.Key_Direction_L
    """
    """

    Key_Direction_R: ... = Qt.Key.Key_Direction_R
    """
    """

    Key_Display: ... = Qt.Key.Key_Display
    """
    """

    Key_Documents: ... = Qt.Key.Key_Documents
    """
    """

    Key_Dollar: ... = Qt.Key.Key_Dollar
    """
    """

    Key_Down: ... = Qt.Key.Key_Down
    """
    """

    Key_E: ... = Qt.Key.Key_E
    """
    """

    Key_ETH: ... = Qt.Key.Key_ETH
    """
    """

    Key_Eacute: ... = Qt.Key.Key_Eacute
    """
    """

    Key_Ecircumflex: ... = Qt.Key.Key_Ecircumflex
    """
    """

    Key_Ediaeresis: ... = Qt.Key.Key_Ediaeresis
    """
    """

    Key_Egrave: ... = Qt.Key.Key_Egrave
    """
    """

    Key_Eisu_Shift: ... = Qt.Key.Key_Eisu_Shift
    """
    """

    Key_Eisu_toggle: ... = Qt.Key.Key_Eisu_toggle
    """
    """

    Key_Eject: ... = Qt.Key.Key_Eject
    """
    """

    Key_End: ... = Qt.Key.Key_End
    """
    """

    Key_Enter: ... = Qt.Key.Key_Enter
    """
    """

    Key_Equal: ... = Qt.Key.Key_Equal
    """
    """

    Key_Escape: ... = Qt.Key.Key_Escape
    """
    """

    Key_Excel: ... = Qt.Key.Key_Excel
    """
    """

    Key_Exclam: ... = Qt.Key.Key_Exclam
    """
    """

    Key_Execute: ... = Qt.Key.Key_Execute
    """
    """

    Key_Explorer: ... = Qt.Key.Key_Explorer
    """
    """

    Key_F: ... = Qt.Key.Key_F
    """
    """

    Key_F1: ... = Qt.Key.Key_F1
    """
    """

    Key_F10: ... = Qt.Key.Key_F10
    """
    """

    Key_F11: ... = Qt.Key.Key_F11
    """
    """

    Key_F12: ... = Qt.Key.Key_F12
    """
    """

    Key_F13: ... = Qt.Key.Key_F13
    """
    """

    Key_F14: ... = Qt.Key.Key_F14
    """
    """

    Key_F15: ... = Qt.Key.Key_F15
    """
    """

    Key_F16: ... = Qt.Key.Key_F16
    """
    """

    Key_F17: ... = Qt.Key.Key_F17
    """
    """

    Key_F18: ... = Qt.Key.Key_F18
    """
    """

    Key_F19: ... = Qt.Key.Key_F19
    """
    """

    Key_F2: ... = Qt.Key.Key_F2
    """
    """

    Key_F20: ... = Qt.Key.Key_F20
    """
    """

    Key_F21: ... = Qt.Key.Key_F21
    """
    """

    Key_F22: ... = Qt.Key.Key_F22
    """
    """

    Key_F23: ... = Qt.Key.Key_F23
    """
    """

    Key_F24: ... = Qt.Key.Key_F24
    """
    """

    Key_F25: ... = Qt.Key.Key_F25
    """
    """

    Key_F26: ... = Qt.Key.Key_F26
    """
    """

    Key_F27: ... = Qt.Key.Key_F27
    """
    """

    Key_F28: ... = Qt.Key.Key_F28
    """
    """

    Key_F29: ... = Qt.Key.Key_F29
    """
    """

    Key_F3: ... = Qt.Key.Key_F3
    """
    """

    Key_F30: ... = Qt.Key.Key_F30
    """
    """

    Key_F31: ... = Qt.Key.Key_F31
    """
    """

    Key_F32: ... = Qt.Key.Key_F32
    """
    """

    Key_F33: ... = Qt.Key.Key_F33
    """
    """

    Key_F34: ... = Qt.Key.Key_F34
    """
    """

    Key_F35: ... = Qt.Key.Key_F35
    """
    """

    Key_F4: ... = Qt.Key.Key_F4
    """
    """

    Key_F5: ... = Qt.Key.Key_F5
    """
    """

    Key_F6: ... = Qt.Key.Key_F6
    """
    """

    Key_F7: ... = Qt.Key.Key_F7
    """
    """

    Key_F8: ... = Qt.Key.Key_F8
    """
    """

    Key_F9: ... = Qt.Key.Key_F9
    """
    """

    Key_Favorites: ... = Qt.Key.Key_Favorites
    """
    """

    Key_Finance: ... = Qt.Key.Key_Finance
    """
    """

    Key_Flip: ... = Qt.Key.Key_Flip
    """
    """

    Key_Forward: ... = Qt.Key.Key_Forward
    """
    """

    Key_G: ... = Qt.Key.Key_G
    """
    """

    Key_Game: ... = Qt.Key.Key_Game
    """
    """

    Key_Go: ... = Qt.Key.Key_Go
    """
    """

    Key_Greater: ... = Qt.Key.Key_Greater
    """
    """

    Key_H: ... = Qt.Key.Key_H
    """
    """

    Key_Hangul: ... = Qt.Key.Key_Hangul
    """
    """

    Key_Hangul_Banja: ... = Qt.Key.Key_Hangul_Banja
    """
    """

    Key_Hangul_End: ... = Qt.Key.Key_Hangul_End
    """
    """

    Key_Hangul_Hanja: ... = Qt.Key.Key_Hangul_Hanja
    """
    """

    Key_Hangul_Jamo: ... = Qt.Key.Key_Hangul_Jamo
    """
    """

    Key_Hangul_Jeonja: ... = Qt.Key.Key_Hangul_Jeonja
    """
    """

    Key_Hangul_PostHanja: ... = Qt.Key.Key_Hangul_PostHanja
    """
    """

    Key_Hangul_PreHanja: ... = Qt.Key.Key_Hangul_PreHanja
    """
    """

    Key_Hangul_Romaja: ... = Qt.Key.Key_Hangul_Romaja
    """
    """

    Key_Hangul_Special: ... = Qt.Key.Key_Hangul_Special
    """
    """

    Key_Hangul_Start: ... = Qt.Key.Key_Hangul_Start
    """
    """

    Key_Hangup: ... = Qt.Key.Key_Hangup
    """
    """

    Key_Hankaku: ... = Qt.Key.Key_Hankaku
    """
    """

    Key_Help: ... = Qt.Key.Key_Help
    """
    """

    Key_Henkan: ... = Qt.Key.Key_Henkan
    """
    """

    Key_Hibernate: ... = Qt.Key.Key_Hibernate
    """
    """

    Key_Hiragana: ... = Qt.Key.Key_Hiragana
    """
    """

    Key_Hiragana_Katakana: ... = Qt.Key.Key_Hiragana_Katakana
    """
    """

    Key_History: ... = Qt.Key.Key_History
    """
    """

    Key_Home: ... = Qt.Key.Key_Home
    """
    """

    Key_HomePage: ... = Qt.Key.Key_HomePage
    """
    """

    Key_HotLinks: ... = Qt.Key.Key_HotLinks
    """
    """

    Key_Hyper_L: ... = Qt.Key.Key_Hyper_L
    """
    """

    Key_Hyper_R: ... = Qt.Key.Key_Hyper_R
    """
    """

    Key_I: ... = Qt.Key.Key_I
    """
    """

    Key_Iacute: ... = Qt.Key.Key_Iacute
    """
    """

    Key_Icircumflex: ... = Qt.Key.Key_Icircumflex
    """
    """

    Key_Idiaeresis: ... = Qt.Key.Key_Idiaeresis
    """
    """

    Key_Igrave: ... = Qt.Key.Key_Igrave
    """
    """

    Key_Insert: ... = Qt.Key.Key_Insert
    """
    """

    Key_J: ... = Qt.Key.Key_J
    """
    """

    Key_K: ... = Qt.Key.Key_K
    """
    """

    Key_Kana_Lock: ... = Qt.Key.Key_Kana_Lock
    """
    """

    Key_Kana_Shift: ... = Qt.Key.Key_Kana_Shift
    """
    """

    Key_Kanji: ... = Qt.Key.Key_Kanji
    """
    """

    Key_Katakana: ... = Qt.Key.Key_Katakana
    """
    """

    Key_KeyboardBrightnessDown: ...
    """
    Qt.Key.Key_KeyboardBrightne...
    """

    Key_KeyboardBrightnessUp: ...
    """
    Qt.Key.Key_KeyboardBrightness...
    """

    Key_KeyboardLightOnOff: ... = Qt.Key.Key_KeyboardLightOnOff
    """
    """

    Key_L: ... = Qt.Key.Key_L
    """
    """

    Key_LastNumberRedial: ... = Qt.Key.Key_LastNumberRedial
    """
    """

    Key_Launch0: ... = Qt.Key.Key_Launch0
    """
    """

    Key_Launch1: ... = Qt.Key.Key_Launch1
    """
    """

    Key_Launch2: ... = Qt.Key.Key_Launch2
    """
    """

    Key_Launch3: ... = Qt.Key.Key_Launch3
    """
    """

    Key_Launch4: ... = Qt.Key.Key_Launch4
    """
    """

    Key_Launch5: ... = Qt.Key.Key_Launch5
    """
    """

    Key_Launch6: ... = Qt.Key.Key_Launch6
    """
    """

    Key_Launch7: ... = Qt.Key.Key_Launch7
    """
    """

    Key_Launch8: ... = Qt.Key.Key_Launch8
    """
    """

    Key_Launch9: ... = Qt.Key.Key_Launch9
    """
    """

    Key_LaunchA: ... = Qt.Key.Key_LaunchA
    """
    """

    Key_LaunchB: ... = Qt.Key.Key_LaunchB
    """
    """

    Key_LaunchC: ... = Qt.Key.Key_LaunchC
    """
    """

    Key_LaunchD: ... = Qt.Key.Key_LaunchD
    """
    """

    Key_LaunchE: ... = Qt.Key.Key_LaunchE
    """
    """

    Key_LaunchF: ... = Qt.Key.Key_LaunchF
    """
    """

    Key_LaunchG: ... = Qt.Key.Key_LaunchG
    """
    """

    Key_LaunchH: ... = Qt.Key.Key_LaunchH
    """
    """

    Key_LaunchMail: ... = Qt.Key.Key_LaunchMail
    """
    """

    Key_LaunchMedia: ... = Qt.Key.Key_LaunchMedia
    """
    """

    Key_Left: ... = Qt.Key.Key_Left
    """
    """

    Key_Less: ... = Qt.Key.Key_Less
    """
    """

    Key_LightBulb: ... = Qt.Key.Key_LightBulb
    """
    """

    Key_LogOff: ... = Qt.Key.Key_LogOff
    """
    """

    Key_M: ... = Qt.Key.Key_M
    """
    """

    Key_MailForward: ... = Qt.Key.Key_MailForward
    """
    """

    Key_Market: ... = Qt.Key.Key_Market
    """
    """

    Key_Massyo: ... = Qt.Key.Key_Massyo
    """
    """

    Key_MediaLast: ... = Qt.Key.Key_MediaLast
    """
    """

    Key_MediaNext: ... = Qt.Key.Key_MediaNext
    """
    """

    Key_MediaPause: ... = Qt.Key.Key_MediaPause
    """
    """

    Key_MediaPlay: ... = Qt.Key.Key_MediaPlay
    """
    """

    Key_MediaPrevious: ... = Qt.Key.Key_MediaPrevious
    """
    """

    Key_MediaRecord: ... = Qt.Key.Key_MediaRecord
    """
    """

    Key_MediaStop: ... = Qt.Key.Key_MediaStop
    """
    """

    Key_MediaTogglePlayPause: ...
    """
    Qt.Key.Key_MediaTogglePlayPau...
    """

    Key_Meeting: ... = Qt.Key.Key_Meeting
    """
    """

    Key_Memo: ... = Qt.Key.Key_Memo
    """
    """

    Key_Menu: ... = Qt.Key.Key_Menu
    """
    """

    Key_MenuKB: ... = Qt.Key.Key_MenuKB
    """
    """

    Key_MenuPB: ... = Qt.Key.Key_MenuPB
    """
    """

    Key_Messenger: ... = Qt.Key.Key_Messenger
    """
    """

    Key_Meta: ... = Qt.Key.Key_Meta
    """
    """

    Key_Minus: ... = Qt.Key.Key_Minus
    """
    """

    Key_Mode_switch: ... = Qt.Key.Key_Mode_switch
    """
    """

    Key_MonBrightnessDown: ... = Qt.Key.Key_MonBrightnessDown
    """
    """

    Key_MonBrightnessUp: ... = Qt.Key.Key_MonBrightnessUp
    """
    """

    Key_Muhenkan: ... = Qt.Key.Key_Muhenkan
    """
    """

    Key_Multi_key: ... = Qt.Key.Key_Multi_key
    """
    """

    Key_MultipleCandidate: ... = Qt.Key.Key_MultipleCandidate
    """
    """

    Key_Music: ... = Qt.Key.Key_Music
    """
    """

    Key_MySites: ... = Qt.Key.Key_MySites
    """
    """

    Key_N: ... = Qt.Key.Key_N
    """
    """

    Key_News: ... = Qt.Key.Key_News
    """
    """

    Key_No: ... = Qt.Key.Key_No
    """
    """

    Key_Ntilde: ... = Qt.Key.Key_Ntilde
    """
    """

    Key_NumLock: ... = Qt.Key.Key_NumLock
    """
    """

    Key_NumberSign: ... = Qt.Key.Key_NumberSign
    """
    """

    Key_O: ... = Qt.Key.Key_O
    """
    """

    Key_Oacute: ... = Qt.Key.Key_Oacute
    """
    """

    Key_Ocircumflex: ... = Qt.Key.Key_Ocircumflex
    """
    """

    Key_Odiaeresis: ... = Qt.Key.Key_Odiaeresis
    """
    """

    Key_OfficeHome: ... = Qt.Key.Key_OfficeHome
    """
    """

    Key_Ograve: ... = Qt.Key.Key_Ograve
    """
    """

    Key_Ooblique: ... = Qt.Key.Key_Ooblique
    """
    """

    Key_OpenUrl: ... = Qt.Key.Key_OpenUrl
    """
    """

    Key_Option: ... = Qt.Key.Key_Option
    """
    """

    Key_Otilde: ... = Qt.Key.Key_Otilde
    """
    """

    Key_P: ... = Qt.Key.Key_P
    """
    """

    Key_PageDown: ... = Qt.Key.Key_PageDown
    """
    """

    Key_PageUp: ... = Qt.Key.Key_PageUp
    """
    """

    Key_ParenLeft: ... = Qt.Key.Key_ParenLeft
    """
    """

    Key_ParenRight: ... = Qt.Key.Key_ParenRight
    """
    """

    Key_Paste: ... = Qt.Key.Key_Paste
    """
    """

    Key_Pause: ... = Qt.Key.Key_Pause
    """
    """

    Key_Percent: ... = Qt.Key.Key_Percent
    """
    """

    Key_Period: ... = Qt.Key.Key_Period
    """
    """

    Key_Phone: ... = Qt.Key.Key_Phone
    """
    """

    Key_Pictures: ... = Qt.Key.Key_Pictures
    """
    """

    Key_Play: ... = Qt.Key.Key_Play
    """
    """

    Key_Plus: ... = Qt.Key.Key_Plus
    """
    """

    Key_PowerDown: ... = Qt.Key.Key_PowerDown
    """
    """

    Key_PowerOff: ... = Qt.Key.Key_PowerOff
    """
    """

    Key_PreviousCandidate: ... = Qt.Key.Key_PreviousCandidate
    """
    """

    Key_Print: ... = Qt.Key.Key_Print
    """
    """

    Key_Printer: ... = Qt.Key.Key_Printer
    """
    """

    Key_Q: ... = Qt.Key.Key_Q
    """
    """

    Key_Question: ... = Qt.Key.Key_Question
    """
    """

    Key_QuoteDbl: ... = Qt.Key.Key_QuoteDbl
    """
    """

    Key_QuoteLeft: ... = Qt.Key.Key_QuoteLeft
    """
    """

    Key_R: ... = Qt.Key.Key_R
    """
    """

    Key_Refresh: ... = Qt.Key.Key_Refresh
    """
    """

    Key_Reload: ... = Qt.Key.Key_Reload
    """
    """

    Key_Reply: ... = Qt.Key.Key_Reply
    """
    """

    Key_Return: ... = Qt.Key.Key_Return
    """
    """

    Key_Right: ... = Qt.Key.Key_Right
    """
    """

    Key_Romaji: ... = Qt.Key.Key_Romaji
    """
    """

    Key_RotateWindows: ... = Qt.Key.Key_RotateWindows
    """
    """

    Key_RotationKB: ... = Qt.Key.Key_RotationKB
    """
    """

    Key_RotationPB: ... = Qt.Key.Key_RotationPB
    """
    """

    Key_S: ... = Qt.Key.Key_S
    """
    """

    Key_Save: ... = Qt.Key.Key_Save
    """
    """

    Key_ScreenSaver: ... = Qt.Key.Key_ScreenSaver
    """
    """

    Key_ScrollLock: ... = Qt.Key.Key_ScrollLock
    """
    """

    Key_Search: ... = Qt.Key.Key_Search
    """
    """

    Key_Select: ... = Qt.Key.Key_Select
    """
    """

    Key_Semicolon: ... = Qt.Key.Key_Semicolon
    """
    """

    Key_Send: ... = Qt.Key.Key_Send
    """
    """

    Key_Shift: ... = Qt.Key.Key_Shift
    """
    """

    Key_Shop: ... = Qt.Key.Key_Shop
    """
    """

    Key_SingleCandidate: ... = Qt.Key.Key_SingleCandidate
    """
    """

    Key_Slash: ... = Qt.Key.Key_Slash
    """
    """

    Key_Sleep: ... = Qt.Key.Key_Sleep
    """
    """

    Key_Space: ... = Qt.Key.Key_Space
    """
    """

    Key_Spell: ... = Qt.Key.Key_Spell
    """
    """

    Key_SplitScreen: ... = Qt.Key.Key_SplitScreen
    """
    """

    Key_Standby: ... = Qt.Key.Key_Standby
    """
    """

    Key_Stop: ... = Qt.Key.Key_Stop
    """
    """

    Key_Subtitle: ... = Qt.Key.Key_Subtitle
    """
    """

    Key_Super_L: ... = Qt.Key.Key_Super_L
    """
    """

    Key_Super_R: ... = Qt.Key.Key_Super_R
    """
    """

    Key_Support: ... = Qt.Key.Key_Support
    """
    """

    Key_Suspend: ... = Qt.Key.Key_Suspend
    """
    """

    Key_SysReq: ... = Qt.Key.Key_SysReq
    """
    """

    Key_T: ... = Qt.Key.Key_T
    """
    """

    Key_THORN: ... = Qt.Key.Key_THORN
    """
    """

    Key_Tab: ... = Qt.Key.Key_Tab
    """
    """

    Key_TaskPane: ... = Qt.Key.Key_TaskPane
    """
    """

    Key_Terminal: ... = Qt.Key.Key_Terminal
    """
    """

    Key_Time: ... = Qt.Key.Key_Time
    """
    """

    Key_ToDoList: ... = Qt.Key.Key_ToDoList
    """
    """

    Key_ToggleCallHangup: ... = Qt.Key.Key_ToggleCallHangup
    """
    """

    Key_Tools: ... = Qt.Key.Key_Tools
    """
    """

    Key_TopMenu: ... = Qt.Key.Key_TopMenu
    """
    """

    Key_Touroku: ... = Qt.Key.Key_Touroku
    """
    """

    Key_Travel: ... = Qt.Key.Key_Travel
    """
    """

    Key_TrebleDown: ... = Qt.Key.Key_TrebleDown
    """
    """

    Key_TrebleUp: ... = Qt.Key.Key_TrebleUp
    """
    """

    Key_U: ... = Qt.Key.Key_U
    """
    """

    Key_UWB: ... = Qt.Key.Key_UWB
    """
    """

    Key_Uacute: ... = Qt.Key.Key_Uacute
    """
    """

    Key_Ucircumflex: ... = Qt.Key.Key_Ucircumflex
    """
    """

    Key_Udiaeresis: ... = Qt.Key.Key_Udiaeresis
    """
    """

    Key_Ugrave: ... = Qt.Key.Key_Ugrave
    """
    """

    Key_Underscore: ... = Qt.Key.Key_Underscore
    """
    """

    Key_Up: ... = Qt.Key.Key_Up
    """
    """

    Key_V: ... = Qt.Key.Key_V
    """
    """

    Key_Video: ... = Qt.Key.Key_Video
    """
    """

    Key_View: ... = Qt.Key.Key_View
    """
    """

    Key_VoiceDial: ... = Qt.Key.Key_VoiceDial
    """
    """

    Key_VolumeDown: ... = Qt.Key.Key_VolumeDown
    """
    """

    Key_VolumeMute: ... = Qt.Key.Key_VolumeMute
    """
    """

    Key_VolumeUp: ... = Qt.Key.Key_VolumeUp
    """
    """

    Key_W: ... = Qt.Key.Key_W
    """
    """

    Key_WLAN: ... = Qt.Key.Key_WLAN
    """
    """

    Key_WWW: ... = Qt.Key.Key_WWW
    """
    """

    Key_WakeUp: ... = Qt.Key.Key_WakeUp
    """
    """

    Key_WebCam: ... = Qt.Key.Key_WebCam
    """
    """

    Key_Word: ... = Qt.Key.Key_Word
    """
    """

    Key_X: ... = Qt.Key.Key_X
    """
    """

    Key_Xfer: ... = Qt.Key.Key_Xfer
    """
    """

    Key_Y: ... = Qt.Key.Key_Y
    """
    """

    Key_Yacute: ... = Qt.Key.Key_Yacute
    """
    """

    Key_Yes: ... = Qt.Key.Key_Yes
    """
    """

    Key_Z: ... = Qt.Key.Key_Z
    """
    """

    Key_Zenkaku: ... = Qt.Key.Key_Zenkaku
    """
    """

    Key_Zenkaku_Hankaku: ... = Qt.Key.Key_Zenkaku_Hankaku
    """
    """

    Key_Zoom: ... = Qt.Key.Key_Zoom
    """
    """

    Key_ZoomIn: ... = Qt.Key.Key_ZoomIn
    """
    """

    Key_ZoomOut: ... = Qt.Key.Key_ZoomOut
    """
    """

    Key_acute: ... = Qt.Key.Key_acute
    """
    """

    Key_brokenbar: ... = Qt.Key.Key_brokenbar
    """
    """

    Key_cedilla: ... = Qt.Key.Key_cedilla
    """
    """

    Key_cent: ... = Qt.Key.Key_cent
    """
    """

    Key_copyright: ... = Qt.Key.Key_copyright
    """
    """

    Key_currency: ... = Qt.Key.Key_currency
    """
    """

    Key_degree: ... = Qt.Key.Key_degree
    """
    """

    Key_diaeresis: ... = Qt.Key.Key_diaeresis
    """
    """

    Key_division: ... = Qt.Key.Key_division
    """
    """

    Key_exclamdown: ... = Qt.Key.Key_exclamdown
    """
    """

    Key_guillemotleft: ... = Qt.Key.Key_guillemotleft
    """
    """

    Key_guillemotright: ... = Qt.Key.Key_guillemotright
    """
    """

    Key_hyphen: ... = Qt.Key.Key_hyphen
    """
    """

    Key_iTouch: ... = Qt.Key.Key_iTouch
    """
    """

    Key_macron: ... = Qt.Key.Key_macron
    """
    """

    Key_masculine: ... = Qt.Key.Key_masculine
    """
    """

    Key_mu: ... = Qt.Key.Key_mu
    """
    """

    Key_multiply: ... = Qt.Key.Key_multiply
    """
    """

    Key_nobreakspace: ... = Qt.Key.Key_nobreakspace
    """
    """

    Key_notsign: ... = Qt.Key.Key_notsign
    """
    """

    Key_onehalf: ... = Qt.Key.Key_onehalf
    """
    """

    Key_onequarter: ... = Qt.Key.Key_onequarter
    """
    """

    Key_onesuperior: ... = Qt.Key.Key_onesuperior
    """
    """

    Key_ordfeminine: ... = Qt.Key.Key_ordfeminine
    """
    """

    Key_paragraph: ... = Qt.Key.Key_paragraph
    """
    """

    Key_periodcentered: ... = Qt.Key.Key_periodcentered
    """
    """

    Key_plusminus: ... = Qt.Key.Key_plusminus
    """
    """

    Key_questiondown: ... = Qt.Key.Key_questiondown
    """
    """

    Key_registered: ... = Qt.Key.Key_registered
    """
    """

    Key_section: ... = Qt.Key.Key_section
    """
    """

    Key_ssharp: ... = Qt.Key.Key_ssharp
    """
    """

    Key_sterling: ... = Qt.Key.Key_sterling
    """
    """

    Key_threequarters: ... = Qt.Key.Key_threequarters
    """
    """

    Key_threesuperior: ... = Qt.Key.Key_threesuperior
    """
    """

    Key_twosuperior: ... = Qt.Key.Key_twosuperior
    """
    """

    Key_unknown: ... = Qt.Key.Key_unknown
    """
    """

    Key_ydiaeresis: ... = Qt.Key.Key_ydiaeresis
    """
    """

    Key_yen: ... = Qt.Key.Key_yen
    """
    """

    KeyboardModifier: ...
    """
    <type 'Qt.KeyboardModifier'>
    """

    KeyboardModifierMask: ...
    """
    Qt.KeyboardModifier.KeyboardModif...
    """

    KeyboardModifiers: ...
    """
    <type 'KeyboardModifiers'>
    """

    KeypadModifier: ... = Qt.KeyboardModifier.KeypadModifier
    """
    """

    LastCursor: ... = Qt.CursorShape.LastCursor
    """
    """

    LastGestureType: ... = Qt.GestureType.LastGestureType
    """
    """

    LayoutDirection: ...
    """
    <type 'Qt.LayoutDirection'>
    """

    LayoutDirectionAuto: ...
    """
    Qt.LayoutDirection.LayoutDirection...
    """

    LeftArrow: ... = Qt.ArrowType.LeftArrow
    """
    """

    LeftButton: ... = Qt.MouseButton.LeftButton
    """
    """

    LeftDockWidgetArea: ...
    """
    Qt.DockWidgetArea.LeftDockWidgetAre...
    """

    LeftSection: ... = Qt.WindowFrameSection.LeftSection
    """
    """

    LeftToRight: ... = Qt.LayoutDirection.LeftToRight
    """
    """

    LeftToolBarArea: ... = Qt.ToolBarArea.LeftToolBarArea
    """
    """

    LinearGradientPattern: ...
    """
    Qt.BrushStyle.LinearGradientPatt...
    """

    LinkAction: ... = Qt.DropAction.LinkAction
    """
    """

    LinksAccessibleByKeyboard: ...
    """
    Qt.StrInteractionFlag.Links...
    """

    LinksAccessibleByMouse: ...
    """
    Qt.StrInteractionFlag.LinksAcc...
    """

    LocalDate: ... = Qt.DateFormat.LocalDate
    """
    """

    LocalTime: ... = Qt.TimeSpec.LocalTime
    """
    """

    LocaleDate: ... = Qt.DateFormat.LocaleDate
    """
    """

    LogStr: ... = Qt.StrFormat.LogStr
    """
    """

    LogicalCoordinates: ...
    """
    Qt.CoordinateSystem.LogicalCoordina...
    """

    LogicalMoveStyle: ... = Qt.CursorMoveStyle.LogicalMoveStyle
    """
    """

    LowEventPriority: ... = Qt.EventPriority.LowEventPriority
    """
    """

    META: ... = Qt.Modifier.META
    """
    """

    MODIFIER_MASK: ... = Qt.Modifier.MODIFIER_MASK
    """
    """

    MPenCapStyle: ... = Qt.PenCapStyle.MPenCapStyle
    """
    """

    MPenJoinStyle: ... = Qt.PenJoinStyle.MPenJoinStyle
    """
    """

    MPenStyle: ... = Qt.PenStyle.MPenStyle
    """
    """

    MSWindowsFixedSizeDialogHint: ...
    """
    Qt.WindowType.MSWindowsFi...
    """

    MSWindowsOwnDC: ... = Qt.WindowType.MSWindowsOwnDC
    """
    """

    MacWindowToolBarButtonHint: ...
    """
    Qt.WindowType.MacWindowTool...
    """

    MaskInColor: ... = Qt.MaskMode.MaskInColor
    """
    """

    MaskMode: ...
    """
    <type 'Qt.MaskMode'>
    """

    MaskOutColor: ... = Qt.MaskMode.MaskOutColor
    """
    """

    MatchCaseSensitive: ... = Qt.MatchFlag.MatchCaseSensitive
    """
    """

    MatchContains: ... = Qt.MatchFlag.MatchContains
    """
    """

    MatchEndsWith: ... = Qt.MatchFlag.MatchEndsWith
    """
    """

    MatchExactly: ... = Qt.MatchFlag.MatchExactly
    """
    """

    MatchFixedString: ... = Qt.MatchFlag.MatchFixedString
    """
    """

    MatchFlag: ...
    """
    <type 'Qt.MatchFlag'>
    """

    MatchFlags: ...
    """
    <type 'MatchFlags'>
    """

    MatchRecursive: ... = Qt.MatchFlag.MatchRecursive
    """
    """

    MatchRegExp: ... = Qt.MatchFlag.MatchRegExp
    """
    """

    MatchStartsWith: ... = Qt.MatchFlag.MatchStartsWith
    """
    """

    MatchWildcard: ... = Qt.MatchFlag.MatchWildcard
    """
    """

    MatchWrap: ... = Qt.MatchFlag.MatchWrap
    """
    """

    MaximumSize: ... = Qt.SizeHint.MaximumSize
    """
    """

    MenuBarFocusReason: ... = Qt.FocusReason.MenuBarFocusReason
    """
    """

    MetaModifier: ... = Qt.KeyboardModifier.MetaModifier
    """
    """

    MidButton: ... = Qt.MouseButton.MidButton
    """
    """

    MiddleButton: ... = Qt.MouseButton.MiddleButton
    """
    """

    MinimumDescent: ... = Qt.SizeHint.MinimumDescent
    """
    """

    MinimumSize: ... = Qt.SizeHint.MinimumSize
    """
    """

    MiterJoin: ... = Qt.PenJoinStyle.MiterJoin
    """
    """

    Modifier: ...
    """
    <type 'Qt.Modifier'>
    """

    Monday: ... = Qt.DayOfWeek.Monday
    """
    """

    MonoOnly: ... = Qt.ImageConversionFlag.MonoOnly
    """
    """

    MouseButton: ...
    """
    <type 'Qt.MouseButton'>
    """

    MouseButtonMask: ... = Qt.MouseButton.MouseButtonMask
    """
    """

    MouseButtons: ...
    """
    <type 'MouseButtons'>
    """

    MouseFocusReason: ... = Qt.FocusReason.MouseFocusReason
    """
    """

    MoveAction: ... = Qt.DropAction.MoveAction
    """
    """

    NDockWidgetAreas: ...
    """
    Qt.DockWidgetAreaSizes.NDockWidgetAre...
    """

    NSizeHints: ... = Qt.SizeHint.NSizeHints
    """
    """

    NToolBarAreas: ... = Qt.ToolBarAreaSizes.NToolBarAreas
    """
    """

    NavigationMode: ...
    """
    <type 'Qt.NavigationMode'>
    """

    NavigationModeCursorAuto: ...
    """
    Qt.NavigationMode.NavigationM...
    """

    NavigationModeCursorForceVisible: ...
    """
    Qt.NavigationMode.Nav...
    """

    NavigationModeKeypadDirectional: ...
    """
    Qt.NavigationMode.Navi...
    """

    NavigationModeKeypadTabOrder: ...
    """
    Qt.NavigationMode.Navigat...
    """

    NavigationModeNone: ...
    """
    Qt.NavigationMode.NavigationModeNon...
    """

    NoAlpha: ... = Qt.ImageConversionFlag.NoAlpha
    """
    """

    NoArrow: ... = Qt.ArrowType.NoArrow
    """
    """

    NoBrush: ... = Qt.BrushStyle.NoBrush
    """
    """

    NoButton: ... = Qt.MouseButton.NoButton
    """
    """

    NoClip: ... = Qt.ClipOperation.NoClip
    """
    """

    NoContextMenu: ... = Qt.ContextMenuPolicy.NoContextMenu
    """
    """

    NoDockWidgetArea: ... = Qt.DockWidgetArea.NoDockWidgetArea
    """
    """

    NoFocus: ... = Qt.FocusPolicy.NoFocus
    """
    """

    NoFocusReason: ... = Qt.FocusReason.NoFocusReason
    """
    """

    NoFormatConversion: ...
    """
    Qt.ImageConversionFlag.NoFormatConv...
    """

    NoGesture: ... = Qt.GestureState.NoGesture
    """
    """

    NoItemFlags: ... = Qt.ItemFlag.NoItemFlags
    """
    """

    NoModifier: ... = Qt.KeyboardModifier.NoModifier
    """
    """

    NoOpaqueDetection: ...
    """
    Qt.ImageConversionFlag.NoOpaqueDetec...
    """

    NoPen: ... = Qt.PenStyle.NoPen
    """
    """

    NoSection: ... = Qt.WindowFrameSection.NoSection
    """
    """

    NoStrInteraction: ...
    """
    Qt.StrInteractionFlag.NoStrInterac...
    """

    NoToolBarArea: ... = Qt.ToolBarArea.NoToolBarArea
    """
    """

    NonModal: ... = Qt.WindowModality.NonModal
    """
    """

    NormalEventPriority: ...
    """
    Qt.EventPriority.NormalEventPriori...
    """

    OddEvenFill: ... = Qt.FillRule.OddEvenFill
    """
    """

    OffsetFromUTC: ... = Qt.TimeSpec.OffsetFromUTC
    """
    """

    OpaqueMode: ... = Qt.BGMode.OpaqueMode
    """
    """

    OpenHandCursor: ... = Qt.CursorShape.OpenHandCursor
    """
    """

    OrderedAlphaDither: ...
    """
    Qt.ImageConversionFlag.OrderedAlpha...
    """

    OrderedDither: ... = Qt.ImageConversionFlag.OrderedDither
    """
    """

    Orientation: ...
    """
    <type 'Qt.Orientation'>
    """

    Orientations: ...
    """
    <type 'Orientations'>
    """

    OtherFocusReason: ... = Qt.FocusReason.OtherFocusReason
    """
    """

    PanGesture: ... = Qt.GestureType.PanGesture
    """
    """

    PartiallyChecked: ... = Qt.CheckState.PartiallyChecked
    """
    """

    PenCapStyle: ...
    """
    <type 'Qt.PenCapStyle'>
    """

    PenJoinStyle: ...
    """
    <type 'Qt.PenJoinStyle'>
    """

    PenStyle: ...
    """
    <type 'Qt.PenStyle'>
    """

    PinchGesture: ... = Qt.GestureType.PinchGesture
    """
    """

    PlainStr: ... = Qt.StrFormat.PlainStr
    """
    """

    PointingHandCursor: ... = Qt.CursorShape.PointingHandCursor
    """
    """

    Popup: ... = Qt.WindowType.Popup
    """
    """

    PopupFocusReason: ... = Qt.FocusReason.PopupFocusReason
    """
    """

    PreferDither: ... = Qt.ImageConversionFlag.PreferDither
    """
    """

    PreferredSize: ... = Qt.SizeHint.PreferredSize
    """
    """

    PreventContextMenu: ...
    """
    Qt.ContextMenuPolicy.PreventContext...
    """

    QueuedConnection: ... = Qt.ConnectionType.QueuedConnection
    """
    """

    RadialGradientPattern: ...
    """
    Qt.BrushStyle.RadialGradientPatt...
    """

    ReceivePartialGestures: ...
    """
    Qt.GestureFlag.ReceivePartialGe...
    """

    RelativeSize: ... = Qt.SizeMode.RelativeSize
    """
    """

    RepeatTile: ... = Qt.TileRule.RepeatTile
    """
    """

    ReplaceClip: ... = Qt.ClipOperation.ReplaceClip
    """
    """

    RichStr: ... = Qt.StrFormat.RichStr
    """
    """

    RightArrow: ... = Qt.ArrowType.RightArrow
    """
    """

    RightButton: ... = Qt.MouseButton.RightButton
    """
    """

    RightDockWidgetArea: ...
    """
    Qt.DockWidgetArea.RightDockWidgetA...
    """

    RightSection: ... = Qt.WindowFrameSection.RightSection
    """
    """

    RightToLeft: ... = Qt.LayoutDirection.RightToLeft
    """
    """

    RightToolBarArea: ... = Qt.ToolBarArea.RightToolBarArea
    """
    """

    RoundCap: ... = Qt.PenCapStyle.RoundCap
    """
    """

    RoundJoin: ... = Qt.PenJoinStyle.RoundJoin
    """
    """

    RoundTile: ... = Qt.TileRule.RoundTile
    """
    """

    SHIFT: ... = Qt.Modifier.SHIFT
    """
    """

    Saturday: ... = Qt.DayOfWeek.Saturday
    """
    """

    ScrollBarAlwaysOff: ...
    """
    Qt.ScrollBarPolicy.ScrollBarAlwaysO...
    """

    ScrollBarAlwaysOn: ... = Qt.ScrollBarPolicy.ScrollBarAlwaysOn
    """
    """

    ScrollBarAsNeeded: ... = Qt.ScrollBarPolicy.ScrollBarAsNeeded
    """
    """

    ScrollBarPolicy: ...
    """
    <type 'Qt.ScrollBarPolicy'>
    """

    Sheet: ... = Qt.WindowType.Sheet
    """
    """

    ShiftModifier: ... = Qt.KeyboardModifier.ShiftModifier
    """
    """

    ShortcutContext: ...
    """
    <type 'Qt.ShortcutContext'>
    """

    ShortcutFocusReason: ... = Qt.FocusReason.ShortcutFocusReason
    """
    """

    SizeAllCursor: ... = Qt.CursorShape.SizeAllCursor
    """
    """

    SizeBDiagCursor: ... = Qt.CursorShape.SizeBDiagCursor
    """
    """

    SizeFDiagCursor: ... = Qt.CursorShape.SizeFDiagCursor
    """
    """

    SizeHint: ...
    """
    <type 'Qt.SizeHint'>
    """

    SizeHintRole: ... = Qt.ItemDataRole.SizeHintRole
    """
    """

    SizeHorCursor: ... = Qt.CursorShape.SizeHorCursor
    """
    """

    SizeMode: ...
    """
    <type 'Qt.SizeMode'>
    """

    SizeVerCursor: ... = Qt.CursorShape.SizeVerCursor
    """
    """

    SmoothTransformation: ...
    """
    Qt.TransformationMode.SmoothTrans...
    """

    SolidLine: ... = Qt.PenStyle.SolidLine
    """
    """

    SolidPattern: ... = Qt.BrushStyle.SolidPattern
    """
    """

    SortOrder: ...
    """
    <type 'Qt.SortOrder'>
    """

    SplashScreen: ... = Qt.WindowType.SplashScreen
    """
    """

    SplitHCursor: ... = Qt.CursorShape.SplitHCursor
    """
    """

    SplitVCursor: ... = Qt.CursorShape.SplitVCursor
    """
    """

    SquareCap: ... = Qt.PenCapStyle.SquareCap
    """
    """

    StatusTipPropertyRole: ...
    """
    Qt.ItemDataRole.StatusTipPropert...
    """

    StatusTipRole: ... = Qt.ItemDataRole.StatusTipRole
    """
    """

    StretchTile: ... = Qt.TileRule.StretchTile
    """
    """

    StrongFocus: ... = Qt.FocusPolicy.StrongFocus
    """
    """

    SubWindow: ... = Qt.WindowType.SubWindow
    """
    """

    Sunday: ... = Qt.DayOfWeek.Sunday
    """
    """

    SvgMiterJoin: ... = Qt.PenJoinStyle.SvgMiterJoin
    """
    """

    SwipeGesture: ... = Qt.GestureType.SwipeGesture
    """
    """

    SystemLocaleDate: ... = Qt.DateFormat.SystemLocaleDate
    """
    """

    SystemLocaleLongDate: ...
    """
    Qt.DateFormat.SystemLocaleLongDat...
    """

    SystemLocaleShortDate: ...
    """
    Qt.DateFormat.SystemLocaleShortD...
    """

    TabFocus: ... = Qt.FocusPolicy.TabFocus
    """
    """

    TabFocusReason: ... = Qt.FocusReason.TabFocusReason
    """
    """

    TapAndHoldGesture: ... = Qt.GestureType.TapAndHoldGesture
    """
    """

    TapGesture: ... = Qt.GestureType.TapGesture
    """
    """

    TargetMoveAction: ... = Qt.DropAction.TargetMoveAction
    """
    """

    StrAlignmentRole: ... = Qt.ItemDataRole.StrAlignmentRole
    """
    """

    StrBrowserInteraction: ...
    """
    Qt.StrInteractionFlag.StrBrow...
    """

    StrBypassShaping: ... = Qt.StrFlag.StrBypassShaping
    """
    """

    StrColorRole: ... = Qt.ItemDataRole.StrColorRole
    """
    """

    StrDate: ... = Qt.DateFormat.StrDate
    """
    """

    StrDontClip: ... = Qt.StrFlag.StrDontClip
    """
    """

    StrDontPrint: ... = Qt.StrFlag.StrDontPrint
    """
    """

    StrEditable: ... = Qt.StrInteractionFlag.StrEditable
    """
    """

    StrEditorInteraction: ...
    """
    Qt.StrInteractionFlag.StrEdito...
    """

    StrElideMode: ...
    """
    <type 'Qt.StrElideMode'>
    """

    StrExpandTabs: ... = Qt.StrFlag.StrExpandTabs
    """
    """

    StrFlag: ...
    """
    <type 'Qt.StrFlag'>
    """

    StrForceLeftToRight: ... = Qt.StrFlag.StrForceLeftToRight
    """
    """

    StrForceRightToLeft: ... = Qt.StrFlag.StrForceRightToLeft
    """
    """

    StrFormat: ...
    """
    <type 'Qt.StrFormat'>
    """

    StrHideMnemonic: ... = Qt.StrFlag.StrHideMnemonic
    """
    """

    StrIncludeTrailingSpaces: ...
    """
    Qt.StrFlag.StrIncludeTrail...
    """

    StrInteractionFlag: ...
    """
    <type 'Qt.StrInteractionFlag'>
    """

    StrInteractionFlags: ...
    """
    <type 'StrInteractionFlags'>
    """

    StrJustificationForced: ...
    """
    Qt.StrFlag.StrJustificationF...
    """

    StrLongestVariant: ... = Qt.StrFlag.StrLongestVariant
    """
    """

    StrSelectableByKeyboard: ...
    """
    Qt.StrInteractionFlag.StrSe...
    """

    StrSelectableByMouse: ...
    """
    Qt.StrInteractionFlag.StrSelec...
    """

    StrShowMnemonic: ... = Qt.StrFlag.StrShowMnemonic
    """
    """

    StrSingleLine: ... = Qt.StrFlag.StrSingleLine
    """
    """

    StrWordWrap: ... = Qt.StrFlag.StrWordWrap
    """
    """

    StrWrapAnywhere: ... = Qt.StrFlag.StrWrapAnywhere
    """
    """

    StrurePattern: ... = Qt.BrushStyle.StrurePattern
    """
    """

    ThresholdAlphaDither: ...
    """
    Qt.ImageConversionFlag.ThresholdA...
    """

    ThresholdDither: ... = Qt.ImageConversionFlag.ThresholdDither
    """
    """

    Thursday: ... = Qt.DayOfWeek.Thursday
    """
    """

    TileRule: ...
    """
    <type 'Qt.TileRule'>
    """

    TimeSpec: ...
    """
    <type 'Qt.TimeSpec'>
    """

    TitleBarArea: ... = Qt.WindowFrameSection.TitleBarArea
    """
    """

    Tool: ... = Qt.WindowType.Tool
    """
    """

    ToolBarArea: ...
    """
    <type 'Qt.ToolBarArea'>
    """

    ToolBarAreaSizes: ...
    """
    <type 'Qt.ToolBarAreaSizes'>
    """

    ToolBarArea_Mask: ... = Qt.ToolBarArea.ToolBarArea_Mask
    """
    """

    ToolBarAreas: ...
    """
    <type 'ToolBarAreas'>
    """

    ToolButtonFollowStyle: ...
    """
    Qt.ToolButtonStyle.ToolButtonFol...
    """

    ToolButtonIconOnly: ...
    """
    Qt.ToolButtonStyle.ToolButtonIconOn...
    """

    ToolButtonStyle: ...
    """
    <type 'Qt.ToolButtonStyle'>
    """

    ToolButtonStrBesideIcon: ...
    """
    Qt.ToolButtonStyle.ToolButton...
    """

    ToolButtonStrOnly: ...
    """
    Qt.ToolButtonStyle.ToolButtonStrOn...
    """

    ToolButtonStrUnderIcon: ...
    """
    Qt.ToolButtonStyle.ToolButtonT...
    """

    ToolTip: ... = Qt.WindowType.ToolTip
    """
    """

    ToolTipPropertyRole: ...
    """
    Qt.ItemDataRole.ToolTipPropertyRol...
    """

    ToolTipRole: ... = Qt.ItemDataRole.ToolTipRole
    """
    """

    TopDockWidgetArea: ... = Qt.DockWidgetArea.TopDockWidgetArea
    """
    """

    TopLeftCorner: ... = Qt.Corner.TopLeftCorner
    """
    """

    TopLeftSection: ... = Qt.WindowFrameSection.TopLeftSection
    """
    """

    TopRightCorner: ... = Qt.Corner.TopRightCorner
    """
    """

    TopRightSection: ... = Qt.WindowFrameSection.TopRightSection
    """
    """

    TopSection: ... = Qt.WindowFrameSection.TopSection
    """
    """

    TopToolBarArea: ... = Qt.ToolBarArea.TopToolBarArea
    """
    """

    TouchPointMoved: ... = Qt.TouchPointState.TouchPointMoved
    """
    """

    TouchPointPressed: ... = Qt.TouchPointState.TouchPointPressed
    """
    """

    TouchPointPrimary: ... = Qt.TouchPointState.TouchPointPrimary
    """
    """

    TouchPointReleased: ...
    """
    Qt.TouchPointState.TouchPointReleas...
    """

    TouchPointState: ...
    """
    <type 'Qt.TouchPointState'>
    """

    TouchPointStateMask: ...
    """
    Qt.TouchPointState.TouchPointState...
    """

    TouchPointStationary: ...
    """
    Qt.TouchPointState.TouchPointStat...
    """

    TransformationMode: ...
    """
    <type 'Qt.TransformationMode'>
    """

    TransparentMode: ... = Qt.BGMode.TransparentMode
    """
    """

    Tuesday: ... = Qt.DayOfWeek.Tuesday
    """
    """

    UIEffect: ...
    """
    <type 'Qt.UIEffect'>
    """

    UI_AnimateCombo: ... = Qt.UIEffect.UI_AnimateCombo
    """
    """

    UI_AnimateMenu: ... = Qt.UIEffect.UI_AnimateMenu
    """
    """

    UI_AnimateToolBox: ... = Qt.UIEffect.UI_AnimateToolBox
    """
    """

    UI_AnimateTooltip: ... = Qt.UIEffect.UI_AnimateTooltip
    """
    """

    UI_FadeMenu: ... = Qt.UIEffect.UI_FadeMenu
    """
    """

    UI_FadeTooltip: ... = Qt.UIEffect.UI_FadeTooltip
    """
    """

    UI_General: ... = Qt.UIEffect.UI_General
    """
    """

    UNICODE_ACCEL: ... = Qt.Modifier.UNICODE_ACCEL
    """
    """

    UTC: ... = Qt.TimeSpec.UTC
    """
    """

    Unchecked: ... = Qt.CheckState.Unchecked
    """
    """

    UniqueConnection: ... = Qt.ConnectionType.UniqueConnection
    """
    """

    UniteClip: ... = Qt.ClipOperation.UniteClip
    """
    """

    UpArrow: ... = Qt.ArrowType.UpArrow
    """
    """

    UpArrowCursor: ... = Qt.CursorShape.UpArrowCursor
    """
    """

    UserRole: ... = Qt.ItemDataRole.UserRole
    """
    """

    VerPattern: ... = Qt.BrushStyle.VerPattern
    """
    """

    Vertical: ... = Qt.Orientation.Vertical
    """
    """

    VisualMoveStyle: ... = Qt.CursorMoveStyle.VisualMoveStyle
    """
    """

    WA_AcceptDrops: ... = Qt.WidgetAttribute.WA_AcceptDrops
    """
    """

    WA_AcceptTouchEvents: ...
    """
    Qt.WidgetAttribute.WA_AcceptTouch...
    """

    WA_AlwaysShowToolTips: ...
    """
    Qt.WidgetAttribute.WA_AlwaysShow...
    """

    WA_AttributeCount: ... = Qt.WidgetAttribute.WA_AttributeCount
    """
    """

    WA_AutoOrientation: ...
    """
    Qt.WidgetAttribute.WA_AutoOrientati...
    """

    WA_CanHostQMdiSubWindowTitleBar: ...
    """
    Qt.WidgetAttribute.WA_...
    """

    WA_ContentsPropagated: ...
    """
    Qt.WidgetAttribute.WA_ContentsPr...
    """

    WA_CustomWhatsThis: ...
    """
    Qt.WidgetAttribute.WA_CustomWhatsTh...
    """

    WA_DeleteOnClose: ... = Qt.WidgetAttribute.WA_DeleteOnClose
    """
    """

    WA_Disabled: ... = Qt.WidgetAttribute.WA_Disabled
    """
    """

    WA_DontCreateNativeAncestors: ...
    """
    Qt.WidgetAttribute.WA_Don...
    """

    WA_DontShowOnScreen: ...
    """
    Qt.WidgetAttribute.WA_DontShowOnSc...
    """

    WA_DropSiteRegistered: ...
    """
    Qt.WidgetAttribute.WA_DropSiteRe...
    """

    WA_ForceAcceptDrops: ...
    """
    Qt.WidgetAttribute.WA_ForceAcceptD...
    """

    WA_ForceDisabled: ... = Qt.WidgetAttribute.WA_ForceDisabled
    """
    """

    WA_ForceUpdatesDisabled: ...
    """
    Qt.WidgetAttribute.WA_ForceUpd...
    """

    WA_GrabbedShortcut: ...
    """
    Qt.WidgetAttribute.WA_GrabbedShortc...
    """

    WA_GroupLeader: ... = Qt.WidgetAttribute.WA_GroupLeader
    """
    """

    WA_Hover: ... = Qt.WidgetAttribute.WA_Hover
    """
    """

    WA_InputMethodEnabled: ...
    """
    Qt.WidgetAttribute.WA_InputMetho...
    """

    WA_InputMethodTransparent: ...
    """
    Qt.WidgetAttribute.WA_InputM...
    """

    WA_InvalidSize: ... = Qt.WidgetAttribute.WA_InvalidSize
    """
    """

    WA_KeyCompression: ... = Qt.WidgetAttribute.WA_KeyCompression
    """
    """

    WA_KeyboardFocusChange: ...
    """
    Qt.WidgetAttribute.WA_KeyboardF...
    """

    WA_LaidOut: ... = Qt.WidgetAttribute.WA_LaidOut
    """
    """

    WA_LayoutOnEntireRect: ...
    """
    Qt.WidgetAttribute.WA_LayoutOnEn...
    """

    WA_LayoutUsesWidgetRect: ...
    """
    Qt.WidgetAttribute.WA_LayoutUs...
    """

    WA_LockLandscapeOrientation: ...
    """
    Qt.WidgetAttribute.WA_Lock...
    """

    WA_LockPortraitOrientation: ...
    """
    Qt.WidgetAttribute.WA_LockP...
    """

    WA_MSWindowsUseDirect3D: ...
    """
    Qt.WidgetAttribute.WA_MSWindow...
    """

    WA_MacAlwaysShowToolWindow: ...
    """
    Qt.WidgetAttribute.WA_MacAl...
    """

    WA_MacBrushedMetal: ...
    """
    Qt.WidgetAttribute.WA_MacBrushedMet...
    """

    WA_MacFrameworkScaled: ...
    """
    Qt.WidgetAttribute.WA_MacFramewo...
    """

    WA_MacMetalStyle: ... = Qt.WidgetAttribute.WA_MacMetalStyle
    """
    """

    WA_MacMiniSize: ... = Qt.WidgetAttribute.WA_MacMiniSize
    """
    """

    WA_MacNoClickThrough: ...
    """
    Qt.WidgetAttribute.WA_MacNoClickT...
    """

    WA_MacNoShadow: ... = Qt.WidgetAttribute.WA_MacNoShadow
    """
    """

    WA_MacNormalSize: ... = Qt.WidgetAttribute.WA_MacNormalSize
    """
    """

    WA_MacOpaqueSizeGrip: ...
    """
    Qt.WidgetAttribute.WA_MacOpaqueSi...
    """

    WA_MacShowFocusRect: ...
    """
    Qt.WidgetAttribute.WA_MacShowFocus...
    """

    WA_MacSmallSize: ... = Qt.WidgetAttribute.WA_MacSmallSize
    """
    """

    WA_MacVariableSize: ...
    """
    Qt.WidgetAttribute.WA_MacVariableSi...
    """

    WA_Mapped: ... = Qt.WidgetAttribute.WA_Mapped
    """
    """

    WA_MergeSoftkeys: ... = Qt.WidgetAttribute.WA_MergeSoftkeys
    """
    """

    WA_MergeSoftkeysRecursively: ...
    """
    Qt.WidgetAttribute.WA_Merg...
    """

    WA_MouseNoMask: ... = Qt.WidgetAttribute.WA_MouseNoMask
    """
    """

    WA_MouseTracking: ... = Qt.WidgetAttribute.WA_MouseTracking
    """
    """

    WA_Moved: ... = Qt.WidgetAttribute.WA_Moved
    """
    """

    WA_NativeWindow: ... = Qt.WidgetAttribute.WA_NativeWindow
    """
    """

    WA_NoBackground: ... = Qt.WidgetAttribute.WA_NoBackground
    """
    """

    WA_NoChildEventsForParent: ...
    """
    Qt.WidgetAttribute.WA_NoChil...
    """

    WA_NoChildEventsFromChildren: ...
    """
    Qt.WidgetAttribute.WA_NoC...
    """

    WA_NoMousePropagation: ...
    """
    Qt.WidgetAttribute.WA_NoMousePro...
    """

    WA_NoMouseReplay: ... = Qt.WidgetAttribute.WA_NoMouseReplay
    """
    """

    WA_NoSystemBackground: ...
    """
    Qt.WidgetAttribute.WA_NoSystemBa...
    """

    WA_NoX11EventCompression: ...
    """
    Qt.WidgetAttribute.WA_NoX11Ev...
    """

    WA_OpaquePaintEvent: ...
    """
    Qt.WidgetAttribute.WA_OpaquePaintE...
    """

    WA_OutsideWSRange: ... = Qt.WidgetAttribute.WA_OutsideWSRange
    """
    """

    WA_PaintOnScreen: ... = Qt.WidgetAttribute.WA_PaintOnScreen
    """
    """

    WA_PaintOutsidePaintEvent: ...
    """
    Qt.WidgetAttribute.WA_PaintO...
    """

    WA_PaintUnclipped: ... = Qt.WidgetAttribute.WA_PaintUnclipped
    """
    """

    WA_PendingMoveEvent: ...
    """
    Qt.WidgetAttribute.WA_PendingMoveE...
    """

    WA_PendingResizeEvent: ...
    """
    Qt.WidgetAttribute.WA_PendingRes...
    """

    WA_PendingUpdate: ... = Qt.WidgetAttribute.WA_PendingUpdate
    """
    """

    WA_QuitOnClose: ... = Qt.WidgetAttribute.WA_QuitOnClose
    """
    """

    WA_Resized: ... = Qt.WidgetAttribute.WA_Resized
    """
    """

    WA_RightToLeft: ... = Qt.WidgetAttribute.WA_RightToLeft
    """
    """

    WA_SetCursor: ... = Qt.WidgetAttribute.WA_SetCursor
    """
    """

    WA_SetFont: ... = Qt.WidgetAttribute.WA_SetFont
    """
    """

    WA_SetLayoutDirection: ...
    """
    Qt.WidgetAttribute.WA_SetLayoutD...
    """

    WA_SetLocale: ... = Qt.WidgetAttribute.WA_SetLocale
    """
    """

    WA_SetPalette: ... = Qt.WidgetAttribute.WA_SetPalette
    """
    """

    WA_SetStyle: ... = Qt.WidgetAttribute.WA_SetStyle
    """
    """

    WA_SetWindowIcon: ... = Qt.WidgetAttribute.WA_SetWindowIcon
    """
    """

    WA_SetWindowModality: ...
    """
    Qt.WidgetAttribute.WA_SetWindowMo...
    """

    WA_ShowModal: ... = Qt.WidgetAttribute.WA_ShowModal
    """
    """

    WA_ShowWithoutActivating: ...
    """
    Qt.WidgetAttribute.WA_ShowWit...
    """

    WA_StaticContents: ... = Qt.WidgetAttribute.WA_StaticContents
    """
    """

    WA_StyleSheet: ... = Qt.WidgetAttribute.WA_StyleSheet
    """
    """

    WA_StyledBackground: ...
    """
    Qt.WidgetAttribute.WA_StyledBackgr...
    """

    WA_SymbianNoSystemRotation: ...
    """
    Qt.WidgetAttribute.WA_Symbi...
    """

    WA_TintedBackground: ...
    """
    Qt.WidgetAttribute.WA_TintedBackgr...
    """

    WA_TouchPadAcceptSingleTouchEvents: ...
    """
    Qt.WidgetAttribute....
    """

    WA_TranslucentBackground: ...
    """
    Qt.WidgetAttribute.WA_Translu...
    """

    WA_TransparentForMouseEvents: ...
    """
    Qt.WidgetAttribute.WA_Tra...
    """

    WA_UnderMouse: ... = Qt.WidgetAttribute.WA_UnderMouse
    """
    """

    WA_UpdatesDisabled: ...
    """
    Qt.WidgetAttribute.WA_UpdatesDisabl...
    """

    WA_WState_AcceptedTouchBeginEvent: ...
    """
    Qt.WidgetAttribute.W...
    """

    WA_WState_CompressKeys: ...
    """
    Qt.WidgetAttribute.WA_WState_Co...
    """

    WA_WState_ConfigPending: ...
    """
    Qt.WidgetAttribute.WA_WState_C...
    """

    WA_WState_Created: ... = Qt.WidgetAttribute.WA_WState_Created
    """
    """

    WA_WState_DND: ... = Qt.WidgetAttribute.WA_WState_DND
    """
    """

    WA_WState_ExplicitShowHide: ...
    """
    Qt.WidgetAttribute.WA_WStat...
    """

    WA_WState_Hidden: ... = Qt.WidgetAttribute.WA_WState_Hidden
    """
    """

    WA_WState_InPaintEvent: ...
    """
    Qt.WidgetAttribute.WA_WState_In...
    """

    WA_WState_OwnSizePolicy: ...
    """
    Qt.WidgetAttribute.WA_WState_O...
    """

    WA_WState_Polished: ...
    """
    Qt.WidgetAttribute.WA_WState_Polish...
    """

    WA_WState_Reparented: ...
    """
    Qt.WidgetAttribute.WA_WState_Repa...
    """

    WA_WState_Visible: ... = Qt.WidgetAttribute.WA_WState_Visible
    """
    """

    WA_WState_WindowOpacitySet: ...
    """
    Qt.WidgetAttribute.WA_WStat...
    """

    WA_WindowModified: ... = Qt.WidgetAttribute.WA_WindowModified
    """
    """

    WA_WindowPropagation: ...
    """
    Qt.WidgetAttribute.WA_WindowPropa...
    """

    WA_X11BypassTransientForHint: ...
    """
    Qt.WidgetAttribute.WA_X11...
    """

    WA_X11DoNotAcceptFocus: ...
    """
    Qt.WidgetAttribute.WA_X11DoNotA...
    """

    WA_X11NetWmWindowTypeCombo: ...
    """
    Qt.WidgetAttribute.WA_X11Ne...
    """

    WA_X11NetWmWindowTypeDND: ...
    """
    Qt.WidgetAttribute.WA_X11NetW...
    """

    WA_X11NetWmWindowTypeDesktop: ...
    """
    Qt.WidgetAttribute.WA_X11...
    """

    WA_X11NetWmWindowTypeDialog: ...
    """
    Qt.WidgetAttribute.WA_X11N...
    """

    WA_X11NetWmWindowTypeDock: ...
    """
    Qt.WidgetAttribute.WA_X11Net...
    """

    WA_X11NetWmWindowTypeDropDownMenu: ...
    """
    Qt.WidgetAttribute.W...
    """

    WA_X11NetWmWindowTypeMenu: ...
    """
    Qt.WidgetAttribute.WA_X11Net...
    """

    WA_X11NetWmWindowTypeNotification: ...
    """
    Qt.WidgetAttribute.W...
    """

    WA_X11NetWmWindowTypePopupMenu: ...
    """
    Qt.WidgetAttribute.WA_X...
    """

    WA_X11NetWmWindowTypeSplash: ...
    """
    Qt.WidgetAttribute.WA_X11N...
    """

    WA_X11NetWmWindowTypeToolBar: ...
    """
    Qt.WidgetAttribute.WA_X11...
    """

    WA_X11NetWmWindowTypeToolTip: ...
    """
    Qt.WidgetAttribute.WA_X11...
    """

    WA_X11NetWmWindowTypeUtility: ...
    """
    Qt.WidgetAttribute.WA_X11...
    """

    WA_X11OpenGLOverlay: ...
    """
    Qt.WidgetAttribute.WA_X11OpenGLOve...
    """

    WaitCursor: ... = Qt.CursorShape.WaitCursor
    """
    """

    Wednesday: ... = Qt.DayOfWeek.Wednesday
    """
    """

    WhatsThisCursor: ... = Qt.CursorShape.WhatsThisCursor
    """
    """

    WhatsThisPropertyRole: ...
    """
    Qt.ItemDataRole.WhatsThisPropert...
    """

    WhatsThisRole: ... = Qt.ItemDataRole.WhatsThisRole
    """
    """

    WheelFocus: ... = Qt.FocusPolicy.WheelFocus
    """
    """

    WhiteSpaceMode: ...
    """
    <type 'Qt.WhiteSpaceMode'>
    """

    WhiteSpaceModeUndefined: ...
    """
    Qt.WhiteSpaceMode.WhiteSpaceMo...
    """

    WhiteSpaceNoWrap: ... = Qt.WhiteSpaceMode.WhiteSpaceNoWrap
    """
    """

    WhiteSpaceNormal: ... = Qt.WhiteSpaceMode.WhiteSpaceNormal
    """
    """

    WhiteSpacePre: ... = Qt.WhiteSpaceMode.WhiteSpacePre
    """
    """

    Widget: ... = Qt.WindowType.Widget
    """
    """

    WidgetAttribute: ...
    """
    <type 'Qt.WidgetAttribute'>
    """

    WidgetShortcut: ... = Qt.ShortcutContext.WidgetShortcut
    """
    """

    WidgetWithChildrenShortcut: ...
    """
    Qt.ShortcutContext.WidgetWi...
    """

    WindingFill: ... = Qt.FillRule.WindingFill
    """
    """

    Window: ... = Qt.WindowType.Window
    """
    """

    WindowActive: ... = Qt.WindowState.WindowActive
    """
    """

    WindowCancelButtonHint: ...
    """
    Qt.WindowType.WindowCancelButto...
    """

    WindowCloseButtonHint: ...
    """
    Qt.WindowType.WindowCloseButtonH...
    """

    WindowContextHelpButtonHint: ...
    """
    Qt.WindowType.WindowContex...
    """

    WindowFlags: ...
    """
    <type 'WindowFlags'>
    """

    WindowFrameSection: ...
    """
    <type 'Qt.WindowFrameSection'>
    """

    WindowFullScreen: ... = Qt.WindowState.WindowFullScreen
    """
    """

    WindowMaximizeButtonHint: ...
    """
    Qt.WindowType.WindowMaximizeB...
    """

    WindowMaximized: ... = Qt.WindowState.WindowMaximized
    """
    """

    WindowMinMaxButtonsHint: ...
    """
    Qt.WindowType.WindowMinMaxButt...
    """

    WindowMinimizeButtonHint: ...
    """
    Qt.WindowType.WindowMinimizeB...
    """

    WindowMinimized: ... = Qt.WindowState.WindowMinimized
    """
    """

    WindowModal: ... = Qt.WindowModality.WindowModal
    """
    """

    WindowModality: ...
    """
    <type 'Qt.WindowModality'>
    """

    WindowNoState: ... = Qt.WindowState.WindowNoState
    """
    """

    WindowOkButtonHint: ... = Qt.WindowType.WindowOkButtonHint
    """
    """

    WindowShadeButtonHint: ...
    """
    Qt.WindowType.WindowShadeButtonH...
    """

    WindowShortcut: ... = Qt.ShortcutContext.WindowShortcut
    """
    """

    WindowSoftkeysRespondHint: ...
    """
    Qt.WindowType.WindowSoftkeys...
    """

    WindowSoftkeysVisibleHint: ...
    """
    Qt.WindowType.WindowSoftkeys...
    """

    WindowState: ...
    """
    <type 'Qt.WindowState'>
    """

    WindowStates: ...
    """
    <type 'WindowStates'>
    """

    WindowStaysOnBottomHint: ...
    """
    Qt.WindowType.WindowStaysOnBot...
    """

    WindowStaysOnTopHint: ...
    """
    Qt.WindowType.WindowStaysOnTopHin...
    """

    WindowSystemMenuHint: ...
    """
    Qt.WindowType.WindowSystemMenuHin...
    """

    WindowTitleHint: ... = Qt.WindowType.WindowTitleHint
    """
    """

    WindowType: ...
    """
    <type 'Qt.WindowType'>
    """

    WindowType_Mask: ... = Qt.WindowType.WindowType_Mask
    """
    """

    X11BypassWindowManagerHint: ...
    """
    Qt.WindowType.X11BypassWind...
    """

    XAxis: ... = Qt.Axis.XAxis
    """
    """

    XButton1: ... = Qt.MouseButton.XButton1
    """
    """

    XButton2: ... = Qt.MouseButton.XButton2
    """
    """

    YAxis: ... = Qt.Axis.YAxis
    """
    """

    ZAxis: ... = Qt.Axis.ZAxis
    """
    """

    black: ... = Qt.GlobalColor.black
    """
    """

    blue: ... = Qt.GlobalColor.blue
    """
    """

    color0: ... = Qt.GlobalColor.color0
    """
    """

    color1: ... = Qt.GlobalColor.color1
    """
    """

    cyan: ... = Qt.GlobalColor.cyan
    """
    """

    darkBlue: ... = Qt.GlobalColor.darkBlue
    """
    """

    darkCyan: ... = Qt.GlobalColor.darkCyan
    """
    """

    darkGray: ... = Qt.GlobalColor.darkGray
    """
    """

    darkGreen: ... = Qt.GlobalColor.darkGreen
    """
    """

    darkMagenta: ... = Qt.GlobalColor.darkMagenta
    """
    """

    darkRed: ... = Qt.GlobalColor.darkRed
    """
    """

    darkYellow: ... = Qt.GlobalColor.darkYellow
    """
    """

    gray: ... = Qt.GlobalColor.gray
    """
    """

    green: ... = Qt.GlobalColor.green
    """
    """

    lightGray: ... = Qt.GlobalColor.lightGray
    """
    """

    magenta: ... = Qt.GlobalColor.magenta
    """
    """

    red: ... = Qt.GlobalColor.red
    """
    """

    transparent: ... = Qt.GlobalColor.transparent
    """
    """

    white: ... = Qt.GlobalColor.white
    """
    """

    yellow: ... = Qt.GlobalColor.yellow
    """
    """

    ...

class QtMsgType:
    QtCriticalMsg: ... = QtMsgType.QtCriticalMsg
    """
    """

    QtDebugMsg: ... = QtMsgType.QtDebugMsg
    """
    """

    QtFatalMsg: ... = QtMsgType.QtFatalMsg
    """
    """

    QtSystemMsg: ... = QtMsgType.QtSystemMsg
    """
    """

    QtWarningMsg: ... = QtMsgType.QtWarningMsg
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __add__(self, *args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __and__(self, *args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...
    def __div__(self, *args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __index__(self, *args, **kwargs):
        """
        x[y:z] <==> x[y.__index__():z.__index__()]
        """
        ...
    def __int__(self, *args, **kwargs):
        """
        x.__int__() <==> int(x)
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __long__(self, *args, **kwargs):
        """
        x.__long__() <==> long(x)
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(self, *args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __or__(self, *args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...
    def __pos__(self, *args, **kwargs):
        """
        x.__pos__() <==> +x
        """
        ...
    def __radd__(self, *args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rand__(self, *args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...
    def __rdiv__(self, *args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rmul__(self, *args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __ror__(self, *args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...
    def __rsub__(self, *args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rxor__(self, *args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...
    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...
    def __sub__(self, *args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __xor__(self, *args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...
    ...

class Signal:
    """
    Signal
    """

    Receiver = Union[Callable[..., None], Slot, Signal]

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...
    def __getitem__(self, *args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __str__(self, *args, **kwargs):
        """
        x.__str__() <==> str(x)
        """
        ...
    def connect(self, receiver: Receiver, type: Qt.ConnectionType = ...) -> None: ...
    def disconnect(self, receiver: Receiver) -> None: ...
    def emit(self, *args: ...) -> None: ...

class Slot:
    """
    Slot
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __call__(self, *args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    ...

def QT_TRANSLATE_NOOP(*args, **kwargs):
    """ """
    ...

def QT_TR_NOOP(*args, **kwargs):
    """ """
    ...

def QT_TR_NOOP_UTF8(*args, **kwargs):
    """ """
    ...

def qAbs(*args, **kwargs):
    """ """
    ...

def qAddPostRoutine(*args, **kwargs):
    """ """
    ...

def qChecksum(*args, **kwargs):
    """ """
    ...

def qCritical(*args, **kwargs):
    """ """
    ...

def qDebug(*args, **kwargs):
    """ """
    ...

def qFatal(*args, **kwargs):
    """ """
    ...

def qFuzzyCompare(*args, **kwargs):
    """ """
    ...

def qIsFinite(*args, **kwargs):
    """ """
    ...

def qIsInf(*args, **kwargs):
    """ """
    ...

def qIsNaN(*args, **kwargs):
    """ """
    ...

def qIsNull(*args, **kwargs):
    """ """
    ...

def qRegisterResourceData(*args, **kwargs):
    """ """
    ...

def qUnregisterResourceData(*args, **kwargs):
    """ """
    ...

def qVersion(*args, **kwargs):
    """ """
    ...

def qWarning(*args, **kwargs):
    """ """
    ...

def qrand(*args, **kwargs):
    """ """
    ...

QtCriticalMsg: ... = QtMsgType.QtCriticalMsg

QtDebugMsg: ... = QtMsgType.QtDebugMsg

QtFatalMsg: ... = QtMsgType.QtFatalMsg

QtSystemMsg: ... = QtMsgType.QtSystemMsg

QtWarningMsg: ... = QtMsgType.QtWarningMsg

__all__: ...
"""
['Property', 'QAbstractAnimation', 'QAbstractEventDispatcher...
"""
