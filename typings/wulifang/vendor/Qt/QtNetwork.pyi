# -*- coding=UTF-8 -*-
# This typing file was generated by typing_from_help.py
"""
Qt.QtNetwork
"""

import six
import typing
import PySide
import Shiboken

class QAbstractNetworkCache(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def cacheSize(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def insert(self, *args, **kwargs):
        """ """
        ...
    def metaData(self, *args, **kwargs):
        """ """
        ...
    def prepare(self, *args, **kwargs):
        """ """
        ...
    def remove(self, *args, **kwargs):
        """ """
        ...
    def updateMetaData(self, *args, **kwargs):
        """ """
        ...
    ...

class QAbstractSocket(PySide.QtCore.QIODevice):
    AddressInUseError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.Addre...
    """

    BoundState: ... = PySide.QtNetwork.QAbstractSocket.SocketState.BoundState
    """
    """

    ClosingState: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketState.ClosingSta...
    """

    ConnectedState: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketState.Connecte...
    """

    ConnectingState: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketState.Connect...
    """

    ConnectionRefusedError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError....
    """

    DatagramTooLargeError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.D...
    """

    HostLookupState: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketState.HostLoo...
    """

    HostNotFoundError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.HostN...
    """

    IPv4Protocol: ...
    """
    PySide.QtNetwork.QAbstractSocket.NetworkLayerProtocol.I...
    """

    IPv6Protocol: ...
    """
    PySide.QtNetwork.QAbstractSocket.NetworkLayerProtocol.I...
    """

    KeepAliveOption: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketOption.KeepAl...
    """

    ListeningState: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketState.Listenin...
    """

    LowDelayOption: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketOption.LowDela...
    """

    MulticastLoopbackOption: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketOptio...
    """

    MulticastTtlOption: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketOption.Mul...
    """

    NetworkError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.NetworkErr...
    """

    NetworkLayerProtocol: ...
    """
    <type 'PySide.QtNetwork.QAbstractSocket.Network...
    """

    ProxyAuthenticationRequiredError: ...
    """
    PySide.QtNetwork.QAbstractSocket.So...
    """

    ProxyConnectionClosedError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketEr...
    """

    ProxyConnectionRefusedError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketE...
    """

    ProxyConnectionTimeoutError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketE...
    """

    ProxyNotFoundError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.Prox...
    """

    ProxyProtocolError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.Prox...
    """

    RemoteHostClosedError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.R...
    """

    SocketAccessError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.Socke...
    """

    SocketAddressNotAvailableError: ...
    """
    PySide.QtNetwork.QAbstractSocket.Sock...
    """

    SocketError: ...
    """
    <type 'PySide.QtNetwork.QAbstractSocket.SocketError'>
    """

    SocketOption: ...
    """
    <type 'PySide.QtNetwork.QAbstractSocket.SocketOption'>
    """

    SocketResourceError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.Soc...
    """

    SocketState: ...
    """
    <type 'PySide.QtNetwork.QAbstractSocket.SocketState'>
    """

    SocketTimeoutError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.Sock...
    """

    SocketType: ...
    """
    <type 'PySide.QtNetwork.QAbstractSocket.SocketType'>
    """

    SslHandshakeFailedError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError...
    """

    TcpSocket: ... = PySide.QtNetwork.QAbstractSocket.SocketType.TcpSocket
    """
    """

    UdpSocket: ... = PySide.QtNetwork.QAbstractSocket.SocketType.UdpSocket
    """
    """

    UnconnectedState: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketState.Unconn...
    """

    UnfinishedSocketOperationError: ...
    """
    PySide.QtNetwork.QAbstractSocket.Sock...
    """

    UnknownNetworkLayerProtocol: ...
    """
    PySide.QtNetwork.QAbstractSocket.Network...
    """

    UnknownSocketError: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketError.Unkn...
    """

    UnknownSocketType: ...
    """
    PySide.QtNetwork.QAbstractSocket.SocketType.Unknow...
    """

    UnsupportedSocketOperationError: ...
    """
    PySide.QtNetwork.QAbstractSocket.Soc...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    connected: ...
    """
    Signal
    """

    connectionClosed: ...
    """
    Signal
    """

    delayedCloseFinished: ...
    """
    Signal
    """

    disconnected: ...
    """
    Signal
    """

    error: ...
    """
    Signal
    """

    hostFound: ...
    """
    Signal
    """

    proxyAuthenticationRequired: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def abort(self, *args, **kwargs):
        """ """
        ...
    def atEnd(self, *args, **kwargs):
        """ """
        ...
    def bytesAvailable(self, *args, **kwargs):
        """ """
        ...
    def bytesToWrite(self, *args, **kwargs):
        """ """
        ...
    def canReadLine(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def connectToHost(self, *args, **kwargs):
        """ """
        ...
    def connectToHostImplementation(self, *args, **kwargs):
        """ """
        ...
    def disconnectFromHost(self, *args, **kwargs):
        """ """
        ...
    def disconnectFromHostImplementation(self, *args, **kwargs):
        """ """
        ...
    def flush(self, *args, **kwargs):
        """ """
        ...
    def isSequential(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def localAddress(self, *args, **kwargs):
        """ """
        ...
    def localPort(self, *args, **kwargs):
        """ """
        ...
    def peerAddress(self, *args, **kwargs):
        """ """
        ...
    def peerName(self, *args, **kwargs):
        """ """
        ...
    def peerPort(self, *args, **kwargs):
        """ """
        ...
    def proxy(self, *args, **kwargs):
        """ """
        ...
    def readBufferSize(self, *args, **kwargs):
        """ """
        ...
    def readData(self, *args, **kwargs):
        """ """
        ...
    def readLineData(self, *args, **kwargs):
        """ """
        ...
    def setLocalAddress(self, *args, **kwargs):
        """ """
        ...
    def setLocalPort(self, *args, **kwargs):
        """ """
        ...
    def setPeerAddress(self, *args, **kwargs):
        """ """
        ...
    def setPeerName(self, *args, **kwargs):
        """ """
        ...
    def setPeerPort(self, *args, **kwargs):
        """ """
        ...
    def setProxy(self, *args, **kwargs):
        """ """
        ...
    def setReadBufferSize(self, *args, **kwargs):
        """ """
        ...
    def setSocketDescriptor(self, *args, **kwargs):
        """ """
        ...
    def setSocketError(self, *args, **kwargs):
        """ """
        ...
    def setSocketOption(self, *args, **kwargs):
        """ """
        ...
    def setSocketState(self, *args, **kwargs):
        """ """
        ...
    def socketDescriptor(self, *args, **kwargs):
        """ """
        ...
    def socketOption(self, *args, **kwargs):
        """ """
        ...
    def socketType(self, *args, **kwargs):
        """ """
        ...
    def state(self, *args, **kwargs):
        """ """
        ...
    def waitForBytesWritten(self, *args, **kwargs):
        """ """
        ...
    def waitForConnected(self, *args, **kwargs):
        """ """
        ...
    def waitForDisconnected(self, *args, **kwargs):
        """ """
        ...
    def waitForReadyRead(self, *args, **kwargs):
        """ """
        ...
    def writeData(self, *args, **kwargs):
        """ """
        ...
    ...

class QAuthenticator(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def option(self, *args, **kwargs):
        """ """
        ...
    def options(self, *args, **kwargs):
        """ """
        ...
    def password(self, *args, **kwargs):
        """ """
        ...
    def realm(self, *args, **kwargs):
        """ """
        ...
    def setOption(self, *args, **kwargs):
        """ """
        ...
    def setPassword(self, *args, **kwargs):
        """ """
        ...
    def setUser(self, *args, **kwargs):
        """ """
        ...
    def user(self, *args, **kwargs):
        """ """
        ...
    ...

class QHostAddress(Shiboken.Object):
    Any: ... = PySide.QtNetwork.QHostAddress.SpecialAddress.Any
    """
    """

    AnyIPv6: ... = PySide.QtNetwork.QHostAddress.SpecialAddress.AnyIPv6
    """
    """

    Broadcast: ... = PySide.QtNetwork.QHostAddress.SpecialAddress.Broadcast
    """
    """

    LocalHost: ... = PySide.QtNetwork.QHostAddress.SpecialAddress.LocalHost
    """
    """

    LocalHostIPv6: ...
    """
    PySide.QtNetwork.QHostAddress.SpecialAddress.LocalHost...
    """

    Null: ... = PySide.QtNetwork.QHostAddress.SpecialAddress.Null
    """
    """

    SpecialAddress: ...
    """
    <type 'PySide.QtNetwork.QHostAddress.SpecialAddress'>
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def parseSubnet(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __hash__(self, *args, **kwargs):
        """
        x.__hash__() <==> hash(x)
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self, *args, **kwargs):
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def isInSubnet(self, *args, **kwargs):
        """ """
        ...
    def isNull(self, *args, **kwargs):
        """ """
        ...
    def protocol(self, *args, **kwargs):
        """ """
        ...
    def scopeId(self, *args, **kwargs):
        """ """
        ...
    def setAddress(self, *args, **kwargs):
        """ """
        ...
    def setScopeId(self, *args, **kwargs):
        """ """
        ...
    def toIPv4Address(self, *args, **kwargs):
        """ """
        ...
    def toIPv6Address(self, *args, **kwargs):
        """ """
        ...
    def toString(self, *args, **kwargs):
        """ """
        ...
    ...

class QHostInfo(Shiboken.Object):
    HostInfoError: ...
    """
    <type 'PySide.QtNetwork.QHostInfo.HostInfoError'>
    """

    HostNotFound: ... = PySide.QtNetwork.QHostInfo.HostInfoError.HostNotFound
    """
    """

    NoError: ... = PySide.QtNetwork.QHostInfo.HostInfoError.NoError
    """
    """

    UnknownError: ... = PySide.QtNetwork.QHostInfo.HostInfoError.UnknownError
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def abortHostLookup(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def fromName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def localDomainName(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def localHostName(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addresses(self, *args, **kwargs):
        """ """
        ...
    def error(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def hostName(self, *args, **kwargs):
        """ """
        ...
    def lookupId(self, *args, **kwargs):
        """ """
        ...
    def setAddresses(self, *args, **kwargs):
        """ """
        ...
    def setError(self, *args, **kwargs):
        """ """
        ...
    def setErrorString(self, *args, **kwargs):
        """ """
        ...
    def setHostName(self, *args, **kwargs):
        """ """
        ...
    def setLookupId(self, *args, **kwargs):
        """ """
        ...
    ...

class QLocalServer(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    newConnection: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    @staticmethod
    def removeServer(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def fullServerName(self, *args, **kwargs):
        """ """
        ...
    def hasPendingConnections(self, *args, **kwargs):
        """ """
        ...
    def isListening(self, *args, **kwargs):
        """ """
        ...
    def listen(self, *args, **kwargs):
        """ """
        ...
    def maxPendingConnections(self, *args, **kwargs):
        """ """
        ...
    def nextPendingConnection(self, *args, **kwargs):
        """ """
        ...
    def serverError(self, *args, **kwargs):
        """ """
        ...
    def serverName(self, *args, **kwargs):
        """ """
        ...
    def setMaxPendingConnections(self, *args, **kwargs):
        """ """
        ...
    def waitForNewConnection(self, *args, **kwargs):
        """ """
        ...
    ...

class QLocalSocket(PySide.QtCore.QIODevice):
    ClosingState: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketState.ClosingS...
    """

    ConnectedState: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketState.Connec...
    """

    ConnectingState: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketState.Conne...
    """

    ConnectionError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError.Conne...
    """

    ConnectionRefusedError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketErro...
    """

    DatagramTooLargeError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError...
    """

    LocalSocketError: ...
    """
    <type 'PySide.QtNetwork.QLocalSocket.LocalSocketErr...
    """

    LocalSocketState: ...
    """
    <type 'PySide.QtNetwork.QLocalSocket.LocalSocketSta...
    """

    PeerClosedError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError.PeerC...
    """

    ServerNotFoundError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError.S...
    """

    SocketAccessError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError.Soc...
    """

    SocketResourceError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError.S...
    """

    SocketTimeoutError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError.So...
    """

    UnconnectedState: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketState.Unco...
    """

    UnknownSocketError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalSocketError.Un...
    """

    UnsupportedSocketOperationError: ...
    """
    PySide.QtNetwork.QLocalSocket.LocalS...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    connected: ...
    """
    Signal
    """

    disconnected: ...
    """
    Signal
    """

    error: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def abort(self, *args, **kwargs):
        """ """
        ...
    def bytesAvailable(self, *args, **kwargs):
        """ """
        ...
    def bytesToWrite(self, *args, **kwargs):
        """ """
        ...
    def canReadLine(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def connectToServer(self, *args, **kwargs):
        """ """
        ...
    def disconnectFromServer(self, *args, **kwargs):
        """ """
        ...
    def flush(self, *args, **kwargs):
        """ """
        ...
    def fullServerName(self, *args, **kwargs):
        """ """
        ...
    def isSequential(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def readBufferSize(self, *args, **kwargs):
        """ """
        ...
    def readData(self, *args, **kwargs):
        """ """
        ...
    def serverName(self, *args, **kwargs):
        """ """
        ...
    def setReadBufferSize(self, *args, **kwargs):
        """ """
        ...
    def state(self, *args, **kwargs):
        """ """
        ...
    def waitForBytesWritten(self, *args, **kwargs):
        """ """
        ...
    def waitForConnected(self, *args, **kwargs):
        """ """
        ...
    def waitForDisconnected(self, *args, **kwargs):
        """ """
        ...
    def waitForReadyRead(self, *args, **kwargs):
        """ """
        ...
    def writeData(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkAccessManager(PySide.QtCore.QObject):
    Accessible: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.NetworkAccessibili...
    """

    CustomOperation: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.Operation.Cus...
    """

    DeleteOperation: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.Operation.Del...
    """

    GetOperation: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.Operation.GetOpe...
    """

    HeadOperation: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.Operation.HeadO...
    """

    NetworkAccessibility: ...
    """
    <type 'PySide.QtNetwork.QNetworkAccessManager.N...
    """

    NotAccessible: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.NetworkAccessib...
    """

    Operation: ...
    """
    <type 'PySide.QtNetwork.QNetworkAccessManager.Operation'>
    """

    PostOperation: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.Operation.PostO...
    """

    PutOperation: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.Operation.PutOpe...
    """

    UnknownAccessibility: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.NetworkA...
    """

    UnknownOperation: ...
    """
    PySide.QtNetwork.QNetworkAccessManager.Operation.Un...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    authenticationRequired: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    networkAccessibleChanged: ...
    """
    Signal
    """

    networkSessionConnected: ...
    """
    Signal
    """

    proxyAuthenticationRequired: ...
    """
    Signal
    """

    sslErrors: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def activeConfiguration(self, *args, **kwargs):
        """ """
        ...
    def cache(self, *args, **kwargs):
        """ """
        ...
    def configuration(self, *args, **kwargs):
        """ """
        ...
    def cookieJar(self, *args, **kwargs):
        """ """
        ...
    def createRequest(self, *args, **kwargs):
        """ """
        ...
    def deleteResource(self, *args, **kwargs):
        """ """
        ...
    def get(self, *args, **kwargs):
        """ """
        ...
    def head(self, *args, **kwargs):
        """ """
        ...
    def networkAccessible(self, *args, **kwargs):
        """ """
        ...
    def post(self, *args, **kwargs):
        """ """
        ...
    def proxy(self, *args, **kwargs):
        """ """
        ...
    def proxyFactory(self, *args, **kwargs):
        """ """
        ...
    def put(self, *args, **kwargs):
        """ """
        ...
    def sendCustomRequest(self, *args, **kwargs):
        """ """
        ...
    def setCache(self, *args, **kwargs):
        """ """
        ...
    def setConfiguration(self, *args, **kwargs):
        """ """
        ...
    def setCookieJar(self, *args, **kwargs):
        """ """
        ...
    def setNetworkAccessible(self, *args, **kwargs):
        """ """
        ...
    def setProxy(self, *args, **kwargs):
        """ """
        ...
    def setProxyFactory(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkAddressEntry(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def broadcast(self, *args, **kwargs):
        """ """
        ...
    def ip(self, *args, **kwargs):
        """ """
        ...
    def netmask(self, *args, **kwargs):
        """ """
        ...
    def prefixLength(self, *args, **kwargs):
        """ """
        ...
    def setBroadcast(self, *args, **kwargs):
        """ """
        ...
    def setIp(self, *args, **kwargs):
        """ """
        ...
    def setNetmask(self, *args, **kwargs):
        """ """
        ...
    def setPrefixLength(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkCacheMetaData(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(self, *args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __rlshift__(self, *args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(self, *args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(self, *args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def attributes(self, *args, **kwargs):
        """ """
        ...
    def expirationDate(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def lastModified(self, *args, **kwargs):
        """ """
        ...
    def rawHeaders(self, *args, **kwargs):
        """ """
        ...
    def saveToDisk(self, *args, **kwargs):
        """ """
        ...
    def setAttributes(self, *args, **kwargs):
        """ """
        ...
    def setExpirationDate(self, *args, **kwargs):
        """ """
        ...
    def setLastModified(self, *args, **kwargs):
        """ """
        ...
    def setRawHeaders(self, *args, **kwargs):
        """ """
        ...
    def setSaveToDisk(self, *args, **kwargs):
        """ """
        ...
    def setUrl(self, *args, **kwargs):
        """ """
        ...
    def url(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkConfiguration(Shiboken.Object):
    Active: ... = PySide.QtNetwork.QNetworkConfiguration.StateFlag.Active
    """
    """

    Bearer2G: ... = PySide.QtNetwork.QNetworkConfiguration.BearerType.Bearer2G
    """
    """

    BearerBluetooth: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.Be...
    """

    BearerCDMA2000: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.Bea...
    """

    BearerEthernet: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.Bea...
    """

    BearerHSPA: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.BearerH...
    """

    BearerType: ...
    """
    <type 'PySide.QtNetwork.QNetworkConfiguration.BearerType'...
    """

    BearerUnknown: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.Bear...
    """

    BearerWCDMA: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.Bearer...
    """

    BearerWLAN: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.BearerW...
    """

    BearerWiMAX: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.BearerType.Bearer...
    """

    Defined: ... = PySide.QtNetwork.QNetworkConfiguration.StateFlag.Defined
    """
    """

    Discovered: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.StateFlag.Discover...
    """

    InternetAccessPoint: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.Type.Inte...
    """

    Invalid: ... = PySide.QtNetwork.QNetworkConfiguration.Type.Invalid
    """
    """

    PrivatePurpose: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.Purpose.Privat...
    """

    PublicPurpose: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.Purpose.PublicP...
    """

    Purpose: ...
    """
    <type 'PySide.QtNetwork.QNetworkConfiguration.Purpose'>
    """

    ServiceNetwork: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.Type.ServiceNe...
    """

    ServiceSpecificPurpose: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.Purpos...
    """

    StateFlag: ...
    """
    <type 'PySide.QtNetwork.QNetworkConfiguration.StateFlag'>
    """

    StateFlags: ...
    """
    <type 'StateFlags'>
    """

    Type: ...
    """
    <type 'PySide.QtNetwork.QNetworkConfiguration.Type'>
    """

    Undefined: ... = PySide.QtNetwork.QNetworkConfiguration.StateFlag.Undefined
    """
    """

    UnknownPurpose: ...
    """
    PySide.QtNetwork.QNetworkConfiguration.Purpose.Unknow...
    """

    UserChoice: ... = PySide.QtNetwork.QNetworkConfiguration.Type.UserChoice
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def bearerName(self, *args, **kwargs):
        """ """
        ...
    def bearerType(self, *args, **kwargs):
        """ """
        ...
    def bearerTypeName(self, *args, **kwargs):
        """ """
        ...
    def children(self, *args, **kwargs):
        """ """
        ...
    def identifier(self, *args, **kwargs):
        """ """
        ...
    def isRoamingAvailable(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def purpose(self, *args, **kwargs):
        """ """
        ...
    def state(self, *args, **kwargs):
        """ """
        ...
    def type(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkConfigurationManager(PySide.QtCore.QObject):
    ApplicationLevelRoaming: ...
    """
    PySide.QtNetwork.QNetworkConfigurationManage...
    """

    CanStartAndStopInterfaces: ...
    """
    PySide.QtNetwork.QNetworkConfigurationMana...
    """

    Capabilities: ...
    """
    <type 'Capabilities'>
    """

    Capability: ...
    """
    <type 'PySide.QtNetwork.QNetworkConfigurationManager.Capa...
    """

    DataStatistics: ...
    """
    PySide.QtNetwork.QNetworkConfigurationManager.Capabil...
    """

    DirectConnectionRouting: ...
    """
    PySide.QtNetwork.QNetworkConfigurationManage...
    """

    ForcedRoaming: ...
    """
    PySide.QtNetwork.QNetworkConfigurationManager.Capabili...
    """

    NetworkSessionRequired: ...
    """
    PySide.QtNetwork.QNetworkConfigurationManager...
    """

    SystemSessionSupport: ...
    """
    PySide.QtNetwork.QNetworkConfigurationManager.C...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    configurationAdded: ...
    """
    Signal
    """

    configurationChanged: ...
    """
    Signal
    """

    configurationRemoved: ...
    """
    Signal
    """

    onlineStateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """

    updateCompleted: ...
    """
    Signal
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def allConfigurations(self, *args, **kwargs):
        """ """
        ...
    def capabilities(self, *args, **kwargs):
        """ """
        ...
    def configurationFromIdentifier(self, *args, **kwargs):
        """ """
        ...
    def defaultConfiguration(self, *args, **kwargs):
        """ """
        ...
    def isOnline(self, *args, **kwargs):
        """ """
        ...
    def updateConfigurations(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkCookie(Shiboken.Object):
    Full: ... = PySide.QtNetwork.QNetworkCookie.RawForm.Full
    """
    """

    NameAndValueOnly: ...
    """
    PySide.QtNetwork.QNetworkCookie.RawForm.NameAndValu...
    """

    RawForm: ...
    """
    <type 'PySide.QtNetwork.QNetworkCookie.RawForm'>
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def parseCookies(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def domain(self, *args, **kwargs):
        """ """
        ...
    def expirationDate(self, *args, **kwargs):
        """ """
        ...
    def isHttpOnly(self, *args, **kwargs):
        """ """
        ...
    def isSecure(self, *args, **kwargs):
        """ """
        ...
    def isSessionCookie(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    def path(self, *args, **kwargs):
        """ """
        ...
    def setDomain(self, *args, **kwargs):
        """ """
        ...
    def setExpirationDate(self, *args, **kwargs):
        """ """
        ...
    def setHttpOnly(self, *args, **kwargs):
        """ """
        ...
    def setName(self, *args, **kwargs):
        """ """
        ...
    def setPath(self, *args, **kwargs):
        """ """
        ...
    def setSecure(self, *args, **kwargs):
        """ """
        ...
    def setValue(self, *args, **kwargs):
        """ """
        ...
    def toRawForm(self, *args, **kwargs):
        """ """
        ...
    def value(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkCookieJar(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def allCookies(self, *args, **kwargs):
        """ """
        ...
    def cookiesForUrl(self, *args, **kwargs):
        """ """
        ...
    def setAllCookies(self, *args, **kwargs):
        """ """
        ...
    def setCookiesFromUrl(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkDiskCache(QAbstractNetworkCache):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def cacheDirectory(self, *args, **kwargs):
        """ """
        ...
    def cacheSize(self, *args, **kwargs):
        """ """
        ...
    def clear(self, *args, **kwargs):
        """ """
        ...
    def data(self, *args, **kwargs):
        """ """
        ...
    def expire(self, *args, **kwargs):
        """ """
        ...
    def fileMetaData(self, *args, **kwargs):
        """ """
        ...
    def insert(self, *args, **kwargs):
        """ """
        ...
    def maximumCacheSize(self, *args, **kwargs):
        """ """
        ...
    def metaData(self, *args, **kwargs):
        """ """
        ...
    def prepare(self, *args, **kwargs):
        """ """
        ...
    def remove(self, *args, **kwargs):
        """ """
        ...
    def setCacheDirectory(self, *args, **kwargs):
        """ """
        ...
    def setMaximumCacheSize(self, *args, **kwargs):
        """ """
        ...
    def updateMetaData(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkInterface(Shiboken.Object):
    CanBroadcast: ...
    """
    PySide.QtNetwork.QNetworkInterface.InterfaceFlag.CanBro...
    """

    CanMulticast: ...
    """
    PySide.QtNetwork.QNetworkInterface.InterfaceFlag.CanMul...
    """

    InterfaceFlag: ...
    """
    <type 'PySide.QtNetwork.QNetworkInterface.InterfaceFla...
    """

    InterfaceFlags: ...
    """
    <type 'InterfaceFlags'>
    """

    IsLoopBack: ...
    """
    PySide.QtNetwork.QNetworkInterface.InterfaceFlag.IsLoopBa...
    """

    IsPointToPoint: ...
    """
    PySide.QtNetwork.QNetworkInterface.InterfaceFlag.IsPo...
    """

    IsRunning: ... = PySide.QtNetwork.QNetworkInterface.InterfaceFlag.IsRunning
    """
    """

    IsUp: ... = PySide.QtNetwork.QNetworkInterface.InterfaceFlag.IsUp
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def allAddresses(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def allInterfaces(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def interfaceFromIndex(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def interfaceFromName(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self, *args, **kwargs):
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def addressEntries(self, *args, **kwargs):
        """ """
        ...
    def flags(self, *args, **kwargs):
        """ """
        ...
    def hardwareAddress(self, *args, **kwargs):
        """ """
        ...
    def humanReadableName(self, *args, **kwargs):
        """ """
        ...
    def index(self, *args, **kwargs):
        """ """
        ...
    def isValid(self, *args, **kwargs):
        """ """
        ...
    def name(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkProxy(Shiboken.Object):
    CachingCapability: ...
    """
    PySide.QtNetwork.QNetworkProxy.Capability.CachingC...
    """

    Capabilities: ...
    """
    <type 'Capabilities'>
    """

    Capability: ...
    """
    <type 'PySide.QtNetwork.QNetworkProxy.Capability'>
    """

    DefaultProxy: ... = PySide.QtNetwork.QNetworkProxy.ProxyType.DefaultProxy
    """
    """

    FtpCachingProxy: ...
    """
    PySide.QtNetwork.QNetworkProxy.ProxyType.FtpCachingP...
    """

    HostNameLookupCapability: ...
    """
    PySide.QtNetwork.QNetworkProxy.Capability.H...
    """

    HttpCachingProxy: ...
    """
    PySide.QtNetwork.QNetworkProxy.ProxyType.HttpCachin...
    """

    HttpProxy: ... = PySide.QtNetwork.QNetworkProxy.ProxyType.HttpProxy
    """
    """

    ListeningCapability: ...
    """
    PySide.QtNetwork.QNetworkProxy.Capability.Listen...
    """

    NoProxy: ... = PySide.QtNetwork.QNetworkProxy.ProxyType.NoProxy
    """
    """

    ProxyType: ...
    """
    <type 'PySide.QtNetwork.QNetworkProxy.ProxyType'>
    """

    Socks5Proxy: ... = PySide.QtNetwork.QNetworkProxy.ProxyType.Socks5Proxy
    """
    """

    TunnelingCapability: ...
    """
    PySide.QtNetwork.QNetworkProxy.Capability.Tunnel...
    """

    UdpTunnelingCapability: ...
    """
    PySide.QtNetwork.QNetworkProxy.Capability.Udp...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def applicationProxy(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setApplicationProxy(*args, **kwargs):
        """ """
        ...
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def capabilities(self, *args, **kwargs):
        """ """
        ...
    def hostName(self, *args, **kwargs):
        """ """
        ...
    def isCachingProxy(self, *args, **kwargs):
        """ """
        ...
    def isTransparentProxy(self, *args, **kwargs):
        """ """
        ...
    def password(self, *args, **kwargs):
        """ """
        ...
    def port(self, *args, **kwargs):
        """ """
        ...
    def setCapabilities(self, *args, **kwargs):
        """ """
        ...
    def setHostName(self, *args, **kwargs):
        """ """
        ...
    def setPassword(self, *args, **kwargs):
        """ """
        ...
    def setPort(self, *args, **kwargs):
        """ """
        ...
    def setType(self, *args, **kwargs):
        """ """
        ...
    def setUser(self, *args, **kwargs):
        """ """
        ...
    def type(self, *args, **kwargs):
        """ """
        ...
    def user(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkProxyFactory(Shiboken.Object):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    @staticmethod
    def proxyForQuery(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setApplicationProxyFactory(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def setUseSystemConfiguration(*args, **kwargs):
        """ """
        ...
    @staticmethod
    def systemProxyForQuery(*args, **kwargs):
        """ """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def queryProxy(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkProxyQuery(Shiboken.Object):
    QueryType: ...
    """
    <type 'PySide.QtNetwork.QNetworkProxyQuery.QueryType'>
    """

    TcpServer: ... = PySide.QtNetwork.QNetworkProxyQuery.QueryType.TcpServer
    """
    """

    TcpSocket: ... = PySide.QtNetwork.QNetworkProxyQuery.QueryType.TcpSocket
    """
    """

    UdpSocket: ... = PySide.QtNetwork.QNetworkProxyQuery.QueryType.UdpSocket
    """
    """

    UrlRequest: ... = PySide.QtNetwork.QNetworkProxyQuery.QueryType.UrlRequest
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def localPort(self, *args, **kwargs):
        """ """
        ...
    def networkConfiguration(self, *args, **kwargs):
        """ """
        ...
    def peerHostName(self, *args, **kwargs):
        """ """
        ...
    def peerPort(self, *args, **kwargs):
        """ """
        ...
    def protocolTag(self, *args, **kwargs):
        """ """
        ...
    def queryType(self, *args, **kwargs):
        """ """
        ...
    def setLocalPort(self, *args, **kwargs):
        """ """
        ...
    def setNetworkConfiguration(self, *args, **kwargs):
        """ """
        ...
    def setPeerHostName(self, *args, **kwargs):
        """ """
        ...
    def setPeerPort(self, *args, **kwargs):
        """ """
        ...
    def setProtocolTag(self, *args, **kwargs):
        """ """
        ...
    def setQueryType(self, *args, **kwargs):
        """ """
        ...
    def setUrl(self, *args, **kwargs):
        """ """
        ...
    def url(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkReply(PySide.QtCore.QIODevice):
    AuthenticationRequiredError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkEr...
    """

    ConnectionRefusedError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.C...
    """

    ContentAccessDenied: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Cont...
    """

    ContentNotFoundError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Con...
    """

    ContentOperationNotPermittedError: ...
    """
    PySide.QtNetwork.QNetworkReply.Net...
    """

    ContentReSendError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Conte...
    """

    HostNotFoundError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.HostNo...
    """

    NetworkError: ...
    """
    <type 'PySide.QtNetwork.QNetworkReply.NetworkError'>
    """

    NoError: ... = PySide.QtNetwork.QNetworkReply.NetworkError.NoError
    """
    """

    OperationCanceledError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.O...
    """

    ProtocolFailure: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Protocol...
    """

    ProtocolInvalidOperationError: ...
    """
    PySide.QtNetwork.QNetworkReply.Network...
    """

    ProtocolUnknownError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Pro...
    """

    ProxyAuthenticationRequiredError: ...
    """
    PySide.QtNetwork.QNetworkReply.Netw...
    """

    ProxyConnectionClosedError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkErr...
    """

    ProxyConnectionRefusedError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkEr...
    """

    ProxyNotFoundError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Proxy...
    """

    ProxyTimeoutError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.ProxyT...
    """

    RemoteHostClosedError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Re...
    """

    SslHandshakeFailedError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError....
    """

    TemporaryNetworkFailureError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkE...
    """

    TimeoutError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.TimeoutErro...
    """

    UnknownContentError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Unkn...
    """

    UnknownNetworkError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Unkn...
    """

    UnknownProxyError: ...
    """
    PySide.QtNetwork.QNetworkReply.NetworkError.Unknow...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    downloadProgress: ...
    """
    Signal
    """

    error: ...
    """
    Signal
    """

    finished: ...
    """
    Signal
    """

    metaDataChanged: ...
    """
    Signal
    """

    sslErrors: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """

    uploadProgress: ...
    """
    Signal
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def abort(self, *args, **kwargs):
        """ """
        ...
    def attribute(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def hasRawHeader(self, *args, **kwargs):
        """ """
        ...
    def header(self, *args, **kwargs):
        """ """
        ...
    def ignoreSslErrors(self, *args, **kwargs):
        """ """
        ...
    def isFinished(self, *args, **kwargs):
        """ """
        ...
    def isRunning(self, *args, **kwargs):
        """ """
        ...
    def isSequential(self, *args, **kwargs):
        """ """
        ...
    def manager(self, *args, **kwargs):
        """ """
        ...
    def operation(self, *args, **kwargs):
        """ """
        ...
    def rawHeader(self, *args, **kwargs):
        """ """
        ...
    def rawHeaderList(self, *args, **kwargs):
        """ """
        ...
    def rawHeaderPairs(self, *args, **kwargs):
        """ """
        ...
    def readBufferSize(self, *args, **kwargs):
        """ """
        ...
    def request(self, *args, **kwargs):
        """ """
        ...
    def setAttribute(self, *args, **kwargs):
        """ """
        ...
    def setError(self, *args, **kwargs):
        """ """
        ...
    def setFinished(self, *args, **kwargs):
        """ """
        ...
    def setHeader(self, *args, **kwargs):
        """ """
        ...
    def setOperation(self, *args, **kwargs):
        """ """
        ...
    def setRawHeader(self, *args, **kwargs):
        """ """
        ...
    def setReadBufferSize(self, *args, **kwargs):
        """ """
        ...
    def setRequest(self, *args, **kwargs):
        """ """
        ...
    def setSslConfiguration(self, *args, **kwargs):
        """ """
        ...
    def setUrl(self, *args, **kwargs):
        """ """
        ...
    def sslConfiguration(self, *args, **kwargs):
        """ """
        ...
    def url(self, *args, **kwargs):
        """ """
        ...
    def writeData(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkRequest(Shiboken.Object):
    AlwaysCache: ...
    """
    PySide.QtNetwork.QNetworkRequest.CacheLoadControl.Always...
    """

    AlwaysNetwork: ...
    """
    PySide.QtNetwork.QNetworkRequest.CacheLoadControl.Alwa...
    """

    Attribute: ...
    """
    <type 'PySide.QtNetwork.QNetworkRequest.Attribute'>
    """

    AuthenticationReuseAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attrib...
    """

    Automatic: ... = PySide.QtNetwork.QNetworkRequest.LoadControl.Automatic
    """
    """

    CacheLoadControl: ...
    """
    <type 'PySide.QtNetwork.QNetworkRequest.CacheLoadCo...
    """

    CacheLoadControlAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribute...
    """

    CacheSaveControlAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribute...
    """

    ConnectionEncryptedAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attrib...
    """

    ContentDispositionHeader: ...
    """
    PySide.QtNetwork.QNetworkRequest.KnownHeade...
    """

    ContentLengthHeader: ...
    """
    PySide.QtNetwork.QNetworkRequest.KnownHeaders.Co...
    """

    ContentTypeHeader: ...
    """
    PySide.QtNetwork.QNetworkRequest.KnownHeaders.Cont...
    """

    CookieHeader: ...
    """
    PySide.QtNetwork.QNetworkRequest.KnownHeaders.CookieHea...
    """

    CookieLoadControlAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribut...
    """

    CookieSaveControlAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribut...
    """

    CustomVerbAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribute.Custo...
    """

    DoNotBufferUploadDataAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attr...
    """

    DownloadBufferAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribute.D...
    """

    HighPriority: ... = PySide.QtNetwork.QNetworkRequest.Priority.HighPriority
    """
    """

    HttpPipeliningAllowedAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attr...
    """

    HttpPipeliningWasUsedAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attr...
    """

    HttpReasonPhraseAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribute...
    """

    HttpStatusCodeAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribute.H...
    """

    KnownHeaders: ...
    """
    <type 'PySide.QtNetwork.QNetworkRequest.KnownHeaders'>
    """

    LastModifiedHeader: ...
    """
    PySide.QtNetwork.QNetworkRequest.KnownHeaders.Las...
    """

    LoadControl: ...
    """
    <type 'PySide.QtNetwork.QNetworkRequest.LoadControl'>
    """

    LocationHeader: ...
    """
    PySide.QtNetwork.QNetworkRequest.KnownHeaders.Locatio...
    """

    LowPriority: ... = PySide.QtNetwork.QNetworkRequest.Priority.LowPriority
    """
    """

    Manual: ... = PySide.QtNetwork.QNetworkRequest.LoadControl.Manual
    """
    """

    MaximumDownloadBufferSizeAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest....
    """

    NormalPriority: ...
    """
    PySide.QtNetwork.QNetworkRequest.Priority.NormalPrior...
    """

    PreferCache: ...
    """
    PySide.QtNetwork.QNetworkRequest.CacheLoadControl.Prefer...
    """

    PreferNetwork: ...
    """
    PySide.QtNetwork.QNetworkRequest.CacheLoadControl.Pref...
    """

    Priority: ...
    """
    <type 'PySide.QtNetwork.QNetworkRequest.Priority'>
    """

    RedirectionTargetAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribut...
    """

    SetCookieHeader: ...
    """
    PySide.QtNetwork.QNetworkRequest.KnownHeaders.SetCoo...
    """

    SourceIsFromCacheAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribut...
    """

    SynchronousRequestAttribute: ...
    """
    PySide.QtNetwork.QNetworkRequest.Attribu...
    """

    User: ... = PySide.QtNetwork.QNetworkRequest.Attribute.User
    """
    """

    UserMax: ... = PySide.QtNetwork.QNetworkRequest.Attribute.UserMax
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """
    def __copy__(self, *args, **kwargs):
        """ """
        ...
    def __eq__(self, *args, **kwargs):
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, *args, **kwargs):
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, *args, **kwargs):
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, *args, **kwargs):
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, *args, **kwargs):
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, *args, **kwargs):
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def attribute(self, *args, **kwargs):
        """ """
        ...
    def hasRawHeader(self, *args, **kwargs):
        """ """
        ...
    def header(self, *args, **kwargs):
        """ """
        ...
    def originatingObject(self, *args, **kwargs):
        """ """
        ...
    def priority(self, *args, **kwargs):
        """ """
        ...
    def rawHeader(self, *args, **kwargs):
        """ """
        ...
    def rawHeaderList(self, *args, **kwargs):
        """ """
        ...
    def setAttribute(self, *args, **kwargs):
        """ """
        ...
    def setHeader(self, *args, **kwargs):
        """ """
        ...
    def setOriginatingObject(self, *args, **kwargs):
        """ """
        ...
    def setPriority(self, *args, **kwargs):
        """ """
        ...
    def setRawHeader(self, *args, **kwargs):
        """ """
        ...
    def setSslConfiguration(self, *args, **kwargs):
        """ """
        ...
    def setUrl(self, *args, **kwargs):
        """ """
        ...
    def sslConfiguration(self, *args, **kwargs):
        """ """
        ...
    def url(self, *args, **kwargs):
        """ """
        ...
    ...

class QNetworkSession(PySide.QtCore.QObject):
    Closing: ... = PySide.QtNetwork.QNetworkSession.State.Closing
    """
    """

    Connected: ... = PySide.QtNetwork.QNetworkSession.State.Connected
    """
    """

    Connecting: ... = PySide.QtNetwork.QNetworkSession.State.Connecting
    """
    """

    Disconnected: ... = PySide.QtNetwork.QNetworkSession.State.Disconnected
    """
    """

    Invalid: ... = PySide.QtNetwork.QNetworkSession.State.Invalid
    """
    """

    InvalidConfigurationError: ...
    """
    PySide.QtNetwork.QNetworkSession.SessionEr...
    """

    NotAvailable: ... = PySide.QtNetwork.QNetworkSession.State.NotAvailable
    """
    """

    OperationNotSupportedError: ...
    """
    PySide.QtNetwork.QNetworkSession.SessionE...
    """

    Roaming: ... = PySide.QtNetwork.QNetworkSession.State.Roaming
    """
    """

    RoamingError: ...
    """
    PySide.QtNetwork.QNetworkSession.SessionError.RoamingEr...
    """

    SessionAbortedError: ...
    """
    PySide.QtNetwork.QNetworkSession.SessionError.Se...
    """

    SessionError: ...
    """
    <type 'PySide.QtNetwork.QNetworkSession.SessionError'>
    """

    State: ...
    """
    <type 'PySide.QtNetwork.QNetworkSession.State'>
    """

    UnknownSessionError: ...
    """
    PySide.QtNetwork.QNetworkSession.SessionError.Un...
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    closed: ...
    """
    Signal
    """

    error: ...
    """
    Signal
    """

    newConfigurationActivated: ...
    """
    Signal
    """

    opened: ...
    """
    Signal
    """

    preferredConfigurationChanged: ...
    """
    Signal
    """

    stateChanged: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def accept(self, *args, **kwargs):
        """ """
        ...
    def activeTime(self, *args, **kwargs):
        """ """
        ...
    def bytesReceived(self, *args, **kwargs):
        """ """
        ...
    def bytesWritten(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def configuration(self, *args, **kwargs):
        """ """
        ...
    def connectNotify(self, *args, **kwargs):
        """ """
        ...
    def disconnectNotify(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def ignore(self, *args, **kwargs):
        """ """
        ...
    def interface(self, *args, **kwargs):
        """ """
        ...
    def isOpen(self, *args, **kwargs):
        """ """
        ...
    def migrate(self, *args, **kwargs):
        """ """
        ...
    def open(self, *args, **kwargs):
        """ """
        ...
    def reject(self, *args, **kwargs):
        """ """
        ...
    def sessionProperty(self, *args, **kwargs):
        """ """
        ...
    def setSessionProperty(self, *args, **kwargs):
        """ """
        ...
    def state(self, *args, **kwargs):
        """ """
        ...
    def stop(self, *args, **kwargs):
        """ """
        ...
    def waitForOpened(self, *args, **kwargs):
        """ """
        ...
    ...

class QSsl(Shiboken.Object):
    AlternateNameEntryType: ...
    """
    <type 'PySide.QtNetwork.QSsl.AlternateNameEnt...
    """

    AnyProtocol: ... = PySide.QtNetwork.QSsl.SslProtocol.AnyProtocol
    """
    """

    Der: ... = PySide.QtNetwork.QSsl.EncodingFormat.Der
    """
    """

    DnsEntry: ... = PySide.QtNetwork.QSsl.AlternateNameEntryType.DnsEntry
    """
    """

    Dsa: ... = PySide.QtNetwork.QSsl.KeyAlgorithm.Dsa
    """
    """

    EmailEntry: ... = PySide.QtNetwork.QSsl.AlternateNameEntryType.EmailEntry
    """
    """

    EncodingFormat: ...
    """
    <type 'PySide.QtNetwork.QSsl.EncodingFormat'>
    """

    KeyAlgorithm: ...
    """
    <type 'PySide.QtNetwork.QSsl.KeyAlgorithm'>
    """

    KeyType: ...
    """
    <type 'PySide.QtNetwork.QSsl.KeyType'>
    """

    Pem: ... = PySide.QtNetwork.QSsl.EncodingFormat.Pem
    """
    """

    PrivateKey: ... = PySide.QtNetwork.QSsl.KeyType.PrivateKey
    """
    """

    PublicKey: ... = PySide.QtNetwork.QSsl.KeyType.PublicKey
    """
    """

    Rsa: ... = PySide.QtNetwork.QSsl.KeyAlgorithm.Rsa
    """
    """

    SecureProtocols: ... = PySide.QtNetwork.QSsl.SslProtocol.SecureProtocols
    """
    """

    SslProtocol: ...
    """
    <type 'PySide.QtNetwork.QSsl.SslProtocol'>
    """

    SslV2: ... = PySide.QtNetwork.QSsl.SslProtocol.SslV2
    """
    """

    SslV3: ... = PySide.QtNetwork.QSsl.SslProtocol.SslV3
    """
    """

    TlsV1: ... = PySide.QtNetwork.QSsl.SslProtocol.TlsV1
    """
    """

    TlsV1SslV3: ... = PySide.QtNetwork.QSsl.SslProtocol.TlsV1SslV3
    """
    """

    UnknownProtocol: ... = PySide.QtNetwork.QSsl.SslProtocol.UnknownProtocol
    """
    """

    ...

class QTcpServer(PySide.QtCore.QObject):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    newConnection: ...
    """
    Signal
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addPendingConnection(self, *args, **kwargs):
        """ """
        ...
    def close(self, *args, **kwargs):
        """ """
        ...
    def errorString(self, *args, **kwargs):
        """ """
        ...
    def hasPendingConnections(self, *args, **kwargs):
        """ """
        ...
    def incomingConnection(self, *args, **kwargs):
        """ """
        ...
    def isListening(self, *args, **kwargs):
        """ """
        ...
    def listen(self, *args, **kwargs):
        """ """
        ...
    def maxPendingConnections(self, *args, **kwargs):
        """ """
        ...
    def nextPendingConnection(self, *args, **kwargs):
        """ """
        ...
    def proxy(self, *args, **kwargs):
        """ """
        ...
    def serverAddress(self, *args, **kwargs):
        """ """
        ...
    def serverError(self, *args, **kwargs):
        """ """
        ...
    def serverPort(self, *args, **kwargs):
        """ """
        ...
    def setMaxPendingConnections(self, *args, **kwargs):
        """ """
        ...
    def setProxy(self, *args, **kwargs):
        """ """
        ...
    def setSocketDescriptor(self, *args, **kwargs):
        """ """
        ...
    def socketDescriptor(self, *args, **kwargs):
        """ """
        ...
    def waitForNewConnection(self, *args, **kwargs):
        """ """
        ...
    ...

class QTcpSocket(QAbstractSocket):
    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    ...

class QUdpSocket(QAbstractSocket):
    BindFlag: ...
    """
    <type 'PySide.QtNetwork.QUdpSocket.BindFlag'>
    """

    BindMode: ...
    """
    <type 'BindMode'>
    """

    DefaultForPlatform: ...
    """
    PySide.QtNetwork.QUdpSocket.BindFlag.DefaultForPl...
    """

    DontShareAddress: ...
    """
    PySide.QtNetwork.QUdpSocket.BindFlag.DontShareAddre...
    """

    ReuseAddressHint: ...
    """
    PySide.QtNetwork.QUdpSocket.BindFlag.ReuseAddressHi...
    """

    ShareAddress: ... = PySide.QtNetwork.QUdpSocket.BindFlag.ShareAddress
    """
    """

    __new__: ...
    """
    T.__new__(S, ...) -> a new object with type S, a subtype of T
    """

    staticMetaObject: ...
    """
    <PySide.QtCore.QMetaObject object>
    """
    def __init__(self, *args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bind(self, *args, **kwargs):
        """ """
        ...
    def hasPendingDatagrams(self, *args, **kwargs):
        """ """
        ...
    def joinMulticastGroup(self, *args, **kwargs):
        """ """
        ...
    def leaveMulticastGroup(self, *args, **kwargs):
        """ """
        ...
    def multicastInterface(self, *args, **kwargs):
        """ """
        ...
    def pendingDatagramSize(self, *args, **kwargs):
        """ """
        ...
    def readDatagram(self, *args, **kwargs):
        """ """
        ...
    def setMulticastInterface(self, *args, **kwargs):
        """ """
        ...
    def writeDatagram(self, *args, **kwargs):
        """ """
        ...
    ...

__all__: ...
"""
['QAbstractNetworkCache', 'QAbstractSocket', 'QAuthenticator...
"""
