// HatchKernel v0.1.11
// TODO: release v1 after 2023-09-13
kernel HatchKernal : ImageComputationKernel<eComponentWise>
{
  Image<eRead, eAccessRanged2D, eEdgeClamped> src;
  Image<eRead, eAccessRandom, eEdgeClamped> pattern;
  Image<eWrite, eAccessPoint> dst;

param:
  // 0: raw
  // 1: center
  // 2: transform
  // 3: reflection
  int input;
  float2 size;
  float2 origin;
  float rotate;
  float unitRotate;
  float2 unitScale;
  float2 patternScaleMin;
  float2 patternScaleMax;
  float patternValueMin;
  float patternValueMax;
  // 0: input
  // 1: line
  // 2: dot outside
  // 3: dot inside
  // 4: pattern
  // -1: offset0
  // -2: offset1
  // -3: p0 (raw)
  // -4: p1 (after rotate)
  // -5: center0
  // -6: center1
  // -7: index
  // -8: index is even
  int output;

local:
  float2 patternOrigin;
  float2 patternSize;

  void define() {
    defineParam(size, "size", float2(41.0f, 41.0f));
    defineParam(unitScale, "unitScale", float2(1.0f, 1.0f));
    defineParam(patternScaleMax, "patternScaleMax", float2(1.0f, 1.0f));
    defineParam(patternValueMax, "patternValueMax", 1.0f);
  }

  void init() {
    src.setRange(-size.x, -size.x, size.y, size.y);
    patternOrigin = float2(
      pattern.bounds.x1,
      pattern.bounds.y1
    );
    patternSize = float2(
      pattern.bounds.x2 - pattern.bounds.x1,
      pattern.bounds.y2 - pattern.bounds.y1
    );
  }


  float2 rotate2D(float2 v, float radians)
  {
    if (radians == 0.0f || (v.x == 0.0f && v.y == 0.0f)){
      return v;
    }
    return float2(
      v.x * cos(radians) - v.y * sin(radians),
      v.x * sin(radians) + v.y * cos(radians)
    );
  }

  float2 rotate2D(float2 v, float radians, float2 center)
  {
    if (center.x == 0.0f && center.y == 0.0f){
      return rotate2D(v, radians);
    }
    return rotate2D(
      v - center,
      radians
    ) + center;
  }

  float linear(float p, float p0, float p1)
  {
    if (p0 == p1) {
      return p0;
    }
    return p0 + p * (p1 - p0);
  }
  float2 linear(float2 p, float2 p0, float2 p1) 
  {
    return float2(
      linear(p.x, p0.x, p1.x),
      linear(p.y, p0.y, p1.y)
    );
  }

  void process(int3 pos)
  {
    int comp = pos.z;
    if (size.x == 0 || size.y == 0) {
      dst() = comp == 0;
      return;
    }
    float2 p0 = float2(pos.x, pos.y);
    float2 p1 = rotate2D(p0-origin, rotate);
    int2 index = int2(floor(p1.x / size.x), floor(p1.y / size.y));
    float2 center1 = float2(
      float(index.x) * size.x + size.x / 2.0f,
      float(index.y) * size.y + size.y / 2.0f
    );
    float2 center0 = rotate2D(center1, -rotate) + origin;
    center0.x = floor(center0.x);
    center0.y = floor(center0.y);
    float2 offset1 = p1 - center1;
    float2 offset0 = p0 - center0;
    float v;
    if (input == 0) {
      v = src(0, 0);
    } else if (input == 1) {
      v = src(-int(offset0.x), -int(offset0.y));
    } else if (input == 2) {
      float2 p3 = rotate2D(center0 + offset0 / unitScale, unitRotate, center0);
      float2 offset = p3 - p0;
      v = src(int(offset.x), int(offset.y));
    } else if (input == 3) {
      float2 offset = rotate2D(offset0, unitRotate) - offset0;
      v = src(-int(offset.x), -int(offset.y));
    } else {
      v = 0;
    }
    
    if (output == 0) {
      dst() = v;
    } else if (output == 1) {
      float h = v * size.y;
      dst() = fabs(offset1.y) <= h / 2.0f;
    } else if (output == 2) {
      dst() = length(offset1 / size) <= v * sqrt(2.0f) / 2.0f;
    } else if (output == 3) {
      dst() = length(offset1 / size) <= v / 2.0f;
    } else if (output == 4) {
      float2 s = linear(
          float2(v, v),
          patternScaleMin,
          patternScaleMax
      );
      if (s.x == 0 || s.y == 0) {
        dst() = 0;
        return;
      }
      float2 p3 = (offset1
        / size 
        / s
        + float2(0.5f, 0.5f)
      ) * patternSize 
        + patternOrigin;
      dst() = bilinear(
        pattern,
        p3.x,
        p3.y
      ) * linear(
        v,
        patternValueMin,
        patternValueMax
      );
    } else if (output == -1) {
      if (comp == 0) {
        dst() = offset0.x;
      } else if (comp == 1) {
        dst() = offset0.y;
      } else {
        dst() = 0;
      }
    } else if (output == -2) {
      if (comp == 0) {
        dst() = offset1.x;
      } else if (comp == 1) {
        dst() = offset1.y;
      } else {
        dst() = 0;
      }
    } else if (output == -3) {
      if (comp == 0) {
        dst() = p0.x;
      } else if (comp == 1) {
        dst() = p0.y;
      } else {
        dst() = 0;
      }
    } else if (output == -4) {
      if (comp == 0) {
        dst() = p1.x;
      } else if (comp == 1) {
        dst() = p1.y;
      } else {
        dst() = 0;
      }
    } else if (output == -5) {
      if (comp == 0) {
        dst() = center0.x;
      } else if (comp == 1) {
        dst() = center0.y;
      } else {
        dst() = 0;
      }
    } else if (output == -6) {
      if (comp == 0) {
        dst() = center1.x;
      } else if (comp == 1) {
        dst() = center1.y;
      } else {
        dst() = 0;
      }
    } else if (output == -7) {
      if (comp == 0) {
        dst() = index.x;
      } else if (comp == 1) {
        dst() = index.y;
      } else {
        dst() = 0;
      }
    } else if (output == -8) {
      if (comp == 0) {
        dst() = abs(index.x % 2);
      } else if (comp == 1) {
        dst() = abs(index.y % 2);
      } else {
        dst() = 0;
      }
    } else {
      dst() = 0;
    }
  }
};
